{
  "version": 4,
  "terraform_version": "1.9.8",
  "serial": 180,
  "lineage": "ea36893b-beda-edea-00d5-2b8b68e792ea",
  "outputs": {
    "cvm1_public_ip": {
      "value": "43.154.143.154",
      "type": "string"
    },
    "cvm1_ssh_cmd": {
      "value": "ssh ubuntu@43.154.143.154 (pwd: qwe123ewq)",
      "type": "string"
    },
    "cvm2_public_ip": {
      "value": "43.135.92.229",
      "type": "string"
    },
    "cvm2_ssh_cmd": {
      "value": "ssh ubuntu@43.135.92.229 (pwd: qwe123ewq)",
      "type": "string"
    },
    "cvm_public_ip": {
      "value": "43.135.40.99",
      "type": "string"
    },
    "cvm_ssh_cmd": {
      "value": "ssh ubuntu@43.135.40.99 (pwd: qwe123ewq)",
      "type": "string"
    },
    "export_kubeconfig1_cmd": {
      "value": "export KUBECONFIG=./config1.yaml",
      "type": "string"
    },
    "export_kubeconfig2_cmd": {
      "value": "export KUBECONFIG=./config2.yaml",
      "type": "string"
    },
    "export_kubeconfig_cmd": {
      "value": "export KUBECONFIG=./config.yaml",
      "type": "string"
    }
  },
  "resources": [
    {
      "mode": "managed",
      "type": "local_file",
      "name": "kubeconfig",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "\"apiVersion\": \"v1\"\n\"clusters\":\n- \"cluster\":\n    \"certificate-authority-data\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJ2VENDQVVPZ0F3SUJBZ0lRWmxSQWxWZmJ2cjN0MzhwVy8zY1pQVEFLQmdncWhrak9QUVFEQXpBZk1SMHcKR3dZRFZRUURFeFJyZFdKbGNtNWxkR1Z6TFhObGNuWmxjaTFqWVRBZ0Z3MHlOREV5TURjd01ESTVNekJhR0E4eQpNVEkwTVRJd09EQXdNamt6TUZvd0h6RWRNQnNHQTFVRUF4TVVhM1ZpWlhKdVpYUmxjeTF6WlhKMlpYSXRZMkV3CmRqQVFCZ2NxaGtqT1BRSUJCZ1VyZ1FRQUlnTmlBQVMrenZCdS9yeDB2MWFicUNTekNILy9hODNwYTZDTDJ0Zk4KWHBtTzM5N0FZUktCWmhmTnFtNHZUbSt2MlhlbUx3N0thVTFWc3Z0d3RYdEtsYzA2enNqRmVFbGNjd0FmZnJ4agpGZnljelRuVy9IOFdOY1NROC90eWtKQ1Q1c3BvZDZXalFqQkFNQTRHQTFVZER3RUIvd1FFQXdJQ3BEQVBCZ05WCkhSTUJBZjhFQlRBREFRSC9NQjBHQTFVZERnUVdCQlI4c0cyRnN0aVIyaHBIYitJYWdlemdHallXVVRBS0JnZ3EKaGtqT1BRUURBd05vQURCbEFqRUE2bVZlRyt1eDI0T3RTL3cyUy94V1dkWi9GTDh6OFpaN0VHRjNNU2txM1lmbQpsZHVPOXF1dTBOSEhZMVdBZmtDSEFqQkpLYU15QzlJQ1greGlUMTFOZjNXZ2d5eUYwc2tQZUtYZ1dVYkxVazJlCjJPM1lPSnBSdFpFNWIyZUhRYy9xWjlVPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\"\n    \"server\": \"https://43.135.40.99:6443\"\n  \"name\": \"cluster.local\"\n\"contexts\":\n- \"context\":\n    \"cluster\": \"cluster.local\"\n    \"user\": \"master-user\"\n  \"name\": \"cluster.local\"\n\"current-context\": \"cluster.local\"\n\"kind\": \"Config\"\n\"preferences\": {}\n\"users\":\n- \"name\": \"master-user\"\n  \"user\":\n    \"client-certificate-data\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI0RENDQVdlZ0F3SUJBZ0lRY2c0Z3pYQStxT1p4dnJjTk1hZE52VEFLQmdncWhrak9QUVFEQXpBZk1SMHcKR3dZRFZRUURFeFJyZFdKbGNtNWxkR1Z6TFdOc2FXVnVkQzFqWVRBZ0Z3MHlOREV5TURjd01ESTVNekJhR0E4eQpNVEkwTVRJd09EQXdNamt6TUZvd0x6RVhNQlVHQTFVRUNoTU9jM2x6ZEdWdE9tMWhjM1JsY25NeEZEQVNCZ05WCkJBTVRDMjFoYzNSbGNpMTFjMlZ5TUhZd0VBWUhLb1pJemowQ0FRWUZLNEVFQUNJRFlnQUU0bjJpQ0RjNkgyZTYKblprQ2pKUEI5ai9PeEQ0b3FPQmM2KzM4TVdHcDFLTkNPZCtVVUNsVHdKTXdJNHhBMTR5Zys5VnNqNklrdWNWdAoxd2pwSUEzbzdmeWZMTDJzU0FKaDI4Qi9jL0JiR21kc1Zsd2RkVmVFUm0rdVhaeEF0Ylh3bzFZd1ZEQU9CZ05WCkhROEJBZjhFQkFNQ0JhQXdFd1lEVlIwbEJBd3dDZ1lJS3dZQkJRVUhBd0l3REFZRFZSMFRBUUgvQkFJd0FEQWYKQmdOVkhTTUVHREFXZ0JRR1hLbHROc0h5dS9mbHdYQ2hybkVadzUybFp6QUtCZ2dxaGtqT1BRUURBd05uQURCawpBakJzOTFYdjZTZW9OcmZxQVpCUnpBUkd4OFFnN0l5Y2s2NHlLUEpGZmFtZjBZNk8rT2lOWW1JbFJvRzc1U2VOCjVHQUNNQ29ZQzdaS0hQZnZ4dDFKcVpIc1NWRitYU3k5YlV4Yi9NYXIxbG1UdTdaYzRjK2VoZXhIMnRITHJ3WTEKcHp6bHBnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\"\n    \"client-key-data\": \"LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkREbm5LRm1NbFM0VUMxQWY3UG11QUtnNDJQL2V4RHBmMEZDYllCeEg2Mnd5K2k2R3d5ZkEvSTQKOUN0NExJblJxbGFnQndZRks0RUVBQ0toWkFOaUFBVGlmYUlJTnpvZlo3cWRtUUtNazhIMlA4N0VQaWlvNEZ6cgo3Znd4WWFuVW8wSTUzNVJRS1ZQQWt6QWpqRURYaktENzFXeVBvaVM1eFczWENPa2dEZWp0L0o4c3ZheElBbUhiCndIOXo4RnNhWjJ4V1hCMTFWNFJHYjY1ZG5FQzF0ZkE9Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K\"\n",
            "content_base64": null,
            "content_base64sha256": "pEjJhgp3lcm3AHwOVO/Od7ZwgmrdUitfGsvs0z54XrE=",
            "content_base64sha512": "INjRftCtXqPwx+6RfCLcfFfGK/nXsm0JBCXSO+TY/lsMN4ywmzAY5WsUyVoMLr3usUjdth0YgWViBmWSxg5/2g==",
            "content_md5": "9be9437db21207f63a49c8ed80e76d47",
            "content_sha1": "66265c1c26baa69c840d5a1949b989739c7df93b",
            "content_sha256": "a448c9860a7795c9b7007c0e54efce77b670826add522b5f1acbecd33e785eb1",
            "content_sha512": "20d8d17ed0ad5ea3f0c7ee917c22dc7c57c62bf9d7b26d090425d23be4d8fe5b0c378cb09b3018e56b14c95a0c2ebdeeb148ddb61d18816562066592c60e7fda",
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "./config.yaml",
            "id": "66265c1c26baa69c840d5a1949b989739c7df93b",
            "sensitive_content": null,
            "source": null
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "content"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "sensitive_content"
              }
            ]
          ],
          "dependencies": [
            "module.cvm.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm.data.tencentcloud_images.default",
            "module.cvm.data.tencentcloud_instance_types.default",
            "module.cvm.tencentcloud_instance.ubuntu",
            "module.k3s.module.k3s.tls_cert_request.master_user",
            "module.k3s.module.k3s.tls_locally_signed_cert.master_user",
            "module.k3s.module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s.module.k3s.tls_private_key.master_user",
            "module.k3s.module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "local_file",
      "name": "kubeconfig1",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "\"apiVersion\": \"v1\"\n\"clusters\":\n- \"cluster\":\n    \"certificate-authority-data\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJ2VENDQVVTZ0F3SUJBZ0lSQU9SRTAxa0ZuSW1hSCtORmVEcFB4MUF3Q2dZSUtvWkl6ajBFQXdNd0h6RWQKTUJzR0ExVUVBeE1VYTNWaVpYSnVaWFJsY3kxelpYSjJaWEl0WTJFd0lCY05NalF4TWpBM01EQXlPVFF3V2hnUApNakV5TkRFeU1EZ3dNREk1TkRCYU1COHhIVEFiQmdOVkJBTVRGR3QxWW1WeWJtVjBaWE10YzJWeWRtVnlMV05oCk1IWXdFQVlIS29aSXpqMENBUVlGSzRFRUFDSURZZ0FFTCs3Ti9NZk5ZUUV5Q1FhYU9MalNaa3J3LzFsdUFUZzAKSkJkOUVkTGgxN3BKODcwYVpNdXZGWXEzVll6K2ZZc2tZVDM1aGx5dTFzMTNSS3A0NTExekJRRzlJVzRLVHVELwpqSmNJYnk3SUZMMThQSEdBV2tZZlgvcXBMMHRyNXp5Sm8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEClZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVV0l5Nysybk5TU2FJZ1kvRnFrSUVyaTN6NXBnd0NnWUkKS29aSXpqMEVBd01EWndBd1pBSXdlN0ovRW4zbXpKTXhkYlJvQzh3RlNKZmttQWU1QnFpeFJOb1EzaWp4ZGludgpscnFuRlhxTUp0eEZCUWxhOVQ4WEFqQVNzUkZpM1BKNFBjRzBXZzBNNDRPb29sVGdpYXNHbXovZ2tRN2lJYWxFCjNVRkMrQk1ZcUxDOWhlcEtVbGhDVzJRPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\"\n    \"server\": \"https://43.154.143.154:6443\"\n  \"name\": \"cluster.local\"\n\"contexts\":\n- \"context\":\n    \"cluster\": \"cluster.local\"\n    \"user\": \"master-user\"\n  \"name\": \"cluster.local\"\n\"current-context\": \"cluster.local\"\n\"kind\": \"Config\"\n\"preferences\": {}\n\"users\":\n- \"name\": \"master-user\"\n  \"user\":\n    \"client-certificate-data\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI0ekNDQVdpZ0F3SUJBZ0lSQUxWTktFRkg1MVpWYS9XZ08rNGNVSWd3Q2dZSUtvWkl6ajBFQXdNd0h6RWQKTUJzR0ExVUVBeE1VYTNWaVpYSnVaWFJsY3kxamJHbGxiblF0WTJFd0lCY05NalF4TWpBM01EQXlPVFV3V2hnUApNakV5TkRFeU1EZ3dNREk1TlRCYU1DOHhGekFWQmdOVkJBb1REbk41YzNSbGJUcHRZWE4wWlhKek1SUXdFZ1lEClZRUURFd3R0WVhOMFpYSXRkWE5sY2pCMk1CQUdCeXFHU000OUFnRUdCU3VCQkFBaUEySUFCTXB1Vi90a1RsNHIKU0lXL0t3NGpteDV2QW1SU1JWekp3R09Pa2lBSGV1c1RmUGVEOTY4Q0ZoQzcxdkpRaHFEbDhHZVRnQ0sxRVRxQwpmTmExdHBKeHJqNTBMYmpuQTRNWFlKeGh5TWY5UU9YdEpCMnViRVV3T2NiWUxVaXplSUh2RDZOV01GUXdEZ1lEClZSMFBBUUgvQkFRREFnV2dNQk1HQTFVZEpRUU1NQW9HQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXcKSHdZRFZSMGpCQmd3Rm9BVU0xOUs4U0hVb0JWZzNuRitDTHo2QVFiM1NLTXdDZ1lJS29aSXpqMEVBd01EYVFBdwpaZ0l4QUlYb1dReDl2bjkzNUM4dnQ0QXk4OHlqWU9kcHJtSzkrUXUwL1MyUE9VZGNtOENHZnZnaC9tUEVPMFJnCk92ZmJid0l4QU4rdG1SZ1dGQXY0YVNmWTdValRHbzdKclRRdmkvdVNwNUhhRldQRkdGcnRFcndCcFdWaTZoZ1oKOGlRNGFlZ096UT09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K\"\n    \"client-key-data\": \"LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkREcWZaeU1MUFdvMkpTNVFER0h1YnZiTkd1Q1FoZUdVTmUvYjlWT0lSZGpCOWwyOUtDNFc1ZkYKVG4vZTVhRnh0QStnQndZRks0RUVBQ0toWkFOaUFBVEtibGY3WkU1ZUswaUZ2eXNPSTVzZWJ3SmtVa1ZjeWNCagpqcElnQjNyckUzejNnL2V2QWhZUXU5YnlVSWFnNWZCbms0QWl0UkU2Z256V3RiYVNjYTQrZEMyNDV3T0RGMkNjClljakgvVURsN1NRZHJteEZNRG5HMkMxSXMzaUI3dzg9Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K\"\n",
            "content_base64": null,
            "content_base64sha256": "pkT67XYiXLxwHwo0wwquagVavC1nD5WZ0+N6LjM5jRA=",
            "content_base64sha512": "1jN8zfG1C7gwznJW/gJBr71XLzWQowd9I6fGAbZxJt8hMbd1q5vcnEisz66hN8tRRpZplSw3nUvYF/VDpiI02Q==",
            "content_md5": "dc666cfc708ccb908d66c7420cb882f7",
            "content_sha1": "2550903c6c790f16a4dfa34c12171fefc783ac21",
            "content_sha256": "a644faed76225cbc701f0a34c30aae6a055abc2d670f9599d3e37a2e33398d10",
            "content_sha512": "d6337ccdf1b50bb830ce7256fe0241afbd572f3590a3077d23a7c601b67126df2131b775ab9bdc9c48accfaea137cb51469669952c379d4bd817f543a62234d9",
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "./config1.yaml",
            "id": "2550903c6c790f16a4dfa34c12171fefc783ac21",
            "sensitive_content": null,
            "source": null
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "sensitive_content"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "content"
              }
            ]
          ],
          "dependencies": [
            "module.cvm1.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm1.data.tencentcloud_images.default",
            "module.cvm1.data.tencentcloud_instance_types.default",
            "module.cvm1.tencentcloud_instance.ubuntu",
            "module.k3s1.module.k3s.tls_cert_request.master_user",
            "module.k3s1.module.k3s.tls_locally_signed_cert.master_user",
            "module.k3s1.module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s1.module.k3s.tls_private_key.master_user",
            "module.k3s1.module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "mode": "managed",
      "type": "local_file",
      "name": "kubeconfig2",
      "provider": "provider[\"registry.terraform.io/hashicorp/local\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "content": "\"apiVersion\": \"v1\"\n\"clusters\":\n- \"cluster\":\n    \"certificate-authority-data\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJ2VENDQVVTZ0F3SUJBZ0lSQUxuVVN0OWxlL2F0dGtMMDI5cDhmaGd3Q2dZSUtvWkl6ajBFQXdNd0h6RWQKTUJzR0ExVUVBeE1VYTNWaVpYSnVaWFJsY3kxelpYSjJaWEl0WTJFd0lCY05NalF4TWpBM01EQXlPVFV3V2hnUApNakV5TkRFeU1EZ3dNREk1TlRCYU1COHhIVEFiQmdOVkJBTVRGR3QxWW1WeWJtVjBaWE10YzJWeWRtVnlMV05oCk1IWXdFQVlIS29aSXpqMENBUVlGSzRFRUFDSURZZ0FFTlZkazArRFlZQzFBbEZhRW9oWDg2NjdtN3g4eE54WUYKSlJXQmcxSmloYnVuTGtyQy8vSDBvVXlObUF2Y0gxRk56ZnF6dHFFeW02L2R4NURWS0tLMVk1M0lhOTBSajRZNAovT0g1V0EwbDE0OS9TQk1LNWxyS3d0MWpscXlCNHpHdG8wSXdRREFPQmdOVkhROEJBZjhFQkFNQ0FxUXdEd1lEClZSMFRBUUgvQkFVd0F3RUIvekFkQmdOVkhRNEVGZ1FVS2RyOGQ5MUdya09qMWdhU1R1WW1OWElMNVJRd0NnWUkKS29aSXpqMEVBd01EWndBd1pBSXdEbmxWazZuM3p1ZnVsZUlZU0ZWbUdkMTEveUg5elVSUmdmK2xFM3kyOU43SApCNTdVcHEzQnRDeWt5U0RVZU0zdUFqQTJSMzg1VmdKTUw5VlEyQlUreHpmVlVLSTJBU3lWNlBMN0VYL2dLWEgrCnIxVm1HZ3FxalB6WEZTN1c2UE1PWUVrPQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==\"\n    \"server\": \"https://43.135.92.229:6443\"\n  \"name\": \"cluster.local\"\n\"contexts\":\n- \"context\":\n    \"cluster\": \"cluster.local\"\n    \"user\": \"master-user\"\n  \"name\": \"cluster.local\"\n\"current-context\": \"cluster.local\"\n\"kind\": \"Config\"\n\"preferences\": {}\n\"users\":\n- \"name\": \"master-user\"\n  \"user\":\n    \"client-certificate-data\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUI0akNDQVdpZ0F3SUJBZ0lSQVBDOTVldW0vMWs3UHhrQUMvSUk4aFV3Q2dZSUtvWkl6ajBFQXdNd0h6RWQKTUJzR0ExVUVBeE1VYTNWaVpYSnVaWFJsY3kxamJHbGxiblF0WTJFd0lCY05NalF4TWpBM01EQXlPVFV3V2hnUApNakV5TkRFeU1EZ3dNREk1TlRCYU1DOHhGekFWQmdOVkJBb1REbk41YzNSbGJUcHRZWE4wWlhKek1SUXdFZ1lEClZRUURFd3R0WVhOMFpYSXRkWE5sY2pCMk1CQUdCeXFHU000OUFnRUdCU3VCQkFBaUEySUFCUDh5bFVuRXJEZ0IKb0pEaHhGUFFiaDc3VnJaMHJLanEzdTljekRqQjlUY0k1ak5FNit6SjZLcFN3NEZIYUQ3MFFubHMzOXBSMnhJQwpHMDc0TXN4a2JUKzJsK2JnM0hHVWNFQ1RJemEzTDhXOERXTHk1U3cwOVJ5cmkrZkxEUnRENnFOV01GUXdEZ1lEClZSMFBBUUgvQkFRREFnV2dNQk1HQTFVZEpRUU1NQW9HQ0NzR0FRVUZCd01DTUF3R0ExVWRFd0VCL3dRQ01BQXcKSHdZRFZSMGpCQmd3Rm9BVUdHQmkyeUVDbVR0TENCQkhRSHVOL3RXVG9TNHdDZ1lJS29aSXpqMEVBd01EYUFBdwpaUUl4QU9tNzhJUHQvQmt1aEgvNjNHZUJTMU9KQkJjUDJUMmpMK09zRUhsdjRydFJtL1J0ZmE4K21wbDJYMjRMCld6NDhyZ0l3TmplUzdmQmd1YzB2U2Rra2JUUGRCMGV2d3RrSVVCa21EUWRoYm5temlEYzhIN1hsZHBHMElLQ1IKWUM4QXV4OUEKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=\"\n    \"client-key-data\": \"LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1JR2tBZ0VCQkRCUUpCL3o2VWttbDlWbDYrQjNTTnpSKzRnL1hTb2dzbnYwcERaaFJmcEFPNk4zUmVYcXlmVTMKRDRHNmpVaTg5eGlnQndZRks0RUVBQ0toWkFOaUFBVC9NcFZKeEt3NEFhQ1E0Y1JUMEc0ZSsxYTJkS3lvNnQ3dgpYTXc0d2ZVM0NPWXpST3ZzeWVpcVVzT0JSMmcrOUVKNWJOL2FVZHNTQWh0TytETE1aRzAvdHBmbTROeHhsSEJBCmt5TTJ0eS9GdkExaTh1VXNOUFVjcTR2bnl3MGJRK289Ci0tLS0tRU5EIEVDIFBSSVZBVEUgS0VZLS0tLS0K\"\n",
            "content_base64": null,
            "content_base64sha256": "UmmnHWmGkAHg7j+4aaFmjD1ulsBFu3Bco6zPZD5Srtg=",
            "content_base64sha512": "5yfDyvBaD46M5ysP8UaRZ24QozQOY6Bsd01e2ATVR3TiCBESDW8HiqphRVuwYy6QSSLZZ6fJIFX/jG3lTAySZA==",
            "content_md5": "9e0b530142d6e6237134375ad73743de",
            "content_sha1": "c8184efb8386c29b096b8a5fb4d848f3df052459",
            "content_sha256": "5269a71d69869001e0ee3fb869a1668c3d6e96c045bb705ca3accf643e52aed8",
            "content_sha512": "e727c3caf05a0f8e8ce72b0ff14691676e10a3340e63a06c774d5ed804d54774e20811120d6f078aaa61455bb0632e904922d967a7c92055ff8c6de54c0c9264",
            "directory_permission": "0777",
            "file_permission": "0777",
            "filename": "./config2.yaml",
            "id": "c8184efb8386c29b096b8a5fb4d848f3df052459",
            "sensitive_content": null,
            "source": null
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "sensitive_content"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "content"
              }
            ]
          ],
          "dependencies": [
            "module.cvm2.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm2.data.tencentcloud_images.default",
            "module.cvm2.data.tencentcloud_instance_types.default",
            "module.cvm2.tencentcloud_instance.ubuntu",
            "module.k3s2.module.k3s.tls_cert_request.master_user",
            "module.k3s2.module.k3s.tls_locally_signed_cert.master_user",
            "module.k3s2.module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s2.module.k3s.tls_private_key.master_user",
            "module.k3s2.module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "module": "module.cvm",
      "mode": "data",
      "type": "tencentcloud_availability_zones_by_product",
      "name": "default",
      "provider": "module.cvm.provider[\"registry.terraform.io/tencentcloudstack/tencentcloud\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "1851109860",
            "include_unavailable": null,
            "name": null,
            "product": "cvm",
            "result_output_file": null,
            "zones": [
              {
                "description": "Hong Kong Zone 2",
                "id": "300002",
                "name": "ap-hongkong-2",
                "state": "AVAILABLE"
              },
              {
                "description": "Hong Kong Zone 3",
                "id": "300003",
                "name": "ap-hongkong-3",
                "state": "AVAILABLE"
              }
            ]
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.cvm",
      "mode": "data",
      "type": "tencentcloud_images",
      "name": "default",
      "provider": "module.cvm.provider[\"registry.terraform.io/tencentcloudstack/tencentcloud\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "3943428822",
            "image_id": null,
            "image_name_regex": null,
            "image_type": [
              "PUBLIC_IMAGE"
            ],
            "images": [
              {
                "architecture": "x86_64",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 22.04 LTS 64bit",
                "image_id": "img-487zeit5",
                "image_name": "Ubuntu Server 22.04 LTS 64bit",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 22.04 LTS 64bit",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "x86_64",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 24.04 LTS 64bit",
                "image_id": "img-mmytdhbn",
                "image_name": "Ubuntu Server 24.04 LTS 64bit",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 24.04 LTS 64bit",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "x86_64",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 22.04 LTS 64bit GRID16.2",
                "image_id": "img-fipweiwz",
                "image_name": "Ubuntu Server 22.04 LTS 64bit GRID16.2",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 22.04 LTS 64bit GRID16.2",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "x86_64",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 20.04 LTS 64bit",
                "image_id": "img-22trbn9x",
                "image_name": "Ubuntu Server 20.04 LTS 64bit",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 20.04 LTS 64bit",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "x86_64",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 20.04 LTS 64bit GRID16.2",
                "image_id": "img-rx55p5nv",
                "image_name": "Ubuntu Server 20.04 LTS 64bit GRID16.2",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 20.04 LTS 64bit GRID16.2",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "x86_64",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 20.04 LTS 64bit GRID11.1",
                "image_id": "img-j10l2cnz",
                "image_name": "Ubuntu Server 20.04 LTS 64bit GRID11.1",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 20.04 LTS 64bit GRID11.1",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "arm",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu 20.04(arm64)",
                "image_id": "img-2eokmhf5",
                "image_name": "Ubuntu 20.04(arm64)",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu 20.04(arm64)",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "x86_64",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 18.04 LTS 64bit",
                "image_id": "img-pi0ii46r",
                "image_name": "Ubuntu Server 18.04 LTS 64bit",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 18.04 LTS 64bit",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "arm",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu 18.04(arm64)",
                "image_id": "img-9eh8c1p1",
                "image_name": "Ubuntu 18.04(arm64)",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu 18.04(arm64)",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "x86_64",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 16.04 LTS 64bit",
                "image_id": "img-pyqx34y1",
                "image_name": "Ubuntu Server 16.04 LTS 64bit",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 16.04 LTS 64bit",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "i386",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 16.04 LTS 32bit",
                "image_id": "img-8u6dn6p1",
                "image_name": "Ubuntu Server 16.04 LTS 32bit",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 16.04 LTS 32bit",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "x86_64",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 14.04 LTS 64bit",
                "image_id": "img-3wnd9xpl",
                "image_name": "Ubuntu Server 14.04 LTS 64bit",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 14.04 LTS 64bit",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "i386",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 14.04 LTS 32bit",
                "image_id": "img-qpxvpujt",
                "image_name": "Ubuntu Server 14.04 LTS 32bit",
                "image_size": 50,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 14.04 LTS 32bit",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": false,
                "sync_percent": 0
              },
              {
                "architecture": "x86_64",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 22.04 LTS 64bit UEFI版",
                "image_id": "img-7rotv4ux",
                "image_name": "Ubuntu Server 22.04 LTS 64bit UEFI版",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 22.04 LTS 64bit UEFI版",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              }
            ],
            "instance_type": null,
            "os_name": "ubuntu",
            "result_output_file": null
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.cvm",
      "mode": "data",
      "type": "tencentcloud_instance_types",
      "name": "default",
      "provider": "module.cvm.provider[\"registry.terraform.io/tencentcloudstack/tencentcloud\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "availability_zone": null,
            "cpu_core_count": 4,
            "exclude_sold_out": false,
            "filter": [
              {
                "name": "instance-family",
                "values": [
                  "S5"
                ]
              },
              {
                "name": "zone",
                "values": [
                  "ap-hongkong-2"
                ]
              }
            ],
            "gpu_core_count": null,
            "id": "1950780053",
            "instance_types": [
              {
                "availability_zone": "ap-hongkong-2",
                "cpu_core_count": 4,
                "family": "S5",
                "gpu_core_count": 0,
                "instance_charge_type": "PREPAID",
                "instance_type": "S5.LARGE8",
                "memory_size": 8,
                "status": "SELL"
              },
              {
                "availability_zone": "ap-hongkong-2",
                "cpu_core_count": 4,
                "family": "S5",
                "gpu_core_count": 0,
                "instance_charge_type": "POSTPAID_BY_HOUR",
                "instance_type": "S5.LARGE8",
                "memory_size": 8,
                "status": "SELL"
              },
              {
                "availability_zone": "ap-hongkong-2",
                "cpu_core_count": 4,
                "family": "S5",
                "gpu_core_count": 0,
                "instance_charge_type": "SPOTPAID",
                "instance_type": "S5.LARGE8",
                "memory_size": 8,
                "status": "SELL"
              }
            ],
            "memory_size": 8,
            "result_output_file": null
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.cvm",
      "mode": "managed",
      "type": "tencentcloud_instance",
      "name": "ubuntu",
      "provider": "module.cvm.provider[\"registry.terraform.io/tencentcloudstack/tencentcloud\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "allocate_public_ip": true,
            "availability_zone": "ap-hongkong-2",
            "bandwidth_package_id": null,
            "cam_role_name": "",
            "cdh_host_id": null,
            "cdh_instance_type": null,
            "cpu": 4,
            "create_time": "2024-12-07T00:29:25Z",
            "data_disks": [],
            "dedicated_cluster_id": "",
            "disable_api_termination": false,
            "disable_automation_service": false,
            "disable_monitor_service": false,
            "disable_security_service": false,
            "expired_time": "",
            "force_delete": false,
            "hostname": "tf-cvm-0",
            "id": "ins-7crbnz2g",
            "image_id": "img-487zeit5",
            "instance_charge_type": "SPOTPAID",
            "instance_charge_type_prepaid_period": null,
            "instance_charge_type_prepaid_renew_flag": "",
            "instance_count": null,
            "instance_name": "tf-cvm-0",
            "instance_status": "RUNNING",
            "instance_type": "S5.LARGE8",
            "internet_charge_type": "TRAFFIC_POSTPAID_BY_HOUR",
            "internet_max_bandwidth_out": 100,
            "keep_image_login": null,
            "key_ids": [],
            "key_name": "",
            "memory": 8,
            "orderly_security_groups": [
              "sg-nh79fhzv"
            ],
            "os_name": "Ubuntu Server 22.04 LTS 64bit",
            "password": "qwe123ewq",
            "placement_group_id": null,
            "private_ip": "10.96.1.11",
            "project_id": 0,
            "public_ip": "43.135.40.99",
            "running_flag": true,
            "security_groups": [
              "sg-nh79fhzv"
            ],
            "spot_instance_type": null,
            "spot_max_price": null,
            "stopped_mode": null,
            "subnet_id": "subnet-fk50haw9",
            "system_disk_id": "disk-n2rwq1j6",
            "system_disk_resize_online": null,
            "system_disk_size": 100,
            "system_disk_type": "CLOUD_SSD",
            "tags": null,
            "timeouts": null,
            "user_data": null,
            "user_data_raw": null,
            "uuid": "7b1c4ba3-7176-4e56-b1a3-b2f749a96c20",
            "vpc_id": "vpc-494cddo8"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "password"
              }
            ]
          ],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo5MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.cvm.data.tencentcloud_images.default",
            "module.cvm.data.tencentcloud_instance_types.default",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "module": "module.cvm1",
      "mode": "data",
      "type": "tencentcloud_availability_zones_by_product",
      "name": "default",
      "provider": "module.cvm1.provider[\"registry.terraform.io/tencentcloudstack/tencentcloud\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "1851109860",
            "include_unavailable": null,
            "name": null,
            "product": "cvm",
            "result_output_file": null,
            "zones": [
              {
                "description": "Hong Kong Zone 2",
                "id": "300002",
                "name": "ap-hongkong-2",
                "state": "AVAILABLE"
              },
              {
                "description": "Hong Kong Zone 3",
                "id": "300003",
                "name": "ap-hongkong-3",
                "state": "AVAILABLE"
              }
            ]
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.cvm1",
      "mode": "data",
      "type": "tencentcloud_images",
      "name": "default",
      "provider": "module.cvm1.provider[\"registry.terraform.io/tencentcloudstack/tencentcloud\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "3943428822",
            "image_id": null,
            "image_name_regex": null,
            "image_type": [
              "PUBLIC_IMAGE"
            ],
            "images": [
              {
                "architecture": "x86_64",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 22.04 LTS 64bit",
                "image_id": "img-487zeit5",
                "image_name": "Ubuntu Server 22.04 LTS 64bit",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 22.04 LTS 64bit",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "x86_64",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 24.04 LTS 64bit",
                "image_id": "img-mmytdhbn",
                "image_name": "Ubuntu Server 24.04 LTS 64bit",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 24.04 LTS 64bit",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "x86_64",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 22.04 LTS 64bit GRID16.2",
                "image_id": "img-fipweiwz",
                "image_name": "Ubuntu Server 22.04 LTS 64bit GRID16.2",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 22.04 LTS 64bit GRID16.2",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "x86_64",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 20.04 LTS 64bit",
                "image_id": "img-22trbn9x",
                "image_name": "Ubuntu Server 20.04 LTS 64bit",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 20.04 LTS 64bit",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "x86_64",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 20.04 LTS 64bit GRID16.2",
                "image_id": "img-rx55p5nv",
                "image_name": "Ubuntu Server 20.04 LTS 64bit GRID16.2",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 20.04 LTS 64bit GRID16.2",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "x86_64",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 20.04 LTS 64bit GRID11.1",
                "image_id": "img-j10l2cnz",
                "image_name": "Ubuntu Server 20.04 LTS 64bit GRID11.1",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 20.04 LTS 64bit GRID11.1",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "arm",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu 20.04(arm64)",
                "image_id": "img-2eokmhf5",
                "image_name": "Ubuntu 20.04(arm64)",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu 20.04(arm64)",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "x86_64",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 18.04 LTS 64bit",
                "image_id": "img-pi0ii46r",
                "image_name": "Ubuntu Server 18.04 LTS 64bit",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 18.04 LTS 64bit",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "arm",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu 18.04(arm64)",
                "image_id": "img-9eh8c1p1",
                "image_name": "Ubuntu 18.04(arm64)",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu 18.04(arm64)",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "x86_64",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 16.04 LTS 64bit",
                "image_id": "img-pyqx34y1",
                "image_name": "Ubuntu Server 16.04 LTS 64bit",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 16.04 LTS 64bit",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "i386",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 16.04 LTS 32bit",
                "image_id": "img-8u6dn6p1",
                "image_name": "Ubuntu Server 16.04 LTS 32bit",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 16.04 LTS 32bit",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "x86_64",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 14.04 LTS 64bit",
                "image_id": "img-3wnd9xpl",
                "image_name": "Ubuntu Server 14.04 LTS 64bit",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 14.04 LTS 64bit",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "i386",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 14.04 LTS 32bit",
                "image_id": "img-qpxvpujt",
                "image_name": "Ubuntu Server 14.04 LTS 32bit",
                "image_size": 50,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 14.04 LTS 32bit",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": false,
                "sync_percent": 0
              },
              {
                "architecture": "x86_64",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 22.04 LTS 64bit UEFI版",
                "image_id": "img-7rotv4ux",
                "image_name": "Ubuntu Server 22.04 LTS 64bit UEFI版",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 22.04 LTS 64bit UEFI版",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              }
            ],
            "instance_type": null,
            "os_name": "ubuntu",
            "result_output_file": null
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.cvm1",
      "mode": "data",
      "type": "tencentcloud_instance_types",
      "name": "default",
      "provider": "module.cvm1.provider[\"registry.terraform.io/tencentcloudstack/tencentcloud\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "availability_zone": null,
            "cpu_core_count": 4,
            "exclude_sold_out": false,
            "filter": [
              {
                "name": "instance-family",
                "values": [
                  "S5"
                ]
              },
              {
                "name": "zone",
                "values": [
                  "ap-hongkong-2"
                ]
              }
            ],
            "gpu_core_count": null,
            "id": "1950780053",
            "instance_types": [
              {
                "availability_zone": "ap-hongkong-2",
                "cpu_core_count": 4,
                "family": "S5",
                "gpu_core_count": 0,
                "instance_charge_type": "PREPAID",
                "instance_type": "S5.LARGE8",
                "memory_size": 8,
                "status": "SELL"
              },
              {
                "availability_zone": "ap-hongkong-2",
                "cpu_core_count": 4,
                "family": "S5",
                "gpu_core_count": 0,
                "instance_charge_type": "POSTPAID_BY_HOUR",
                "instance_type": "S5.LARGE8",
                "memory_size": 8,
                "status": "SELL"
              },
              {
                "availability_zone": "ap-hongkong-2",
                "cpu_core_count": 4,
                "family": "S5",
                "gpu_core_count": 0,
                "instance_charge_type": "SPOTPAID",
                "instance_type": "S5.LARGE8",
                "memory_size": 8,
                "status": "SELL"
              }
            ],
            "memory_size": 8,
            "result_output_file": null
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.cvm1",
      "mode": "managed",
      "type": "tencentcloud_instance",
      "name": "ubuntu",
      "provider": "module.cvm1.provider[\"registry.terraform.io/tencentcloudstack/tencentcloud\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "allocate_public_ip": true,
            "availability_zone": "ap-hongkong-2",
            "bandwidth_package_id": null,
            "cam_role_name": "",
            "cdh_host_id": null,
            "cdh_instance_type": null,
            "cpu": 4,
            "create_time": "2024-12-07T00:29:29Z",
            "data_disks": [],
            "dedicated_cluster_id": "",
            "disable_api_termination": false,
            "disable_automation_service": false,
            "disable_monitor_service": false,
            "disable_security_service": false,
            "expired_time": "",
            "force_delete": false,
            "hostname": "tf-cvm-0",
            "id": "ins-oceswlws",
            "image_id": "img-487zeit5",
            "instance_charge_type": "SPOTPAID",
            "instance_charge_type_prepaid_period": null,
            "instance_charge_type_prepaid_renew_flag": "",
            "instance_count": null,
            "instance_name": "tf-cvm-0",
            "instance_status": "RUNNING",
            "instance_type": "S5.LARGE8",
            "internet_charge_type": "TRAFFIC_POSTPAID_BY_HOUR",
            "internet_max_bandwidth_out": 100,
            "keep_image_login": null,
            "key_ids": [],
            "key_name": "",
            "memory": 8,
            "orderly_security_groups": [
              "sg-nh79fhzv"
            ],
            "os_name": "Ubuntu Server 22.04 LTS 64bit",
            "password": "qwe123ewq",
            "placement_group_id": null,
            "private_ip": "10.96.1.7",
            "project_id": 0,
            "public_ip": "43.154.143.154",
            "running_flag": true,
            "security_groups": [
              "sg-nh79fhzv"
            ],
            "spot_instance_type": null,
            "spot_max_price": null,
            "stopped_mode": null,
            "subnet_id": "subnet-fk50haw9",
            "system_disk_id": "disk-harp6e5i",
            "system_disk_resize_online": null,
            "system_disk_size": 100,
            "system_disk_type": "CLOUD_SSD",
            "tags": null,
            "timeouts": null,
            "user_data": null,
            "user_data_raw": null,
            "uuid": "724f8b2b-4ef1-46da-b6ed-b70b0daf086d",
            "vpc_id": "vpc-494cddo8"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "password"
              }
            ]
          ],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo5MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.cvm1.data.tencentcloud_images.default",
            "module.cvm1.data.tencentcloud_instance_types.default",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "module": "module.cvm2",
      "mode": "data",
      "type": "tencentcloud_availability_zones_by_product",
      "name": "default",
      "provider": "module.cvm2.provider[\"registry.terraform.io/tencentcloudstack/tencentcloud\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "1851109860",
            "include_unavailable": null,
            "name": null,
            "product": "cvm",
            "result_output_file": null,
            "zones": [
              {
                "description": "Hong Kong Zone 2",
                "id": "300002",
                "name": "ap-hongkong-2",
                "state": "AVAILABLE"
              },
              {
                "description": "Hong Kong Zone 3",
                "id": "300003",
                "name": "ap-hongkong-3",
                "state": "AVAILABLE"
              }
            ]
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.cvm2",
      "mode": "data",
      "type": "tencentcloud_images",
      "name": "default",
      "provider": "module.cvm2.provider[\"registry.terraform.io/tencentcloudstack/tencentcloud\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "3943428822",
            "image_id": null,
            "image_name_regex": null,
            "image_type": [
              "PUBLIC_IMAGE"
            ],
            "images": [
              {
                "architecture": "x86_64",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 22.04 LTS 64bit",
                "image_id": "img-487zeit5",
                "image_name": "Ubuntu Server 22.04 LTS 64bit",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 22.04 LTS 64bit",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "x86_64",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 24.04 LTS 64bit",
                "image_id": "img-mmytdhbn",
                "image_name": "Ubuntu Server 24.04 LTS 64bit",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 24.04 LTS 64bit",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "x86_64",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 22.04 LTS 64bit GRID16.2",
                "image_id": "img-fipweiwz",
                "image_name": "Ubuntu Server 22.04 LTS 64bit GRID16.2",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 22.04 LTS 64bit GRID16.2",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "x86_64",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 20.04 LTS 64bit",
                "image_id": "img-22trbn9x",
                "image_name": "Ubuntu Server 20.04 LTS 64bit",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 20.04 LTS 64bit",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "x86_64",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 20.04 LTS 64bit GRID16.2",
                "image_id": "img-rx55p5nv",
                "image_name": "Ubuntu Server 20.04 LTS 64bit GRID16.2",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 20.04 LTS 64bit GRID16.2",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "x86_64",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 20.04 LTS 64bit GRID11.1",
                "image_id": "img-j10l2cnz",
                "image_name": "Ubuntu Server 20.04 LTS 64bit GRID11.1",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 20.04 LTS 64bit GRID11.1",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "arm",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu 20.04(arm64)",
                "image_id": "img-2eokmhf5",
                "image_name": "Ubuntu 20.04(arm64)",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu 20.04(arm64)",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "x86_64",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 18.04 LTS 64bit",
                "image_id": "img-pi0ii46r",
                "image_name": "Ubuntu Server 18.04 LTS 64bit",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 18.04 LTS 64bit",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "arm",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu 18.04(arm64)",
                "image_id": "img-9eh8c1p1",
                "image_name": "Ubuntu 18.04(arm64)",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu 18.04(arm64)",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "x86_64",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 16.04 LTS 64bit",
                "image_id": "img-pyqx34y1",
                "image_name": "Ubuntu Server 16.04 LTS 64bit",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 16.04 LTS 64bit",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "i386",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 16.04 LTS 32bit",
                "image_id": "img-8u6dn6p1",
                "image_name": "Ubuntu Server 16.04 LTS 32bit",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 16.04 LTS 32bit",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "x86_64",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 14.04 LTS 64bit",
                "image_id": "img-3wnd9xpl",
                "image_name": "Ubuntu Server 14.04 LTS 64bit",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 14.04 LTS 64bit",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              },
              {
                "architecture": "i386",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 14.04 LTS 32bit",
                "image_id": "img-qpxvpujt",
                "image_name": "Ubuntu Server 14.04 LTS 32bit",
                "image_size": 50,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 14.04 LTS 32bit",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": false,
                "sync_percent": 0
              },
              {
                "architecture": "x86_64",
                "created_time": "",
                "image_creator": "",
                "image_description": "Ubuntu Server 22.04 LTS 64bit UEFI版",
                "image_id": "img-7rotv4ux",
                "image_name": "Ubuntu Server 22.04 LTS 64bit UEFI版",
                "image_size": 20,
                "image_source": "OFFICIAL",
                "image_state": "NORMAL",
                "image_type": "PUBLIC_IMAGE",
                "os_name": "Ubuntu Server 22.04 LTS 64bit UEFI版",
                "platform": "Ubuntu",
                "snapshots": [],
                "support_cloud_init": true,
                "sync_percent": 0
              }
            ],
            "instance_type": null,
            "os_name": "ubuntu",
            "result_output_file": null
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.cvm2",
      "mode": "data",
      "type": "tencentcloud_instance_types",
      "name": "default",
      "provider": "module.cvm2.provider[\"registry.terraform.io/tencentcloudstack/tencentcloud\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "availability_zone": null,
            "cpu_core_count": 4,
            "exclude_sold_out": false,
            "filter": [
              {
                "name": "instance-family",
                "values": [
                  "S5"
                ]
              },
              {
                "name": "zone",
                "values": [
                  "ap-hongkong-2"
                ]
              }
            ],
            "gpu_core_count": null,
            "id": "1950780053",
            "instance_types": [
              {
                "availability_zone": "ap-hongkong-2",
                "cpu_core_count": 4,
                "family": "S5",
                "gpu_core_count": 0,
                "instance_charge_type": "PREPAID",
                "instance_type": "S5.LARGE8",
                "memory_size": 8,
                "status": "SELL"
              },
              {
                "availability_zone": "ap-hongkong-2",
                "cpu_core_count": 4,
                "family": "S5",
                "gpu_core_count": 0,
                "instance_charge_type": "POSTPAID_BY_HOUR",
                "instance_type": "S5.LARGE8",
                "memory_size": 8,
                "status": "SELL"
              },
              {
                "availability_zone": "ap-hongkong-2",
                "cpu_core_count": 4,
                "family": "S5",
                "gpu_core_count": 0,
                "instance_charge_type": "SPOTPAID",
                "instance_type": "S5.LARGE8",
                "memory_size": 8,
                "status": "SELL"
              }
            ],
            "memory_size": 8,
            "result_output_file": null
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.cvm2",
      "mode": "managed",
      "type": "tencentcloud_instance",
      "name": "ubuntu",
      "provider": "module.cvm2.provider[\"registry.terraform.io/tencentcloudstack/tencentcloud\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "allocate_public_ip": true,
            "availability_zone": "ap-hongkong-2",
            "bandwidth_package_id": null,
            "cam_role_name": "",
            "cdh_host_id": null,
            "cdh_instance_type": null,
            "cpu": 4,
            "create_time": "2024-12-07T00:29:30Z",
            "data_disks": [],
            "dedicated_cluster_id": "",
            "disable_api_termination": false,
            "disable_automation_service": false,
            "disable_monitor_service": false,
            "disable_security_service": false,
            "expired_time": "",
            "force_delete": false,
            "hostname": "tf-cvm-0",
            "id": "ins-l28pqlvu",
            "image_id": "img-487zeit5",
            "instance_charge_type": "SPOTPAID",
            "instance_charge_type_prepaid_period": null,
            "instance_charge_type_prepaid_renew_flag": "",
            "instance_count": null,
            "instance_name": "tf-cvm-0",
            "instance_status": "RUNNING",
            "instance_type": "S5.LARGE8",
            "internet_charge_type": "TRAFFIC_POSTPAID_BY_HOUR",
            "internet_max_bandwidth_out": 100,
            "keep_image_login": null,
            "key_ids": [],
            "key_name": "",
            "memory": 8,
            "orderly_security_groups": [
              "sg-nh79fhzv"
            ],
            "os_name": "Ubuntu Server 22.04 LTS 64bit",
            "password": "qwe123ewq",
            "placement_group_id": null,
            "private_ip": "10.96.1.12",
            "project_id": 0,
            "public_ip": "43.135.92.229",
            "running_flag": true,
            "security_groups": [
              "sg-nh79fhzv"
            ],
            "spot_instance_type": null,
            "spot_max_price": null,
            "stopped_mode": null,
            "subnet_id": "subnet-fk50haw9",
            "system_disk_id": "disk-lsd47ick",
            "system_disk_resize_online": null,
            "system_disk_size": 100,
            "system_disk_type": "CLOUD_SSD",
            "tags": null,
            "timeouts": null,
            "user_data": null,
            "user_data_raw": null,
            "uuid": "a2dce658-81c7-43de-a6c6-36332733de1d",
            "vpc_id": "vpc-494cddo8"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "password"
              }
            ]
          ],
          "private": "eyJlMmJmYjczMC1lY2FhLTExZTYtOGY4OC0zNDM2M2JjN2M0YzAiOnsiY3JlYXRlIjo5MDAwMDAwMDAwMDB9fQ==",
          "dependencies": [
            "module.cvm2.data.tencentcloud_images.default",
            "module.cvm2.data.tencentcloud_instance_types.default",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "module": "module.k3s.module.k3s",
      "mode": "data",
      "type": "http",
      "name": "k3s_installer",
      "provider": "provider[\"registry.terraform.io/hashicorp/http\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "body": "#!/bin/sh\nset -e\nset -o noglob\n\n# Usage:\n#   curl ... | ENV_VAR=... sh -\n#       or\n#   ENV_VAR=... ./install.sh\n#\n# Example:\n#   Installing a server without traefik:\n#     curl ... | INSTALL_K3S_EXEC=\"--disable=traefik\" sh -\n#   Installing an agent to point at a server:\n#     curl ... | K3S_TOKEN=xxx K3S_URL=https://server-url:6443 sh -\n#\n# Environment variables:\n#   - K3S_*\n#     Environment variables which begin with K3S_ will be preserved for the\n#     systemd service to use. Setting K3S_URL without explicitly setting\n#     a systemd exec command will default the command to \"agent\", and we\n#     enforce that K3S_TOKEN is also set.\n#\n#   - INSTALL_K3S_SKIP_DOWNLOAD\n#     If set to true will not download k3s hash or binary.\n#\n#   - INSTALL_K3S_FORCE_RESTART\n#     If set to true will always restart the K3s service\n#\n#   - INSTALL_K3S_SYMLINK\n#     If set to 'skip' will not create symlinks, 'force' will overwrite,\n#     default will symlink if command does not exist in path.\n#\n#   - INSTALL_K3S_SKIP_ENABLE\n#     If set to true will not enable or start k3s service.\n#\n#   - INSTALL_K3S_SKIP_START\n#     If set to true will not start k3s service.\n#\n#   - INSTALL_K3S_VERSION\n#     Version of k3s to download from github. Will attempt to download from the\n#     stable channel if not specified.\n#\n#   - INSTALL_K3S_COMMIT\n#     Commit of k3s to download from temporary cloud storage.\n#     * (for developer \u0026 QA use)\n#\n#   - INSTALL_K3S_PR\n#     PR build of k3s to download from Github Artifacts.\n#     * (for developer \u0026 QA use)\n#\n#   - INSTALL_K3S_BIN_DIR\n#     Directory to install k3s binary, links, and uninstall script to, or use\n#     /usr/local/bin as the default\n#\n#   - INSTALL_K3S_BIN_DIR_READ_ONLY\n#     If set to true will not write files to INSTALL_K3S_BIN_DIR, forces\n#     setting INSTALL_K3S_SKIP_DOWNLOAD=true\n#\n#   - INSTALL_K3S_SYSTEMD_DIR\n#     Directory to install systemd service and environment files to, or use\n#     /etc/systemd/system as the default\n#\n#   - INSTALL_K3S_EXEC or script arguments\n#     Command with flags to use for launching k3s in the systemd service, if\n#     the command is not specified will default to \"agent\" if K3S_URL is set\n#     or \"server\" if not. The final systemd command resolves to a combination\n#     of EXEC and script args ($@).\n#\n#     The following commands result in the same behavior:\n#       curl ... | INSTALL_K3S_EXEC=\"--disable=traefik\" sh -s -\n#       curl ... | INSTALL_K3S_EXEC=\"server --disable=traefik\" sh -s -\n#       curl ... | INSTALL_K3S_EXEC=\"server\" sh -s - --disable=traefik\n#       curl ... | sh -s - server --disable=traefik\n#       curl ... | sh -s - --disable=traefik\n#\n#   - INSTALL_K3S_NAME\n#     Name of systemd service to create, will default from the k3s exec command\n#     if not specified. If specified the name will be prefixed with 'k3s-'.\n#\n#   - INSTALL_K3S_TYPE\n#     Type of systemd service to create, will default from the k3s exec command\n#     if not specified.\n#\n#   - INSTALL_K3S_SELINUX_WARN\n#     If set to true will continue if k3s-selinux policy is not found.\n#\n#   - INSTALL_K3S_SKIP_SELINUX_RPM\n#     If set to true will skip automatic installation of the k3s RPM.\n#\n#   - INSTALL_K3S_CHANNEL_URL\n#     Channel URL for fetching k3s download URL.\n#     Defaults to 'https://update.k3s.io/v1-release/channels'.\n#\n#   - INSTALL_K3S_CHANNEL\n#     Channel to use for fetching k3s download URL.\n#     Defaults to 'stable'.\n\nGITHUB_URL=https://github.com/k3s-io/k3s/releases\nGITHUB_PR_URL=\"\"\nSTORAGE_URL=https://k3s-ci-builds.s3.amazonaws.com\nDOWNLOADER=\n\n# --- helper functions for logs ---\ninfo()\n{\n    echo '[INFO] ' \"$@\"\n}\nwarn()\n{\n    echo '[WARN] ' \"$@\" \u003e\u00262\n}\nfatal()\n{\n    echo '[ERROR] ' \"$@\" \u003e\u00262\n    exit 1\n}\n\n# --- fatal if no systemd or openrc ---\nverify_system() {\n    if [ -x /sbin/openrc-run ]; then\n        HAS_OPENRC=true\n        return\n    fi\n    if [ -x /bin/systemctl ] || type systemctl \u003e /dev/null 2\u003e\u00261; then\n        HAS_SYSTEMD=true\n        return\n    fi\n    fatal 'Can not find systemd or openrc to use as a process supervisor for k3s'\n}\n\n# --- add quotes to command arguments ---\nquote() {\n    for arg in \"$@\"; do\n        printf '%s\\n' \"$arg\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/'/\"\n    done\n}\n\n# --- add indentation and trailing slash to quoted args ---\nquote_indent() {\n    printf ' \\\\\\n'\n    for arg in \"$@\"; do\n        printf '\\t%s \\\\\\n' \"$(quote \"$arg\")\"\n    done\n}\n\n# --- escape most punctuation characters, except quotes, forward slash, and space ---\nescape() {\n    printf '%s' \"$@\" | sed -e 's/\\([][!#$%\u0026()*;\u003c=\u003e?\\_`{|}]\\)/\\\\\\1/g;'\n}\n\n# --- escape double quotes ---\nescape_dq() {\n    printf '%s' \"$@\" | sed -e 's/\"/\\\\\"/g'\n}\n\n# --- ensures $K3S_URL is empty or begins with https://, exiting fatally otherwise ---\nverify_k3s_url() {\n    case \"${K3S_URL}\" in\n        \"\")\n            ;;\n        https://*)\n            ;;\n        *)\n            fatal \"Only https:// URLs are supported for K3S_URL (have ${K3S_URL})\"\n            ;;\n    esac\n}\n\n# --- define needed environment variables ---\nsetup_env() {\n    # --- use command args if passed or create default ---\n    case \"$1\" in\n        # --- if we only have flags discover if command should be server or agent ---\n        (-*|\"\")\n            if [ -z \"${K3S_URL}\" ]; then\n                CMD_K3S=server\n            else\n                if [ -z \"${K3S_TOKEN}\" ] \u0026\u0026 [ -z \"${K3S_TOKEN_FILE}\" ]; then\n                    fatal \"Defaulted k3s exec command to 'agent' because K3S_URL is defined, but K3S_TOKEN or K3S_TOKEN_FILE is not defined.\"\n                fi\n                CMD_K3S=agent\n            fi\n        ;;\n        # --- command is provided ---\n        (*)\n            CMD_K3S=$1\n            shift\n        ;;\n    esac\n\n    verify_k3s_url\n\n    CMD_K3S_EXEC=\"${CMD_K3S}$(quote_indent \"$@\")\"\n\n    # --- use systemd name if defined or create default ---\n    if [ -n \"${INSTALL_K3S_NAME}\" ]; then\n        SYSTEM_NAME=k3s-${INSTALL_K3S_NAME}\n    else\n        if [ \"${CMD_K3S}\" = server ]; then\n            SYSTEM_NAME=k3s\n        else\n            SYSTEM_NAME=k3s-${CMD_K3S}\n        fi\n    fi\n\n    # --- check for invalid characters in system name ---\n    valid_chars=$(printf '%s' \"${SYSTEM_NAME}\" | sed -e 's/[][!#$%\u0026()*;\u003c=\u003e?\\_`{|}/[:space:]]/^/g;' )\n    if [ \"${SYSTEM_NAME}\" != \"${valid_chars}\"  ]; then\n        invalid_chars=$(printf '%s' \"${valid_chars}\" | sed -e 's/[^^]/ /g')\n        fatal \"Invalid characters for system name:\n            ${SYSTEM_NAME}\n            ${invalid_chars}\"\n    fi\n\n    # --- use sudo if we are not already root ---\n    SUDO=sudo\n    if [ $(id -u) -eq 0 ]; then\n        SUDO=\n    fi\n\n    # --- use systemd type if defined or create default ---\n    if [ -n \"${INSTALL_K3S_TYPE}\" ]; then\n        SYSTEMD_TYPE=${INSTALL_K3S_TYPE}\n    else\n        SYSTEMD_TYPE=notify\n    fi\n\n    # --- use binary install directory if defined or create default ---\n    if [ -n \"${INSTALL_K3S_BIN_DIR}\" ]; then\n        BIN_DIR=${INSTALL_K3S_BIN_DIR}\n    else\n        # --- use /usr/local/bin if root can write to it, otherwise use /opt/bin if it exists\n        BIN_DIR=/usr/local/bin\n        if ! $SUDO sh -c \"touch ${BIN_DIR}/k3s-ro-test \u0026\u0026 rm -rf ${BIN_DIR}/k3s-ro-test\"; then\n            if [ -d /opt/bin ]; then\n                BIN_DIR=/opt/bin\n            fi\n        fi\n    fi\n\n    # --- use systemd directory if defined or create default ---\n    if [ -n \"${INSTALL_K3S_SYSTEMD_DIR}\" ]; then\n        SYSTEMD_DIR=\"${INSTALL_K3S_SYSTEMD_DIR}\"\n    else\n        SYSTEMD_DIR=/etc/systemd/system\n    fi\n\n    # --- set related files from system name ---\n    SERVICE_K3S=${SYSTEM_NAME}.service\n    UNINSTALL_K3S_SH=${UNINSTALL_K3S_SH:-${BIN_DIR}/${SYSTEM_NAME}-uninstall.sh}\n    KILLALL_K3S_SH=${KILLALL_K3S_SH:-${BIN_DIR}/k3s-killall.sh}\n\n    # --- use service or environment location depending on systemd/openrc ---\n    if [ \"${HAS_SYSTEMD}\" = true ]; then\n        FILE_K3S_SERVICE=${SYSTEMD_DIR}/${SERVICE_K3S}\n        FILE_K3S_ENV=${SYSTEMD_DIR}/${SERVICE_K3S}.env\n    elif [ \"${HAS_OPENRC}\" = true ]; then\n        $SUDO mkdir -p /etc/rancher/k3s\n        FILE_K3S_SERVICE=/etc/init.d/${SYSTEM_NAME}\n        FILE_K3S_ENV=/etc/rancher/k3s/${SYSTEM_NAME}.env\n    fi\n\n    # --- get hash of config \u0026 exec for currently installed k3s ---\n    PRE_INSTALL_HASHES=$(get_installed_hashes)\n\n    # --- if bin directory is read only skip download ---\n    if [ \"${INSTALL_K3S_BIN_DIR_READ_ONLY}\" = true ]; then\n        INSTALL_K3S_SKIP_DOWNLOAD=true\n    fi\n\n    # --- setup channel values\n    INSTALL_K3S_CHANNEL_URL=${INSTALL_K3S_CHANNEL_URL:-'https://update.k3s.io/v1-release/channels'}\n    INSTALL_K3S_CHANNEL=${INSTALL_K3S_CHANNEL:-'stable'}\n}\n\n# --- check if skip download environment variable set ---\ncan_skip_download_binary() {\n    if [ \"${INSTALL_K3S_SKIP_DOWNLOAD}\" != true ] \u0026\u0026 [ \"${INSTALL_K3S_SKIP_DOWNLOAD}\" != binary ]; then\n        return 1\n    fi\n}\n\ncan_skip_download_selinux() {                                                        \n    if [ \"${INSTALL_K3S_SKIP_DOWNLOAD}\" != true ] \u0026\u0026 [ \"${INSTALL_K3S_SKIP_DOWNLOAD}\" != selinux ]; then \n        return 1                                                                     \n    fi                                                                               \n}  \n\n# --- verify an executable k3s binary is installed ---\nverify_k3s_is_executable() {\n    if [ ! -x ${BIN_DIR}/k3s ]; then\n        fatal \"Executable k3s binary not found at ${BIN_DIR}/k3s\"\n    fi\n}\n\n# --- set arch and suffix, fatal if architecture not supported ---\nsetup_verify_arch() {\n    if [ -z \"$ARCH\" ]; then\n        ARCH=$(uname -m)\n    fi\n    case $ARCH in\n        amd64)\n            ARCH=amd64\n            SUFFIX=\n            ;;\n        x86_64)\n            ARCH=amd64\n            SUFFIX=\n            ;;\n        arm64)\n            ARCH=arm64\n            SUFFIX=-${ARCH}\n            ;;\n        s390x)\n            ARCH=s390x\n            SUFFIX=-${ARCH}\n            ;;\n        aarch64)\n            ARCH=arm64\n            SUFFIX=-${ARCH}\n            ;;\n        arm*)\n            ARCH=arm\n            SUFFIX=-${ARCH}hf\n            ;;\n        *)\n            fatal \"Unsupported architecture $ARCH\"\n    esac\n}\n\n# --- verify existence of network downloader executable ---\nverify_downloader() {\n    # Return failure if it doesn't exist or is no executable\n    [ -x \"$(command -v $1)\" ] || return 1\n\n    # Set verified executable as our downloader program and return success\n    DOWNLOADER=$1\n    return 0\n}\n\n# --- create temporary directory and cleanup when done ---\nsetup_tmp() {\n    TMP_DIR=$(mktemp -d -t k3s-install.XXXXXXXXXX)\n    TMP_HASH=${TMP_DIR}/k3s.hash\n    TMP_ZIP=${TMP_DIR}/k3s.zip\n    TMP_BIN=${TMP_DIR}/k3s.bin\n    cleanup() {\n        code=$?\n        set +e\n        trap - EXIT\n        rm -rf ${TMP_DIR}\n        exit $code\n    }\n    trap cleanup INT EXIT\n}\n\n# --- use desired k3s version if defined or find version from channel ---\nget_release_version() {\n    if [ -n \"${INSTALL_K3S_PR}\" ]; then\n        VERSION_K3S=\"PR ${INSTALL_K3S_PR}\"\n        get_pr_artifact_url\n    elif [ -n \"${INSTALL_K3S_COMMIT}\" ]; then\n        VERSION_K3S=\"commit ${INSTALL_K3S_COMMIT}\"\n    elif [ -n \"${INSTALL_K3S_VERSION}\" ]; then\n        VERSION_K3S=${INSTALL_K3S_VERSION}\n    else\n        info \"Finding release for channel ${INSTALL_K3S_CHANNEL}\"\n        version_url=\"${INSTALL_K3S_CHANNEL_URL}/${INSTALL_K3S_CHANNEL}\"\n        case $DOWNLOADER in\n            curl)\n                VERSION_K3S=$(curl -w '%{url_effective}' -L -s -S ${version_url} -o /dev/null | sed -e 's|.*/||')\n                ;;\n            wget)\n                VERSION_K3S=$(wget -SqO /dev/null ${version_url} 2\u003e\u00261 | grep -i Location | sed -e 's|.*/||')\n                ;;\n            *)\n                fatal \"Incorrect downloader executable '$DOWNLOADER'\"\n                ;;\n        esac\n    fi\n    info \"Using ${VERSION_K3S} as release\"\n}\n\n# --- get k3s-selinux version ---\nget_k3s_selinux_version() {\n    available_version=\"k3s-selinux-1.2-2.${rpm_target}.noarch.rpm\"\n    info \"Finding available k3s-selinux versions\"\n    \n    # run verify_downloader in case it binary installation was skipped\n    verify_downloader curl || verify_downloader wget || fatal 'Can not find curl or wget for downloading files'\n\n    case $DOWNLOADER in\n        curl)\n            DOWNLOADER_OPTS=\"-s\"\n            ;;\n        wget)\n            DOWNLOADER_OPTS=\"-q -O -\"\n            ;;\n        *)\n            fatal \"Incorrect downloader executable '$DOWNLOADER'\"\n            ;;\n    esac\n    for i in {1..3}; do\n        set +e\n        if [ \"${rpm_channel}\" = \"testing\" ]; then\n            version=$(timeout 5 ${DOWNLOADER} ${DOWNLOADER_OPTS} https://api.github.com/repos/k3s-io/k3s-selinux/releases |  grep browser_download_url | awk '{ print $2 }' | grep -oE \"[^\\/]+${rpm_target}\\.noarch\\.rpm\" | head -n 1)\n        else\n            version=$(timeout 5 ${DOWNLOADER} ${DOWNLOADER_OPTS} https://api.github.com/repos/k3s-io/k3s-selinux/releases/latest |  grep browser_download_url | awk '{ print $2 }' | grep -oE \"[^\\/]+${rpm_target}\\.noarch\\.rpm\")\n        fi\n        set -e\n        if [ \"${version}\" != \"\" ]; then\n            break\n        fi\n        sleep 1\n    done\n    if [ \"${version}\" == \"\" ]; then\n        warn \"Failed to get available versions of k3s-selinux..defaulting to ${available_version}\"\n        return\n    fi\n    available_version=${version}\n}\n\n# --- download from github url ---\ndownload() {\n    [ $# -eq 2 ] || fatal 'download needs exactly 2 arguments'\n    set +e\n    case $DOWNLOADER in\n        curl)\n            curl -o $1 -sfL $2\n            ;;\n        wget)\n            wget -qO $1 $2\n            ;;\n        *)\n            fatal \"Incorrect executable '$DOWNLOADER'\"\n            ;;\n    esac\n\n    # Abort if download command failed\n    [ $? -eq 0 ] || fatal 'Download failed'\n    set -e\n}\n\n# --- download hash from github url ---\ndownload_hash() {\n    if [ -n \"${INSTALL_K3S_PR}\" ]; then\n        info \"Downloading hash ${GITHUB_PR_URL}\"\n        curl -s -o ${TMP_ZIP} -H \"Authorization: Bearer $GITHUB_TOKEN\" -L ${GITHUB_PR_URL}\n        unzip -p ${TMP_ZIP} k3s.sha256sum \u003e ${TMP_HASH}\n    else\n        if [ -n \"${INSTALL_K3S_COMMIT}\" ]; then\n            HASH_URL=${STORAGE_URL}/k3s${SUFFIX}-${INSTALL_K3S_COMMIT}.sha256sum\n        else\n            HASH_URL=${GITHUB_URL}/download/${VERSION_K3S}/sha256sum-${ARCH}.txt\n        fi\n        info \"Downloading hash ${HASH_URL}\"\n        download ${TMP_HASH} ${HASH_URL}\n    fi\n    HASH_EXPECTED=$(grep \" k3s${SUFFIX}$\" ${TMP_HASH})\n    HASH_EXPECTED=${HASH_EXPECTED%%[[:blank:]]*}\n}\n\n# --- check hash against installed version ---\ninstalled_hash_matches() {\n    if [ -x ${BIN_DIR}/k3s ]; then\n        HASH_INSTALLED=$(sha256sum ${BIN_DIR}/k3s)\n        HASH_INSTALLED=${HASH_INSTALLED%%[[:blank:]]*}\n        if [ \"${HASH_EXPECTED}\" = \"${HASH_INSTALLED}\" ]; then\n            return\n        fi\n    fi\n    return 1\n}\n\n# Use the GitHub API to identify the artifact associated with a given PR\nget_pr_artifact_url() {\n    github_api_url=https://api.github.com/repos/k3s-io/k3s\n\n    # Check if jq is installed\n    if ! [ -x \"$(command -v jq)\" ]; then\n        fatal \"Installing PR builds requires jq\"\n    fi\n\n    # Check if unzip is installed\n    if ! [ -x \"$(command -v unzip)\" ]; then\n        fatal \"Installing PR builds requires unzip\"\n    fi\n\n    if [ -z \"${GITHUB_TOKEN}\" ]; then\n        fatal \"Installing PR builds requires GITHUB_TOKEN with k3s-io/k3s repo permissions\"\n    fi\n\n    # GET request to the GitHub API to retrieve the latest commit SHA from the pull request\n    set +e\n    commit_id=$(curl -f -s -H \"Authorization: Bearer ${GITHUB_TOKEN}\" \"${github_api_url}/pulls/${INSTALL_K3S_PR}\" | jq -r '.head.sha')\n    set -e\n\n    if [ -z \"${commit_id}\" ]; then\n        fatal \"Installing PR builds requires GITHUB_TOKEN with k3s-io/k3s repo permissions\"\n    fi\n    \n    # GET request to the GitHub API to retrieve the Build workflow associated with the commit\n    wf_raw=$(curl -s -H \"Authorization: Bearer ${GITHUB_TOKEN}\" \"${github_api_url}/commits/${commit_id}/check-runs\")\n    build_workflow=$(printf \"%s\" \"${wf_raw}\" | jq -r '.check_runs[] |  select(.name == \"build / Build\")')\n    \n    # Extract the Run ID from the build workflow and lookup artifacts associated with the run\n    run_id=$(echo \"${build_workflow}\" | jq -r ' .details_url' | awk -F'/' '{print $(NF-2)}' | sort -rn | head -1)\n\n    # Extract the artifact ID for the \"k3s\" artifact    \n    artifacts=$(curl -s -H \"Authorization: Bearer ${GITHUB_TOKEN}\" \"${github_api_url}/actions/runs/${run_id}/artifacts\")\n    artifacts_url=$(echo \"${artifacts}\" | jq -r '.artifacts[] | select(.name == \"k3s\") | .archive_download_url')\n    GITHUB_PR_URL=\"${artifacts_url}\"\n}\n\n# --- download binary from github url ---\ndownload_binary() {\n    if [ -n \"${INSTALL_K3S_PR}\" ]; then\n        # Since Binary and Hash are zipped together, check if TMP_ZIP already exists\n        if ! [ -f ${TMP_ZIP} ]; then\n            info \"Downloading K3s artifact ${GITHUB_PR_URL}\"\n            curl -s -f -o ${TMP_ZIP} -H \"Authorization: Bearer $GITHUB_TOKEN\" -L ${GITHUB_PR_URL}\n        fi\n        # extract k3s binary from zip\n        unzip -p ${TMP_ZIP} k3s \u003e ${TMP_BIN}\n        return\n    elif [ -n \"${INSTALL_K3S_COMMIT}\" ]; then\n        BIN_URL=${STORAGE_URL}/k3s${SUFFIX}-${INSTALL_K3S_COMMIT}\n    else\n        BIN_URL=${GITHUB_URL}/download/${VERSION_K3S}/k3s${SUFFIX}\n    fi\n    info \"Downloading binary ${BIN_URL}\"\n    download ${TMP_BIN} ${BIN_URL}\n}\n\n# --- verify downloaded binary hash ---\nverify_binary() {\n    info \"Verifying binary download\"\n    HASH_BIN=$(sha256sum ${TMP_BIN})\n    HASH_BIN=${HASH_BIN%%[[:blank:]]*}\n    if [ \"${HASH_EXPECTED}\" != \"${HASH_BIN}\" ]; then\n        fatal \"Download sha256 does not match ${HASH_EXPECTED}, got ${HASH_BIN}\"\n    fi\n}\n\n# --- setup permissions and move binary to system directory ---\nsetup_binary() {\n    chmod 755 ${TMP_BIN}\n    info \"Installing k3s to ${BIN_DIR}/k3s\"\n    $SUDO chown root:root ${TMP_BIN}\n    $SUDO mv -f ${TMP_BIN} ${BIN_DIR}/k3s\n}\n\n# --- setup selinux policy ---\nsetup_selinux() {\n    case ${INSTALL_K3S_CHANNEL} in \n        *testing)\n            rpm_channel=testing\n            ;;\n        *latest)\n            rpm_channel=latest\n            ;;\n        *)\n            rpm_channel=stable\n            ;;\n    esac\n\n    rpm_site=\"rpm.rancher.io\"\n    if [ \"${rpm_channel}\" = \"testing\" ]; then\n        rpm_site=\"rpm-testing.rancher.io\"\n    fi\n\n    [ -r /etc/os-release ] \u0026\u0026 . /etc/os-release\n    if [ `expr \"${ID_LIKE}\" : \".*suse.*\"` != 0 ]; then\n        rpm_target=sle\n        rpm_site_infix=microos\n        package_installer=zypper\n        if [ \"${ID_LIKE:-}\" = suse ] \u0026\u0026 ( [ \"${VARIANT_ID:-}\" = sle-micro ] || [ \"${ID:-}\" = sle-micro ] ); then\n            rpm_target=sle\n            rpm_site_infix=slemicro\n            package_installer=zypper\n        fi\n    elif [ \"${ID_LIKE:-}\" = coreos ] || [ \"${VARIANT_ID:-}\" = coreos ] || [ \"${VARIANT_ID:-}\" = \"iot\" ]; then\n        rpm_target=coreos\n        rpm_site_infix=coreos\n        package_installer=rpm-ostree\n    elif [ \"${VERSION_ID%%.*}\" = \"7\" ] || ( [ \"${ID:-}\" = amzn ] \u0026\u0026 [ \"${VERSION_ID%%.*}\" = \"2\" ] ); then\n        rpm_target=el7\n        rpm_site_infix=centos/7\n        package_installer=yum\n    elif [ \"${VERSION_ID%%.*}\" = \"8\" ] || [ \"${VERSION_ID%%.*}\" = \"V10\" ] || [ \"${VERSION_ID%%.*}\" -gt \"36\" ]; then\n        rpm_target=el8\n        rpm_site_infix=centos/8\n        package_installer=yum\n    else\n        rpm_target=el9\n        rpm_site_infix=centos/9\n        package_installer=yum\n    fi\n\n    if [ \"${package_installer}\" = \"rpm-ostree\" ] \u0026\u0026 [ -x /bin/yum ]; then\n        package_installer=yum\n    fi\n\n    if [ \"${package_installer}\" = \"yum\" ] \u0026\u0026 [ -x /usr/bin/dnf ]; then\n        package_installer=dnf\n    fi\n\n    policy_hint=\"please install:\n    ${package_installer} install -y container-selinux\n    ${package_installer} install -y https://${rpm_site}/k3s/${rpm_channel}/common/${rpm_site_infix}/noarch/${available_version}\n\"\n\n    if [ \"$INSTALL_K3S_SKIP_SELINUX_RPM\" = true ] || can_skip_download_selinux || [ ! -d /usr/share/selinux ]; then\n        info \"Skipping installation of SELinux RPM\"\n        return\n    fi\n    \n    get_k3s_selinux_version\n    install_selinux_rpm ${rpm_site} ${rpm_channel} ${rpm_target} ${rpm_site_infix}\n\n    policy_error=fatal\n    if [ \"$INSTALL_K3S_SELINUX_WARN\" = true ] || [ \"${ID_LIKE:-}\" = coreos ] || \n       [ \"${VARIANT_ID:-}\" = coreos ] || [ \"${VARIANT_ID:-}\" = iot ]; then\n        policy_error=warn\n    fi\n\n    if ! $SUDO chcon -u system_u -r object_r -t container_runtime_exec_t ${BIN_DIR}/k3s \u003e/dev/null 2\u003e\u00261; then\n        if $SUDO grep '^\\s*SELINUX=enforcing' /etc/selinux/config \u003e/dev/null 2\u003e\u00261; then\n            $policy_error \"Failed to apply container_runtime_exec_t to ${BIN_DIR}/k3s, ${policy_hint}\"\n        fi\n    elif [ ! -f /usr/share/selinux/packages/k3s.pp ]; then\n        if [ -x /usr/sbin/transactional-update ] || [ \"${ID_LIKE:-}\" = coreos ] || [ \"${VARIANT_ID:-}\" = coreos ] || [ \"${VARIANT_ID:-}\" = iot ]; then\n            warn \"Please reboot your machine to activate the changes and avoid data loss.\"\n        else\n            $policy_error \"Failed to find the k3s-selinux policy, ${policy_hint}\"\n        fi\n    fi\n}\n\ninstall_selinux_rpm() {\n    if [ -r /etc/redhat-release ] || [ -r /etc/centos-release ] || [ -r /etc/oracle-release ] || \n       [ -r /etc/fedora-release ] || [ -r /etc/system-release ] || [ \"${ID_LIKE%%[ ]*}\" = \"suse\" ]; then\n        repodir=/etc/yum.repos.d\n        if [ -d /etc/zypp/repos.d ]; then\n            repodir=/etc/zypp/repos.d\n        fi\n        set +o noglob\n        $SUDO rm -f ${repodir}/rancher-k3s-common*.repo\n        set -o noglob\n        if [ -r /etc/redhat-release ] \u0026\u0026 [ \"${3}\" = \"el7\" ]; then\n            $SUDO yum install -y yum-utils\n            $SUDO yum-config-manager --enable rhel-7-server-extras-rpms\n        fi\n        $SUDO tee ${repodir}/rancher-k3s-common.repo \u003e/dev/null \u003c\u003c EOF\n[rancher-k3s-common-${2}]\nname=Rancher K3s Common (${2})\nbaseurl=https://${1}/k3s/${2}/common/${4}/noarch\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=0\ngpgkey=https://${1}/public.key\nEOF\n        case ${3} in\n        sle)\n            rpm_installer=\"zypper --gpg-auto-import-keys\"\n            if [ \"${TRANSACTIONAL_UPDATE=false}\" != \"true\" ] \u0026\u0026 [ -x /usr/sbin/transactional-update ]; then\n                transactional_update_run=\"transactional-update --no-selfupdate -d run\"\n                rpm_installer=\"transactional-update --no-selfupdate -d run ${rpm_installer}\"\n                : \"${INSTALL_K3S_SKIP_START:=true}\"\n            fi\n            # create the /var/lib/rpm-state in SLE systems to fix the prein selinux macro\n            $SUDO ${transactional_update_run} mkdir -p /var/lib/rpm-state\n            ;;\n        coreos)\n            rpm_installer=\"rpm-ostree --idempotent\"\n            # rpm_install_extra_args=\"--apply-live\"\n            : \"${INSTALL_K3S_SKIP_START:=true}\"\n            ;;\n        *)\n            rpm_installer=\"yum\"\n            ;;\n        esac\n        if [ \"${rpm_installer}\" = \"yum\" ] \u0026\u0026 [ -x /usr/bin/dnf ]; then\n            rpm_installer=dnf\n        fi\n\t    if rpm -q --quiet k3s-selinux; then \n            # remove k3s-selinux module before upgrade to allow container-selinux to upgrade safely\n            if check_available_upgrades container-selinux ${3} \u0026\u0026 check_available_upgrades k3s-selinux ${3}; then\n                MODULE_PRIORITY=$($SUDO semodule --list=full | grep k3s | cut -f1 -d\" \")\n                if [ -n \"${MODULE_PRIORITY}\" ]; then\n                    $SUDO semodule -X $MODULE_PRIORITY -r k3s || true\n                fi\n            fi\n        fi\n        # shellcheck disable=SC2086\n        $SUDO ${rpm_installer} install -y \"k3s-selinux\"\n    fi\n    return\n}\n\ncheck_available_upgrades() {\n    set +e\n    case ${2} in\n        sle)\n            available_upgrades=$($SUDO zypper -q -t -s 11 se -s -u --type package $1 | tail -n 1 | grep -v \"No matching\" | awk '{print $3}')\n            ;;\n        coreos)\n            # currently rpm-ostree does not support search functionality https://github.com/coreos/rpm-ostree/issues/1877\n            ;;\n        *)\n            available_upgrades=$($SUDO yum -q --refresh list $1 --upgrades | tail -n 1 | awk '{print $2}')\n            ;;\n    esac\n    set -e\n    if [ -n \"${available_upgrades}\" ]; then\n        return 0\n    fi\n    return 1\n}\n# --- download and verify k3s ---\ndownload_and_verify() {\n    if can_skip_download_binary; then\n       info 'Skipping k3s download and verify'\n       verify_k3s_is_executable\n       return\n    fi\n\n    setup_verify_arch\n    verify_downloader curl || verify_downloader wget || fatal 'Can not find curl or wget for downloading files'\n    setup_tmp\n    get_release_version\n    download_hash\n\n    if installed_hash_matches; then\n        info 'Skipping binary downloaded, installed k3s matches hash'\n        return\n    fi\n\n    download_binary\n    verify_binary\n    setup_binary\n}\n\n# --- add additional utility links ---\ncreate_symlinks() {\n    [ \"${INSTALL_K3S_BIN_DIR_READ_ONLY}\" = true ] \u0026\u0026 return\n    [ \"${INSTALL_K3S_SYMLINK}\" = skip ] \u0026\u0026 return\n\n    for cmd in kubectl crictl ctr; do\n        if [ ! -e ${BIN_DIR}/${cmd} ] || [ \"${INSTALL_K3S_SYMLINK}\" = force ]; then\n            which_cmd=$(command -v ${cmd} 2\u003e/dev/null || true)\n            if [ -z \"${which_cmd}\" ] || [ \"${INSTALL_K3S_SYMLINK}\" = force ]; then\n                info \"Creating ${BIN_DIR}/${cmd} symlink to k3s\"\n                $SUDO ln -sf k3s ${BIN_DIR}/${cmd}\n            else\n                info \"Skipping ${BIN_DIR}/${cmd} symlink to k3s, command exists in PATH at ${which_cmd}\"\n            fi\n        else\n            info \"Skipping ${BIN_DIR}/${cmd} symlink to k3s, already exists\"\n        fi\n    done\n}\n\n# --- create killall script ---\ncreate_killall() {\n    [ \"${INSTALL_K3S_BIN_DIR_READ_ONLY}\" = true ] \u0026\u0026 return\n    info \"Creating killall script ${KILLALL_K3S_SH}\"\n    $SUDO tee ${KILLALL_K3S_SH} \u003e/dev/null \u003c\u003c \\EOF\n#!/bin/sh\n[ $(id -u) -eq 0 ] || exec sudo $0 $@\n\nK3S_DATA_DIR=${K3S_DATA_DIR:-/var/lib/rancher/k3s}\n\nfor bin in ${K3S_DATA_DIR}/data/**/bin/; do\n    [ -d $bin ] \u0026\u0026 export PATH=$PATH:$bin:$bin/aux\ndone\n\nset -x\n\nfor service in /etc/systemd/system/k3s*.service; do\n    [ -s $service ] \u0026\u0026 systemctl stop $(basename $service)\ndone\n\nfor service in /etc/init.d/k3s*; do\n    [ -x $service ] \u0026\u0026 $service stop\ndone\n\npschildren() {\n    ps -e -o ppid= -o pid= | \\\n    sed -e 's/^\\s*//g; s/\\s\\s*/\\t/g;' | \\\n    grep -w \"^$1\" | \\\n    cut -f2\n}\n\npstree() {\n    for pid in $@; do\n        echo $pid\n        for child in $(pschildren $pid); do\n            pstree $child\n        done\n    done\n}\n\nkilltree() {\n    kill -9 $(\n        { set +x; } 2\u003e/dev/null;\n        pstree $@;\n        set -x;\n    ) 2\u003e/dev/null\n}\n\nremove_interfaces() {\n    # Delete network interface(s) that match 'master cni0'\n    ip link show 2\u003e/dev/null | grep 'master cni0' | while read ignore iface ignore; do\n        iface=${iface%%@*}\n        [ -z \"$iface\" ] || ip link delete $iface\n    done\n\n    # Delete cni related interfaces\n    ip link delete cni0\n    ip link delete flannel.1\n    ip link delete flannel-v6.1\n    ip link delete kube-ipvs0\n    ip link delete flannel-wg\n    ip link delete flannel-wg-v6\n\n    # Restart tailscale\n    if [ -n \"$(command -v tailscale)\" ]; then\n        tailscale set --advertise-routes=\n    fi\n}\n\ngetshims() {\n    ps -e -o pid= -o args= | sed -e 's/^ *//; s/\\s\\s*/\\t/;' | grep -w \"${K3S_DATA_DIR}\"'/data/[^/]*/bin/containerd-shim' | cut -f1\n}\n\nkilltree $({ set +x; } 2\u003e/dev/null; getshims; set -x)\n\ndo_unmount_and_remove() {\n    set +x\n    while read -r _ path _; do\n        case \"$path\" in $1*) echo \"$path\" ;; esac\n    done \u003c /proc/self/mounts | sort -r | xargs -r -t -n 1 sh -c 'umount -f \"$0\" \u0026\u0026 rm -rf \"$0\"'\n    set -x\n}\n\ndo_unmount_and_remove '/run/k3s'\ndo_unmount_and_remove '/var/lib/kubelet/pods'\ndo_unmount_and_remove '/var/lib/kubelet/plugins'\ndo_unmount_and_remove '/run/netns/cni-'\n\n# Remove CNI namespaces\nip netns show 2\u003e/dev/null | grep cni- | xargs -r -t -n 1 ip netns delete\n\nremove_interfaces\n\nrm -rf /var/lib/cni/\niptables-save | grep -v KUBE- | grep -v CNI- | grep -iv flannel | iptables-restore\nip6tables-save | grep -v KUBE- | grep -v CNI- | grep -iv flannel | ip6tables-restore\nEOF\n    $SUDO chmod 755 ${KILLALL_K3S_SH}\n    $SUDO chown root:root ${KILLALL_K3S_SH}\n}\n\n# --- create uninstall script ---\ncreate_uninstall() {\n    [ \"${INSTALL_K3S_BIN_DIR_READ_ONLY}\" = true ] \u0026\u0026 return\n    info \"Creating uninstall script ${UNINSTALL_K3S_SH}\"\n    $SUDO tee ${UNINSTALL_K3S_SH} \u003e/dev/null \u003c\u003c EOF\n#!/bin/sh\nset -x\n[ \\$(id -u) -eq 0 ] || exec sudo \\$0 \\$@\n\nK3S_DATA_DIR=\\${K3S_DATA_DIR:-/var/lib/rancher/k3s}\n\n${KILLALL_K3S_SH}\n\nif command -v systemctl; then\n    systemctl disable ${SYSTEM_NAME}\n    systemctl reset-failed ${SYSTEM_NAME}\n    systemctl daemon-reload\nfi\nif command -v rc-update; then\n    rc-update delete ${SYSTEM_NAME} default\nfi\n\nrm -f ${FILE_K3S_SERVICE}\nrm -f ${FILE_K3S_ENV}\n\nremove_uninstall() {\n    rm -f ${UNINSTALL_K3S_SH}\n}\ntrap remove_uninstall EXIT\n\nif (ls ${SYSTEMD_DIR}/k3s*.service || ls /etc/init.d/k3s*) \u003e/dev/null 2\u003e\u00261; then\n    set +x; echo 'Additional k3s services installed, skipping uninstall of k3s'; set -x\n    exit\nfi\n\nfor cmd in kubectl crictl ctr; do\n    if [ -L ${BIN_DIR}/\\$cmd ]; then\n        rm -f ${BIN_DIR}/\\$cmd\n    fi\ndone\n\nclean_mounted_directory() {\n    if ! grep -q \" \\$1\" /proc/mounts; then\n        rm -rf \"\\$1\"\n\treturn 0\n    fi\n\n    for path in \"\\$1\"/*; do\n        if [ -d \"\\$path\" ]; then\n            if grep -q \" \\$path\" /proc/mounts; then\n                clean_mounted_directory \"\\$path\"\n            else\n                rm -rf \"\\$path\"\n            fi\n        else\n            rm \"\\$path\"\n        fi\n     done\n}\n\nrm -rf /etc/rancher/k3s\nrm -rf /run/k3s\nrm -rf /run/flannel\nclean_mounted_directory \\${K3S_DATA_DIR}\nrm -rf /var/lib/kubelet\nrm -f ${BIN_DIR}/k3s\nrm -f ${KILLALL_K3S_SH}\n\nif type yum \u003e/dev/null 2\u003e\u00261; then\n    yum remove -y k3s-selinux\n    rm -f /etc/yum.repos.d/rancher-k3s-common*.repo\nelif type rpm-ostree \u003e/dev/null 2\u003e\u00261; then\n    rpm-ostree uninstall k3s-selinux\n    rm -f /etc/yum.repos.d/rancher-k3s-common*.repo\nelif type zypper \u003e/dev/null 2\u003e\u00261; then\n    uninstall_cmd=\"zypper remove -y k3s-selinux\"\n    if [ \"\\${TRANSACTIONAL_UPDATE=false}\" != \"true\" ] \u0026\u0026 [ -x /usr/sbin/transactional-update ]; then\n        uninstall_cmd=\"transactional-update --no-selfupdate -d run \\$uninstall_cmd\"\n    fi\n    $SUDO \\$uninstall_cmd\n    rm -f /etc/zypp/repos.d/rancher-k3s-common*.repo\nfi\nEOF\n    $SUDO chmod 755 ${UNINSTALL_K3S_SH}\n    $SUDO chown root:root ${UNINSTALL_K3S_SH}\n}\n\n# --- disable current service if loaded --\nsystemd_disable() {\n    $SUDO systemctl disable ${SYSTEM_NAME} \u003e/dev/null 2\u003e\u00261 || true\n    $SUDO rm -f /etc/systemd/system/${SERVICE_K3S} || true\n    $SUDO rm -f /etc/systemd/system/${SERVICE_K3S}.env || true\n}\n\n# --- capture current env and create file containing k3s_ variables ---\ncreate_env_file() {\n    info \"env: Creating environment file ${FILE_K3S_ENV}\"\n    $SUDO touch ${FILE_K3S_ENV}\n    $SUDO chmod 0600 ${FILE_K3S_ENV}\n    sh -c export | while read x v; do echo $v; done | grep -E '^(K3S|CONTAINERD)_' | $SUDO tee ${FILE_K3S_ENV} \u003e/dev/null\n    sh -c export | while read x v; do echo $v; done | grep -Ei '^(NO|HTTP|HTTPS)_PROXY' | $SUDO tee -a ${FILE_K3S_ENV} \u003e/dev/null\n}\n\n# --- write systemd service file ---\ncreate_systemd_service_file() {\n    info \"systemd: Creating service file ${FILE_K3S_SERVICE}\"\n    $SUDO tee ${FILE_K3S_SERVICE} \u003e/dev/null \u003c\u003c EOF\n[Unit]\nDescription=Lightweight Kubernetes\nDocumentation=https://k3s.io\nWants=network-online.target\nAfter=network-online.target\n\n[Install]\nWantedBy=multi-user.target\n\n[Service]\nType=${SYSTEMD_TYPE}\nEnvironmentFile=-/etc/default/%N\nEnvironmentFile=-/etc/sysconfig/%N\nEnvironmentFile=-${FILE_K3S_ENV}\nKillMode=process\nDelegate=yes\n# Having non-zero Limit*s causes performance problems due to accounting overhead\n# in the kernel. We recommend using cgroups to do container-local accounting.\nLimitNOFILE=1048576\nLimitNPROC=infinity\nLimitCORE=infinity\nTasksMax=infinity\nTimeoutStartSec=0\nRestart=always\nRestartSec=5s\nExecStartPre=/bin/sh -xc '! /usr/bin/systemctl is-enabled --quiet nm-cloud-setup.service 2\u003e/dev/null'\nExecStartPre=-/sbin/modprobe br_netfilter\nExecStartPre=-/sbin/modprobe overlay\nExecStart=${BIN_DIR}/k3s \\\\\n    ${CMD_K3S_EXEC}\n\nEOF\n}\n\n# --- write openrc service file ---\ncreate_openrc_service_file() {\n    LOG_FILE=/var/log/${SYSTEM_NAME}.log\n\n    info \"openrc: Creating service file ${FILE_K3S_SERVICE}\"\n    $SUDO tee ${FILE_K3S_SERVICE} \u003e/dev/null \u003c\u003c EOF\n#!/sbin/openrc-run\n\ndepend() {\n    after network-online\n    want cgroups\n}\n\nstart_pre() {\n    rm -f /tmp/k3s.*\n}\n\nsupervisor=supervise-daemon\nname=${SYSTEM_NAME}\ncommand=\"${BIN_DIR}/k3s\"\ncommand_args=\"$(escape_dq \"${CMD_K3S_EXEC}\")\n    \u003e\u003e${LOG_FILE} 2\u003e\u00261\"\n\noutput_log=${LOG_FILE}\nerror_log=${LOG_FILE}\n\npidfile=\"/var/run/${SYSTEM_NAME}.pid\"\nrespawn_delay=5\nrespawn_max=0\n\nset -o allexport\nif [ -f /etc/environment ]; then . /etc/environment; fi\nif [ -f ${FILE_K3S_ENV} ]; then . ${FILE_K3S_ENV}; fi\nset +o allexport\nEOF\n    $SUDO chmod 0755 ${FILE_K3S_SERVICE}\n\n    $SUDO tee /etc/logrotate.d/${SYSTEM_NAME} \u003e/dev/null \u003c\u003c EOF\n${LOG_FILE} {\n\tmissingok\n\tnotifempty\n\tcopytruncate\n}\nEOF\n}\n\n# --- write systemd or openrc service file ---\ncreate_service_file() {\n    [ \"${HAS_SYSTEMD}\" = true ] \u0026\u0026 create_systemd_service_file \u0026\u0026 restore_systemd_service_file_context\n    [ \"${HAS_OPENRC}\" = true ] \u0026\u0026 create_openrc_service_file\n    return 0\n}\n\nrestore_systemd_service_file_context() {\n    $SUDO restorecon -R -i ${FILE_K3S_SERVICE} 2\u003e/dev/null || true\n    $SUDO restorecon -R -i ${FILE_K3S_ENV} 2\u003e/dev/null || true\n}\n\n# --- get hashes of the current k3s bin and service files\nget_installed_hashes() {\n    $SUDO sha256sum ${BIN_DIR}/k3s ${FILE_K3S_SERVICE} ${FILE_K3S_ENV} 2\u003e\u00261 || true\n}\n\n# --- enable and start systemd service ---\nsystemd_enable() {\n    info \"systemd: Enabling ${SYSTEM_NAME} unit\"\n    $SUDO systemctl enable ${FILE_K3S_SERVICE} \u003e/dev/null\n    $SUDO systemctl daemon-reload \u003e/dev/null\n}\n\nsystemd_start() {\n    info \"systemd: Starting ${SYSTEM_NAME}\"\n    $SUDO systemctl restart ${SYSTEM_NAME}\n}\n\n# --- enable and start openrc service ---\nopenrc_enable() {\n    info \"openrc: Enabling ${SYSTEM_NAME} service for default runlevel\"\n    $SUDO rc-update add ${SYSTEM_NAME} default \u003e/dev/null\n}\n\nopenrc_start() {\n    info \"openrc: Starting ${SYSTEM_NAME}\"\n    $SUDO ${FILE_K3S_SERVICE} restart\n}\n\nhas_working_xtables() {\n    if $SUDO sh -c \"command -v \\\"$1-save\\\"\" 1\u003e /dev/null \u0026\u0026 $SUDO sh -c \"command -v \\\"$1-restore\\\"\" 1\u003e /dev/null; then\n        if $SUDO $1-save 2\u003e/dev/null | grep -q '^-A CNI-HOSTPORT-MASQ -j MASQUERADE$'; then\n            warn \"Host $1-save/$1-restore tools are incompatible with existing rules\"\n        else\n            return 0\n        fi\n    else\n        info \"Host $1-save/$1-restore tools not found\"\n    fi\n    return 1\n}\n\n# --- startup systemd or openrc service ---\nservice_enable_and_start() {\n    if [ -f \"/proc/cgroups\" ] \u0026\u0026 [ \"$(grep memory /proc/cgroups | while read -r n n n enabled; do echo $enabled; done)\" -eq 0 ];\n    then\n        info 'Failed to find memory cgroup, you may need to add \"cgroup_memory=1 cgroup_enable=memory\" to your linux cmdline (/boot/cmdline.txt on a Raspberry Pi)'\n    fi\n\n    [ \"${INSTALL_K3S_SKIP_ENABLE}\" = true ] \u0026\u0026 return\n\n    [ \"${HAS_SYSTEMD}\" = true ] \u0026\u0026 systemd_enable\n    [ \"${HAS_OPENRC}\" = true ] \u0026\u0026 openrc_enable\n\n    [ \"${INSTALL_K3S_SKIP_START}\" = true ] \u0026\u0026 return\n\n    POST_INSTALL_HASHES=$(get_installed_hashes)\n    if [ \"${PRE_INSTALL_HASHES}\" = \"${POST_INSTALL_HASHES}\" ] \u0026\u0026 [ \"${INSTALL_K3S_FORCE_RESTART}\" != true ]; then\n        info 'No change detected so skipping service start'\n        return\n    fi\n\n    for XTABLES in iptables ip6tables; do\n        if has_working_xtables ${XTABLES}; then\n            $SUDO ${XTABLES}-save 2\u003e/dev/null | grep -v KUBE- | grep -iv flannel | $SUDO ${XTABLES}-restore\n        fi\n    done\n\n    [ \"${HAS_SYSTEMD}\" = true ] \u0026\u0026 systemd_start\n    [ \"${HAS_OPENRC}\" = true ] \u0026\u0026 openrc_start\n    return 0\n}\n\n# --- re-evaluate args to include env command ---\neval set -- $(escape \"${INSTALL_K3S_EXEC}\") $(quote \"$@\")\n\n# --- run the install process --\n{\n    verify_system\n    setup_env \"$@\"\n    download_and_verify\n    setup_selinux\n    create_symlinks\n    create_killall\n    create_uninstall\n    systemd_disable\n    create_env_file\n    create_service_file\n    service_enable_and_start\n}\n\n",
            "ca_cert_pem": null,
            "id": "https://raw.githubusercontent.com/rancher/k3s/v1.31.2+k3s1/install.sh",
            "insecure": null,
            "method": null,
            "request_body": null,
            "request_headers": null,
            "request_timeout_ms": null,
            "response_body": "#!/bin/sh\nset -e\nset -o noglob\n\n# Usage:\n#   curl ... | ENV_VAR=... sh -\n#       or\n#   ENV_VAR=... ./install.sh\n#\n# Example:\n#   Installing a server without traefik:\n#     curl ... | INSTALL_K3S_EXEC=\"--disable=traefik\" sh -\n#   Installing an agent to point at a server:\n#     curl ... | K3S_TOKEN=xxx K3S_URL=https://server-url:6443 sh -\n#\n# Environment variables:\n#   - K3S_*\n#     Environment variables which begin with K3S_ will be preserved for the\n#     systemd service to use. Setting K3S_URL without explicitly setting\n#     a systemd exec command will default the command to \"agent\", and we\n#     enforce that K3S_TOKEN is also set.\n#\n#   - INSTALL_K3S_SKIP_DOWNLOAD\n#     If set to true will not download k3s hash or binary.\n#\n#   - INSTALL_K3S_FORCE_RESTART\n#     If set to true will always restart the K3s service\n#\n#   - INSTALL_K3S_SYMLINK\n#     If set to 'skip' will not create symlinks, 'force' will overwrite,\n#     default will symlink if command does not exist in path.\n#\n#   - INSTALL_K3S_SKIP_ENABLE\n#     If set to true will not enable or start k3s service.\n#\n#   - INSTALL_K3S_SKIP_START\n#     If set to true will not start k3s service.\n#\n#   - INSTALL_K3S_VERSION\n#     Version of k3s to download from github. Will attempt to download from the\n#     stable channel if not specified.\n#\n#   - INSTALL_K3S_COMMIT\n#     Commit of k3s to download from temporary cloud storage.\n#     * (for developer \u0026 QA use)\n#\n#   - INSTALL_K3S_PR\n#     PR build of k3s to download from Github Artifacts.\n#     * (for developer \u0026 QA use)\n#\n#   - INSTALL_K3S_BIN_DIR\n#     Directory to install k3s binary, links, and uninstall script to, or use\n#     /usr/local/bin as the default\n#\n#   - INSTALL_K3S_BIN_DIR_READ_ONLY\n#     If set to true will not write files to INSTALL_K3S_BIN_DIR, forces\n#     setting INSTALL_K3S_SKIP_DOWNLOAD=true\n#\n#   - INSTALL_K3S_SYSTEMD_DIR\n#     Directory to install systemd service and environment files to, or use\n#     /etc/systemd/system as the default\n#\n#   - INSTALL_K3S_EXEC or script arguments\n#     Command with flags to use for launching k3s in the systemd service, if\n#     the command is not specified will default to \"agent\" if K3S_URL is set\n#     or \"server\" if not. The final systemd command resolves to a combination\n#     of EXEC and script args ($@).\n#\n#     The following commands result in the same behavior:\n#       curl ... | INSTALL_K3S_EXEC=\"--disable=traefik\" sh -s -\n#       curl ... | INSTALL_K3S_EXEC=\"server --disable=traefik\" sh -s -\n#       curl ... | INSTALL_K3S_EXEC=\"server\" sh -s - --disable=traefik\n#       curl ... | sh -s - server --disable=traefik\n#       curl ... | sh -s - --disable=traefik\n#\n#   - INSTALL_K3S_NAME\n#     Name of systemd service to create, will default from the k3s exec command\n#     if not specified. If specified the name will be prefixed with 'k3s-'.\n#\n#   - INSTALL_K3S_TYPE\n#     Type of systemd service to create, will default from the k3s exec command\n#     if not specified.\n#\n#   - INSTALL_K3S_SELINUX_WARN\n#     If set to true will continue if k3s-selinux policy is not found.\n#\n#   - INSTALL_K3S_SKIP_SELINUX_RPM\n#     If set to true will skip automatic installation of the k3s RPM.\n#\n#   - INSTALL_K3S_CHANNEL_URL\n#     Channel URL for fetching k3s download URL.\n#     Defaults to 'https://update.k3s.io/v1-release/channels'.\n#\n#   - INSTALL_K3S_CHANNEL\n#     Channel to use for fetching k3s download URL.\n#     Defaults to 'stable'.\n\nGITHUB_URL=https://github.com/k3s-io/k3s/releases\nGITHUB_PR_URL=\"\"\nSTORAGE_URL=https://k3s-ci-builds.s3.amazonaws.com\nDOWNLOADER=\n\n# --- helper functions for logs ---\ninfo()\n{\n    echo '[INFO] ' \"$@\"\n}\nwarn()\n{\n    echo '[WARN] ' \"$@\" \u003e\u00262\n}\nfatal()\n{\n    echo '[ERROR] ' \"$@\" \u003e\u00262\n    exit 1\n}\n\n# --- fatal if no systemd or openrc ---\nverify_system() {\n    if [ -x /sbin/openrc-run ]; then\n        HAS_OPENRC=true\n        return\n    fi\n    if [ -x /bin/systemctl ] || type systemctl \u003e /dev/null 2\u003e\u00261; then\n        HAS_SYSTEMD=true\n        return\n    fi\n    fatal 'Can not find systemd or openrc to use as a process supervisor for k3s'\n}\n\n# --- add quotes to command arguments ---\nquote() {\n    for arg in \"$@\"; do\n        printf '%s\\n' \"$arg\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/'/\"\n    done\n}\n\n# --- add indentation and trailing slash to quoted args ---\nquote_indent() {\n    printf ' \\\\\\n'\n    for arg in \"$@\"; do\n        printf '\\t%s \\\\\\n' \"$(quote \"$arg\")\"\n    done\n}\n\n# --- escape most punctuation characters, except quotes, forward slash, and space ---\nescape() {\n    printf '%s' \"$@\" | sed -e 's/\\([][!#$%\u0026()*;\u003c=\u003e?\\_`{|}]\\)/\\\\\\1/g;'\n}\n\n# --- escape double quotes ---\nescape_dq() {\n    printf '%s' \"$@\" | sed -e 's/\"/\\\\\"/g'\n}\n\n# --- ensures $K3S_URL is empty or begins with https://, exiting fatally otherwise ---\nverify_k3s_url() {\n    case \"${K3S_URL}\" in\n        \"\")\n            ;;\n        https://*)\n            ;;\n        *)\n            fatal \"Only https:// URLs are supported for K3S_URL (have ${K3S_URL})\"\n            ;;\n    esac\n}\n\n# --- define needed environment variables ---\nsetup_env() {\n    # --- use command args if passed or create default ---\n    case \"$1\" in\n        # --- if we only have flags discover if command should be server or agent ---\n        (-*|\"\")\n            if [ -z \"${K3S_URL}\" ]; then\n                CMD_K3S=server\n            else\n                if [ -z \"${K3S_TOKEN}\" ] \u0026\u0026 [ -z \"${K3S_TOKEN_FILE}\" ]; then\n                    fatal \"Defaulted k3s exec command to 'agent' because K3S_URL is defined, but K3S_TOKEN or K3S_TOKEN_FILE is not defined.\"\n                fi\n                CMD_K3S=agent\n            fi\n        ;;\n        # --- command is provided ---\n        (*)\n            CMD_K3S=$1\n            shift\n        ;;\n    esac\n\n    verify_k3s_url\n\n    CMD_K3S_EXEC=\"${CMD_K3S}$(quote_indent \"$@\")\"\n\n    # --- use systemd name if defined or create default ---\n    if [ -n \"${INSTALL_K3S_NAME}\" ]; then\n        SYSTEM_NAME=k3s-${INSTALL_K3S_NAME}\n    else\n        if [ \"${CMD_K3S}\" = server ]; then\n            SYSTEM_NAME=k3s\n        else\n            SYSTEM_NAME=k3s-${CMD_K3S}\n        fi\n    fi\n\n    # --- check for invalid characters in system name ---\n    valid_chars=$(printf '%s' \"${SYSTEM_NAME}\" | sed -e 's/[][!#$%\u0026()*;\u003c=\u003e?\\_`{|}/[:space:]]/^/g;' )\n    if [ \"${SYSTEM_NAME}\" != \"${valid_chars}\"  ]; then\n        invalid_chars=$(printf '%s' \"${valid_chars}\" | sed -e 's/[^^]/ /g')\n        fatal \"Invalid characters for system name:\n            ${SYSTEM_NAME}\n            ${invalid_chars}\"\n    fi\n\n    # --- use sudo if we are not already root ---\n    SUDO=sudo\n    if [ $(id -u) -eq 0 ]; then\n        SUDO=\n    fi\n\n    # --- use systemd type if defined or create default ---\n    if [ -n \"${INSTALL_K3S_TYPE}\" ]; then\n        SYSTEMD_TYPE=${INSTALL_K3S_TYPE}\n    else\n        SYSTEMD_TYPE=notify\n    fi\n\n    # --- use binary install directory if defined or create default ---\n    if [ -n \"${INSTALL_K3S_BIN_DIR}\" ]; then\n        BIN_DIR=${INSTALL_K3S_BIN_DIR}\n    else\n        # --- use /usr/local/bin if root can write to it, otherwise use /opt/bin if it exists\n        BIN_DIR=/usr/local/bin\n        if ! $SUDO sh -c \"touch ${BIN_DIR}/k3s-ro-test \u0026\u0026 rm -rf ${BIN_DIR}/k3s-ro-test\"; then\n            if [ -d /opt/bin ]; then\n                BIN_DIR=/opt/bin\n            fi\n        fi\n    fi\n\n    # --- use systemd directory if defined or create default ---\n    if [ -n \"${INSTALL_K3S_SYSTEMD_DIR}\" ]; then\n        SYSTEMD_DIR=\"${INSTALL_K3S_SYSTEMD_DIR}\"\n    else\n        SYSTEMD_DIR=/etc/systemd/system\n    fi\n\n    # --- set related files from system name ---\n    SERVICE_K3S=${SYSTEM_NAME}.service\n    UNINSTALL_K3S_SH=${UNINSTALL_K3S_SH:-${BIN_DIR}/${SYSTEM_NAME}-uninstall.sh}\n    KILLALL_K3S_SH=${KILLALL_K3S_SH:-${BIN_DIR}/k3s-killall.sh}\n\n    # --- use service or environment location depending on systemd/openrc ---\n    if [ \"${HAS_SYSTEMD}\" = true ]; then\n        FILE_K3S_SERVICE=${SYSTEMD_DIR}/${SERVICE_K3S}\n        FILE_K3S_ENV=${SYSTEMD_DIR}/${SERVICE_K3S}.env\n    elif [ \"${HAS_OPENRC}\" = true ]; then\n        $SUDO mkdir -p /etc/rancher/k3s\n        FILE_K3S_SERVICE=/etc/init.d/${SYSTEM_NAME}\n        FILE_K3S_ENV=/etc/rancher/k3s/${SYSTEM_NAME}.env\n    fi\n\n    # --- get hash of config \u0026 exec for currently installed k3s ---\n    PRE_INSTALL_HASHES=$(get_installed_hashes)\n\n    # --- if bin directory is read only skip download ---\n    if [ \"${INSTALL_K3S_BIN_DIR_READ_ONLY}\" = true ]; then\n        INSTALL_K3S_SKIP_DOWNLOAD=true\n    fi\n\n    # --- setup channel values\n    INSTALL_K3S_CHANNEL_URL=${INSTALL_K3S_CHANNEL_URL:-'https://update.k3s.io/v1-release/channels'}\n    INSTALL_K3S_CHANNEL=${INSTALL_K3S_CHANNEL:-'stable'}\n}\n\n# --- check if skip download environment variable set ---\ncan_skip_download_binary() {\n    if [ \"${INSTALL_K3S_SKIP_DOWNLOAD}\" != true ] \u0026\u0026 [ \"${INSTALL_K3S_SKIP_DOWNLOAD}\" != binary ]; then\n        return 1\n    fi\n}\n\ncan_skip_download_selinux() {                                                        \n    if [ \"${INSTALL_K3S_SKIP_DOWNLOAD}\" != true ] \u0026\u0026 [ \"${INSTALL_K3S_SKIP_DOWNLOAD}\" != selinux ]; then \n        return 1                                                                     \n    fi                                                                               \n}  \n\n# --- verify an executable k3s binary is installed ---\nverify_k3s_is_executable() {\n    if [ ! -x ${BIN_DIR}/k3s ]; then\n        fatal \"Executable k3s binary not found at ${BIN_DIR}/k3s\"\n    fi\n}\n\n# --- set arch and suffix, fatal if architecture not supported ---\nsetup_verify_arch() {\n    if [ -z \"$ARCH\" ]; then\n        ARCH=$(uname -m)\n    fi\n    case $ARCH in\n        amd64)\n            ARCH=amd64\n            SUFFIX=\n            ;;\n        x86_64)\n            ARCH=amd64\n            SUFFIX=\n            ;;\n        arm64)\n            ARCH=arm64\n            SUFFIX=-${ARCH}\n            ;;\n        s390x)\n            ARCH=s390x\n            SUFFIX=-${ARCH}\n            ;;\n        aarch64)\n            ARCH=arm64\n            SUFFIX=-${ARCH}\n            ;;\n        arm*)\n            ARCH=arm\n            SUFFIX=-${ARCH}hf\n            ;;\n        *)\n            fatal \"Unsupported architecture $ARCH\"\n    esac\n}\n\n# --- verify existence of network downloader executable ---\nverify_downloader() {\n    # Return failure if it doesn't exist or is no executable\n    [ -x \"$(command -v $1)\" ] || return 1\n\n    # Set verified executable as our downloader program and return success\n    DOWNLOADER=$1\n    return 0\n}\n\n# --- create temporary directory and cleanup when done ---\nsetup_tmp() {\n    TMP_DIR=$(mktemp -d -t k3s-install.XXXXXXXXXX)\n    TMP_HASH=${TMP_DIR}/k3s.hash\n    TMP_ZIP=${TMP_DIR}/k3s.zip\n    TMP_BIN=${TMP_DIR}/k3s.bin\n    cleanup() {\n        code=$?\n        set +e\n        trap - EXIT\n        rm -rf ${TMP_DIR}\n        exit $code\n    }\n    trap cleanup INT EXIT\n}\n\n# --- use desired k3s version if defined or find version from channel ---\nget_release_version() {\n    if [ -n \"${INSTALL_K3S_PR}\" ]; then\n        VERSION_K3S=\"PR ${INSTALL_K3S_PR}\"\n        get_pr_artifact_url\n    elif [ -n \"${INSTALL_K3S_COMMIT}\" ]; then\n        VERSION_K3S=\"commit ${INSTALL_K3S_COMMIT}\"\n    elif [ -n \"${INSTALL_K3S_VERSION}\" ]; then\n        VERSION_K3S=${INSTALL_K3S_VERSION}\n    else\n        info \"Finding release for channel ${INSTALL_K3S_CHANNEL}\"\n        version_url=\"${INSTALL_K3S_CHANNEL_URL}/${INSTALL_K3S_CHANNEL}\"\n        case $DOWNLOADER in\n            curl)\n                VERSION_K3S=$(curl -w '%{url_effective}' -L -s -S ${version_url} -o /dev/null | sed -e 's|.*/||')\n                ;;\n            wget)\n                VERSION_K3S=$(wget -SqO /dev/null ${version_url} 2\u003e\u00261 | grep -i Location | sed -e 's|.*/||')\n                ;;\n            *)\n                fatal \"Incorrect downloader executable '$DOWNLOADER'\"\n                ;;\n        esac\n    fi\n    info \"Using ${VERSION_K3S} as release\"\n}\n\n# --- get k3s-selinux version ---\nget_k3s_selinux_version() {\n    available_version=\"k3s-selinux-1.2-2.${rpm_target}.noarch.rpm\"\n    info \"Finding available k3s-selinux versions\"\n    \n    # run verify_downloader in case it binary installation was skipped\n    verify_downloader curl || verify_downloader wget || fatal 'Can not find curl or wget for downloading files'\n\n    case $DOWNLOADER in\n        curl)\n            DOWNLOADER_OPTS=\"-s\"\n            ;;\n        wget)\n            DOWNLOADER_OPTS=\"-q -O -\"\n            ;;\n        *)\n            fatal \"Incorrect downloader executable '$DOWNLOADER'\"\n            ;;\n    esac\n    for i in {1..3}; do\n        set +e\n        if [ \"${rpm_channel}\" = \"testing\" ]; then\n            version=$(timeout 5 ${DOWNLOADER} ${DOWNLOADER_OPTS} https://api.github.com/repos/k3s-io/k3s-selinux/releases |  grep browser_download_url | awk '{ print $2 }' | grep -oE \"[^\\/]+${rpm_target}\\.noarch\\.rpm\" | head -n 1)\n        else\n            version=$(timeout 5 ${DOWNLOADER} ${DOWNLOADER_OPTS} https://api.github.com/repos/k3s-io/k3s-selinux/releases/latest |  grep browser_download_url | awk '{ print $2 }' | grep -oE \"[^\\/]+${rpm_target}\\.noarch\\.rpm\")\n        fi\n        set -e\n        if [ \"${version}\" != \"\" ]; then\n            break\n        fi\n        sleep 1\n    done\n    if [ \"${version}\" == \"\" ]; then\n        warn \"Failed to get available versions of k3s-selinux..defaulting to ${available_version}\"\n        return\n    fi\n    available_version=${version}\n}\n\n# --- download from github url ---\ndownload() {\n    [ $# -eq 2 ] || fatal 'download needs exactly 2 arguments'\n    set +e\n    case $DOWNLOADER in\n        curl)\n            curl -o $1 -sfL $2\n            ;;\n        wget)\n            wget -qO $1 $2\n            ;;\n        *)\n            fatal \"Incorrect executable '$DOWNLOADER'\"\n            ;;\n    esac\n\n    # Abort if download command failed\n    [ $? -eq 0 ] || fatal 'Download failed'\n    set -e\n}\n\n# --- download hash from github url ---\ndownload_hash() {\n    if [ -n \"${INSTALL_K3S_PR}\" ]; then\n        info \"Downloading hash ${GITHUB_PR_URL}\"\n        curl -s -o ${TMP_ZIP} -H \"Authorization: Bearer $GITHUB_TOKEN\" -L ${GITHUB_PR_URL}\n        unzip -p ${TMP_ZIP} k3s.sha256sum \u003e ${TMP_HASH}\n    else\n        if [ -n \"${INSTALL_K3S_COMMIT}\" ]; then\n            HASH_URL=${STORAGE_URL}/k3s${SUFFIX}-${INSTALL_K3S_COMMIT}.sha256sum\n        else\n            HASH_URL=${GITHUB_URL}/download/${VERSION_K3S}/sha256sum-${ARCH}.txt\n        fi\n        info \"Downloading hash ${HASH_URL}\"\n        download ${TMP_HASH} ${HASH_URL}\n    fi\n    HASH_EXPECTED=$(grep \" k3s${SUFFIX}$\" ${TMP_HASH})\n    HASH_EXPECTED=${HASH_EXPECTED%%[[:blank:]]*}\n}\n\n# --- check hash against installed version ---\ninstalled_hash_matches() {\n    if [ -x ${BIN_DIR}/k3s ]; then\n        HASH_INSTALLED=$(sha256sum ${BIN_DIR}/k3s)\n        HASH_INSTALLED=${HASH_INSTALLED%%[[:blank:]]*}\n        if [ \"${HASH_EXPECTED}\" = \"${HASH_INSTALLED}\" ]; then\n            return\n        fi\n    fi\n    return 1\n}\n\n# Use the GitHub API to identify the artifact associated with a given PR\nget_pr_artifact_url() {\n    github_api_url=https://api.github.com/repos/k3s-io/k3s\n\n    # Check if jq is installed\n    if ! [ -x \"$(command -v jq)\" ]; then\n        fatal \"Installing PR builds requires jq\"\n    fi\n\n    # Check if unzip is installed\n    if ! [ -x \"$(command -v unzip)\" ]; then\n        fatal \"Installing PR builds requires unzip\"\n    fi\n\n    if [ -z \"${GITHUB_TOKEN}\" ]; then\n        fatal \"Installing PR builds requires GITHUB_TOKEN with k3s-io/k3s repo permissions\"\n    fi\n\n    # GET request to the GitHub API to retrieve the latest commit SHA from the pull request\n    set +e\n    commit_id=$(curl -f -s -H \"Authorization: Bearer ${GITHUB_TOKEN}\" \"${github_api_url}/pulls/${INSTALL_K3S_PR}\" | jq -r '.head.sha')\n    set -e\n\n    if [ -z \"${commit_id}\" ]; then\n        fatal \"Installing PR builds requires GITHUB_TOKEN with k3s-io/k3s repo permissions\"\n    fi\n    \n    # GET request to the GitHub API to retrieve the Build workflow associated with the commit\n    wf_raw=$(curl -s -H \"Authorization: Bearer ${GITHUB_TOKEN}\" \"${github_api_url}/commits/${commit_id}/check-runs\")\n    build_workflow=$(printf \"%s\" \"${wf_raw}\" | jq -r '.check_runs[] |  select(.name == \"build / Build\")')\n    \n    # Extract the Run ID from the build workflow and lookup artifacts associated with the run\n    run_id=$(echo \"${build_workflow}\" | jq -r ' .details_url' | awk -F'/' '{print $(NF-2)}' | sort -rn | head -1)\n\n    # Extract the artifact ID for the \"k3s\" artifact    \n    artifacts=$(curl -s -H \"Authorization: Bearer ${GITHUB_TOKEN}\" \"${github_api_url}/actions/runs/${run_id}/artifacts\")\n    artifacts_url=$(echo \"${artifacts}\" | jq -r '.artifacts[] | select(.name == \"k3s\") | .archive_download_url')\n    GITHUB_PR_URL=\"${artifacts_url}\"\n}\n\n# --- download binary from github url ---\ndownload_binary() {\n    if [ -n \"${INSTALL_K3S_PR}\" ]; then\n        # Since Binary and Hash are zipped together, check if TMP_ZIP already exists\n        if ! [ -f ${TMP_ZIP} ]; then\n            info \"Downloading K3s artifact ${GITHUB_PR_URL}\"\n            curl -s -f -o ${TMP_ZIP} -H \"Authorization: Bearer $GITHUB_TOKEN\" -L ${GITHUB_PR_URL}\n        fi\n        # extract k3s binary from zip\n        unzip -p ${TMP_ZIP} k3s \u003e ${TMP_BIN}\n        return\n    elif [ -n \"${INSTALL_K3S_COMMIT}\" ]; then\n        BIN_URL=${STORAGE_URL}/k3s${SUFFIX}-${INSTALL_K3S_COMMIT}\n    else\n        BIN_URL=${GITHUB_URL}/download/${VERSION_K3S}/k3s${SUFFIX}\n    fi\n    info \"Downloading binary ${BIN_URL}\"\n    download ${TMP_BIN} ${BIN_URL}\n}\n\n# --- verify downloaded binary hash ---\nverify_binary() {\n    info \"Verifying binary download\"\n    HASH_BIN=$(sha256sum ${TMP_BIN})\n    HASH_BIN=${HASH_BIN%%[[:blank:]]*}\n    if [ \"${HASH_EXPECTED}\" != \"${HASH_BIN}\" ]; then\n        fatal \"Download sha256 does not match ${HASH_EXPECTED}, got ${HASH_BIN}\"\n    fi\n}\n\n# --- setup permissions and move binary to system directory ---\nsetup_binary() {\n    chmod 755 ${TMP_BIN}\n    info \"Installing k3s to ${BIN_DIR}/k3s\"\n    $SUDO chown root:root ${TMP_BIN}\n    $SUDO mv -f ${TMP_BIN} ${BIN_DIR}/k3s\n}\n\n# --- setup selinux policy ---\nsetup_selinux() {\n    case ${INSTALL_K3S_CHANNEL} in \n        *testing)\n            rpm_channel=testing\n            ;;\n        *latest)\n            rpm_channel=latest\n            ;;\n        *)\n            rpm_channel=stable\n            ;;\n    esac\n\n    rpm_site=\"rpm.rancher.io\"\n    if [ \"${rpm_channel}\" = \"testing\" ]; then\n        rpm_site=\"rpm-testing.rancher.io\"\n    fi\n\n    [ -r /etc/os-release ] \u0026\u0026 . /etc/os-release\n    if [ `expr \"${ID_LIKE}\" : \".*suse.*\"` != 0 ]; then\n        rpm_target=sle\n        rpm_site_infix=microos\n        package_installer=zypper\n        if [ \"${ID_LIKE:-}\" = suse ] \u0026\u0026 ( [ \"${VARIANT_ID:-}\" = sle-micro ] || [ \"${ID:-}\" = sle-micro ] ); then\n            rpm_target=sle\n            rpm_site_infix=slemicro\n            package_installer=zypper\n        fi\n    elif [ \"${ID_LIKE:-}\" = coreos ] || [ \"${VARIANT_ID:-}\" = coreos ] || [ \"${VARIANT_ID:-}\" = \"iot\" ]; then\n        rpm_target=coreos\n        rpm_site_infix=coreos\n        package_installer=rpm-ostree\n    elif [ \"${VERSION_ID%%.*}\" = \"7\" ] || ( [ \"${ID:-}\" = amzn ] \u0026\u0026 [ \"${VERSION_ID%%.*}\" = \"2\" ] ); then\n        rpm_target=el7\n        rpm_site_infix=centos/7\n        package_installer=yum\n    elif [ \"${VERSION_ID%%.*}\" = \"8\" ] || [ \"${VERSION_ID%%.*}\" = \"V10\" ] || [ \"${VERSION_ID%%.*}\" -gt \"36\" ]; then\n        rpm_target=el8\n        rpm_site_infix=centos/8\n        package_installer=yum\n    else\n        rpm_target=el9\n        rpm_site_infix=centos/9\n        package_installer=yum\n    fi\n\n    if [ \"${package_installer}\" = \"rpm-ostree\" ] \u0026\u0026 [ -x /bin/yum ]; then\n        package_installer=yum\n    fi\n\n    if [ \"${package_installer}\" = \"yum\" ] \u0026\u0026 [ -x /usr/bin/dnf ]; then\n        package_installer=dnf\n    fi\n\n    policy_hint=\"please install:\n    ${package_installer} install -y container-selinux\n    ${package_installer} install -y https://${rpm_site}/k3s/${rpm_channel}/common/${rpm_site_infix}/noarch/${available_version}\n\"\n\n    if [ \"$INSTALL_K3S_SKIP_SELINUX_RPM\" = true ] || can_skip_download_selinux || [ ! -d /usr/share/selinux ]; then\n        info \"Skipping installation of SELinux RPM\"\n        return\n    fi\n    \n    get_k3s_selinux_version\n    install_selinux_rpm ${rpm_site} ${rpm_channel} ${rpm_target} ${rpm_site_infix}\n\n    policy_error=fatal\n    if [ \"$INSTALL_K3S_SELINUX_WARN\" = true ] || [ \"${ID_LIKE:-}\" = coreos ] || \n       [ \"${VARIANT_ID:-}\" = coreos ] || [ \"${VARIANT_ID:-}\" = iot ]; then\n        policy_error=warn\n    fi\n\n    if ! $SUDO chcon -u system_u -r object_r -t container_runtime_exec_t ${BIN_DIR}/k3s \u003e/dev/null 2\u003e\u00261; then\n        if $SUDO grep '^\\s*SELINUX=enforcing' /etc/selinux/config \u003e/dev/null 2\u003e\u00261; then\n            $policy_error \"Failed to apply container_runtime_exec_t to ${BIN_DIR}/k3s, ${policy_hint}\"\n        fi\n    elif [ ! -f /usr/share/selinux/packages/k3s.pp ]; then\n        if [ -x /usr/sbin/transactional-update ] || [ \"${ID_LIKE:-}\" = coreos ] || [ \"${VARIANT_ID:-}\" = coreos ] || [ \"${VARIANT_ID:-}\" = iot ]; then\n            warn \"Please reboot your machine to activate the changes and avoid data loss.\"\n        else\n            $policy_error \"Failed to find the k3s-selinux policy, ${policy_hint}\"\n        fi\n    fi\n}\n\ninstall_selinux_rpm() {\n    if [ -r /etc/redhat-release ] || [ -r /etc/centos-release ] || [ -r /etc/oracle-release ] || \n       [ -r /etc/fedora-release ] || [ -r /etc/system-release ] || [ \"${ID_LIKE%%[ ]*}\" = \"suse\" ]; then\n        repodir=/etc/yum.repos.d\n        if [ -d /etc/zypp/repos.d ]; then\n            repodir=/etc/zypp/repos.d\n        fi\n        set +o noglob\n        $SUDO rm -f ${repodir}/rancher-k3s-common*.repo\n        set -o noglob\n        if [ -r /etc/redhat-release ] \u0026\u0026 [ \"${3}\" = \"el7\" ]; then\n            $SUDO yum install -y yum-utils\n            $SUDO yum-config-manager --enable rhel-7-server-extras-rpms\n        fi\n        $SUDO tee ${repodir}/rancher-k3s-common.repo \u003e/dev/null \u003c\u003c EOF\n[rancher-k3s-common-${2}]\nname=Rancher K3s Common (${2})\nbaseurl=https://${1}/k3s/${2}/common/${4}/noarch\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=0\ngpgkey=https://${1}/public.key\nEOF\n        case ${3} in\n        sle)\n            rpm_installer=\"zypper --gpg-auto-import-keys\"\n            if [ \"${TRANSACTIONAL_UPDATE=false}\" != \"true\" ] \u0026\u0026 [ -x /usr/sbin/transactional-update ]; then\n                transactional_update_run=\"transactional-update --no-selfupdate -d run\"\n                rpm_installer=\"transactional-update --no-selfupdate -d run ${rpm_installer}\"\n                : \"${INSTALL_K3S_SKIP_START:=true}\"\n            fi\n            # create the /var/lib/rpm-state in SLE systems to fix the prein selinux macro\n            $SUDO ${transactional_update_run} mkdir -p /var/lib/rpm-state\n            ;;\n        coreos)\n            rpm_installer=\"rpm-ostree --idempotent\"\n            # rpm_install_extra_args=\"--apply-live\"\n            : \"${INSTALL_K3S_SKIP_START:=true}\"\n            ;;\n        *)\n            rpm_installer=\"yum\"\n            ;;\n        esac\n        if [ \"${rpm_installer}\" = \"yum\" ] \u0026\u0026 [ -x /usr/bin/dnf ]; then\n            rpm_installer=dnf\n        fi\n\t    if rpm -q --quiet k3s-selinux; then \n            # remove k3s-selinux module before upgrade to allow container-selinux to upgrade safely\n            if check_available_upgrades container-selinux ${3} \u0026\u0026 check_available_upgrades k3s-selinux ${3}; then\n                MODULE_PRIORITY=$($SUDO semodule --list=full | grep k3s | cut -f1 -d\" \")\n                if [ -n \"${MODULE_PRIORITY}\" ]; then\n                    $SUDO semodule -X $MODULE_PRIORITY -r k3s || true\n                fi\n            fi\n        fi\n        # shellcheck disable=SC2086\n        $SUDO ${rpm_installer} install -y \"k3s-selinux\"\n    fi\n    return\n}\n\ncheck_available_upgrades() {\n    set +e\n    case ${2} in\n        sle)\n            available_upgrades=$($SUDO zypper -q -t -s 11 se -s -u --type package $1 | tail -n 1 | grep -v \"No matching\" | awk '{print $3}')\n            ;;\n        coreos)\n            # currently rpm-ostree does not support search functionality https://github.com/coreos/rpm-ostree/issues/1877\n            ;;\n        *)\n            available_upgrades=$($SUDO yum -q --refresh list $1 --upgrades | tail -n 1 | awk '{print $2}')\n            ;;\n    esac\n    set -e\n    if [ -n \"${available_upgrades}\" ]; then\n        return 0\n    fi\n    return 1\n}\n# --- download and verify k3s ---\ndownload_and_verify() {\n    if can_skip_download_binary; then\n       info 'Skipping k3s download and verify'\n       verify_k3s_is_executable\n       return\n    fi\n\n    setup_verify_arch\n    verify_downloader curl || verify_downloader wget || fatal 'Can not find curl or wget for downloading files'\n    setup_tmp\n    get_release_version\n    download_hash\n\n    if installed_hash_matches; then\n        info 'Skipping binary downloaded, installed k3s matches hash'\n        return\n    fi\n\n    download_binary\n    verify_binary\n    setup_binary\n}\n\n# --- add additional utility links ---\ncreate_symlinks() {\n    [ \"${INSTALL_K3S_BIN_DIR_READ_ONLY}\" = true ] \u0026\u0026 return\n    [ \"${INSTALL_K3S_SYMLINK}\" = skip ] \u0026\u0026 return\n\n    for cmd in kubectl crictl ctr; do\n        if [ ! -e ${BIN_DIR}/${cmd} ] || [ \"${INSTALL_K3S_SYMLINK}\" = force ]; then\n            which_cmd=$(command -v ${cmd} 2\u003e/dev/null || true)\n            if [ -z \"${which_cmd}\" ] || [ \"${INSTALL_K3S_SYMLINK}\" = force ]; then\n                info \"Creating ${BIN_DIR}/${cmd} symlink to k3s\"\n                $SUDO ln -sf k3s ${BIN_DIR}/${cmd}\n            else\n                info \"Skipping ${BIN_DIR}/${cmd} symlink to k3s, command exists in PATH at ${which_cmd}\"\n            fi\n        else\n            info \"Skipping ${BIN_DIR}/${cmd} symlink to k3s, already exists\"\n        fi\n    done\n}\n\n# --- create killall script ---\ncreate_killall() {\n    [ \"${INSTALL_K3S_BIN_DIR_READ_ONLY}\" = true ] \u0026\u0026 return\n    info \"Creating killall script ${KILLALL_K3S_SH}\"\n    $SUDO tee ${KILLALL_K3S_SH} \u003e/dev/null \u003c\u003c \\EOF\n#!/bin/sh\n[ $(id -u) -eq 0 ] || exec sudo $0 $@\n\nK3S_DATA_DIR=${K3S_DATA_DIR:-/var/lib/rancher/k3s}\n\nfor bin in ${K3S_DATA_DIR}/data/**/bin/; do\n    [ -d $bin ] \u0026\u0026 export PATH=$PATH:$bin:$bin/aux\ndone\n\nset -x\n\nfor service in /etc/systemd/system/k3s*.service; do\n    [ -s $service ] \u0026\u0026 systemctl stop $(basename $service)\ndone\n\nfor service in /etc/init.d/k3s*; do\n    [ -x $service ] \u0026\u0026 $service stop\ndone\n\npschildren() {\n    ps -e -o ppid= -o pid= | \\\n    sed -e 's/^\\s*//g; s/\\s\\s*/\\t/g;' | \\\n    grep -w \"^$1\" | \\\n    cut -f2\n}\n\npstree() {\n    for pid in $@; do\n        echo $pid\n        for child in $(pschildren $pid); do\n            pstree $child\n        done\n    done\n}\n\nkilltree() {\n    kill -9 $(\n        { set +x; } 2\u003e/dev/null;\n        pstree $@;\n        set -x;\n    ) 2\u003e/dev/null\n}\n\nremove_interfaces() {\n    # Delete network interface(s) that match 'master cni0'\n    ip link show 2\u003e/dev/null | grep 'master cni0' | while read ignore iface ignore; do\n        iface=${iface%%@*}\n        [ -z \"$iface\" ] || ip link delete $iface\n    done\n\n    # Delete cni related interfaces\n    ip link delete cni0\n    ip link delete flannel.1\n    ip link delete flannel-v6.1\n    ip link delete kube-ipvs0\n    ip link delete flannel-wg\n    ip link delete flannel-wg-v6\n\n    # Restart tailscale\n    if [ -n \"$(command -v tailscale)\" ]; then\n        tailscale set --advertise-routes=\n    fi\n}\n\ngetshims() {\n    ps -e -o pid= -o args= | sed -e 's/^ *//; s/\\s\\s*/\\t/;' | grep -w \"${K3S_DATA_DIR}\"'/data/[^/]*/bin/containerd-shim' | cut -f1\n}\n\nkilltree $({ set +x; } 2\u003e/dev/null; getshims; set -x)\n\ndo_unmount_and_remove() {\n    set +x\n    while read -r _ path _; do\n        case \"$path\" in $1*) echo \"$path\" ;; esac\n    done \u003c /proc/self/mounts | sort -r | xargs -r -t -n 1 sh -c 'umount -f \"$0\" \u0026\u0026 rm -rf \"$0\"'\n    set -x\n}\n\ndo_unmount_and_remove '/run/k3s'\ndo_unmount_and_remove '/var/lib/kubelet/pods'\ndo_unmount_and_remove '/var/lib/kubelet/plugins'\ndo_unmount_and_remove '/run/netns/cni-'\n\n# Remove CNI namespaces\nip netns show 2\u003e/dev/null | grep cni- | xargs -r -t -n 1 ip netns delete\n\nremove_interfaces\n\nrm -rf /var/lib/cni/\niptables-save | grep -v KUBE- | grep -v CNI- | grep -iv flannel | iptables-restore\nip6tables-save | grep -v KUBE- | grep -v CNI- | grep -iv flannel | ip6tables-restore\nEOF\n    $SUDO chmod 755 ${KILLALL_K3S_SH}\n    $SUDO chown root:root ${KILLALL_K3S_SH}\n}\n\n# --- create uninstall script ---\ncreate_uninstall() {\n    [ \"${INSTALL_K3S_BIN_DIR_READ_ONLY}\" = true ] \u0026\u0026 return\n    info \"Creating uninstall script ${UNINSTALL_K3S_SH}\"\n    $SUDO tee ${UNINSTALL_K3S_SH} \u003e/dev/null \u003c\u003c EOF\n#!/bin/sh\nset -x\n[ \\$(id -u) -eq 0 ] || exec sudo \\$0 \\$@\n\nK3S_DATA_DIR=\\${K3S_DATA_DIR:-/var/lib/rancher/k3s}\n\n${KILLALL_K3S_SH}\n\nif command -v systemctl; then\n    systemctl disable ${SYSTEM_NAME}\n    systemctl reset-failed ${SYSTEM_NAME}\n    systemctl daemon-reload\nfi\nif command -v rc-update; then\n    rc-update delete ${SYSTEM_NAME} default\nfi\n\nrm -f ${FILE_K3S_SERVICE}\nrm -f ${FILE_K3S_ENV}\n\nremove_uninstall() {\n    rm -f ${UNINSTALL_K3S_SH}\n}\ntrap remove_uninstall EXIT\n\nif (ls ${SYSTEMD_DIR}/k3s*.service || ls /etc/init.d/k3s*) \u003e/dev/null 2\u003e\u00261; then\n    set +x; echo 'Additional k3s services installed, skipping uninstall of k3s'; set -x\n    exit\nfi\n\nfor cmd in kubectl crictl ctr; do\n    if [ -L ${BIN_DIR}/\\$cmd ]; then\n        rm -f ${BIN_DIR}/\\$cmd\n    fi\ndone\n\nclean_mounted_directory() {\n    if ! grep -q \" \\$1\" /proc/mounts; then\n        rm -rf \"\\$1\"\n\treturn 0\n    fi\n\n    for path in \"\\$1\"/*; do\n        if [ -d \"\\$path\" ]; then\n            if grep -q \" \\$path\" /proc/mounts; then\n                clean_mounted_directory \"\\$path\"\n            else\n                rm -rf \"\\$path\"\n            fi\n        else\n            rm \"\\$path\"\n        fi\n     done\n}\n\nrm -rf /etc/rancher/k3s\nrm -rf /run/k3s\nrm -rf /run/flannel\nclean_mounted_directory \\${K3S_DATA_DIR}\nrm -rf /var/lib/kubelet\nrm -f ${BIN_DIR}/k3s\nrm -f ${KILLALL_K3S_SH}\n\nif type yum \u003e/dev/null 2\u003e\u00261; then\n    yum remove -y k3s-selinux\n    rm -f /etc/yum.repos.d/rancher-k3s-common*.repo\nelif type rpm-ostree \u003e/dev/null 2\u003e\u00261; then\n    rpm-ostree uninstall k3s-selinux\n    rm -f /etc/yum.repos.d/rancher-k3s-common*.repo\nelif type zypper \u003e/dev/null 2\u003e\u00261; then\n    uninstall_cmd=\"zypper remove -y k3s-selinux\"\n    if [ \"\\${TRANSACTIONAL_UPDATE=false}\" != \"true\" ] \u0026\u0026 [ -x /usr/sbin/transactional-update ]; then\n        uninstall_cmd=\"transactional-update --no-selfupdate -d run \\$uninstall_cmd\"\n    fi\n    $SUDO \\$uninstall_cmd\n    rm -f /etc/zypp/repos.d/rancher-k3s-common*.repo\nfi\nEOF\n    $SUDO chmod 755 ${UNINSTALL_K3S_SH}\n    $SUDO chown root:root ${UNINSTALL_K3S_SH}\n}\n\n# --- disable current service if loaded --\nsystemd_disable() {\n    $SUDO systemctl disable ${SYSTEM_NAME} \u003e/dev/null 2\u003e\u00261 || true\n    $SUDO rm -f /etc/systemd/system/${SERVICE_K3S} || true\n    $SUDO rm -f /etc/systemd/system/${SERVICE_K3S}.env || true\n}\n\n# --- capture current env and create file containing k3s_ variables ---\ncreate_env_file() {\n    info \"env: Creating environment file ${FILE_K3S_ENV}\"\n    $SUDO touch ${FILE_K3S_ENV}\n    $SUDO chmod 0600 ${FILE_K3S_ENV}\n    sh -c export | while read x v; do echo $v; done | grep -E '^(K3S|CONTAINERD)_' | $SUDO tee ${FILE_K3S_ENV} \u003e/dev/null\n    sh -c export | while read x v; do echo $v; done | grep -Ei '^(NO|HTTP|HTTPS)_PROXY' | $SUDO tee -a ${FILE_K3S_ENV} \u003e/dev/null\n}\n\n# --- write systemd service file ---\ncreate_systemd_service_file() {\n    info \"systemd: Creating service file ${FILE_K3S_SERVICE}\"\n    $SUDO tee ${FILE_K3S_SERVICE} \u003e/dev/null \u003c\u003c EOF\n[Unit]\nDescription=Lightweight Kubernetes\nDocumentation=https://k3s.io\nWants=network-online.target\nAfter=network-online.target\n\n[Install]\nWantedBy=multi-user.target\n\n[Service]\nType=${SYSTEMD_TYPE}\nEnvironmentFile=-/etc/default/%N\nEnvironmentFile=-/etc/sysconfig/%N\nEnvironmentFile=-${FILE_K3S_ENV}\nKillMode=process\nDelegate=yes\n# Having non-zero Limit*s causes performance problems due to accounting overhead\n# in the kernel. We recommend using cgroups to do container-local accounting.\nLimitNOFILE=1048576\nLimitNPROC=infinity\nLimitCORE=infinity\nTasksMax=infinity\nTimeoutStartSec=0\nRestart=always\nRestartSec=5s\nExecStartPre=/bin/sh -xc '! /usr/bin/systemctl is-enabled --quiet nm-cloud-setup.service 2\u003e/dev/null'\nExecStartPre=-/sbin/modprobe br_netfilter\nExecStartPre=-/sbin/modprobe overlay\nExecStart=${BIN_DIR}/k3s \\\\\n    ${CMD_K3S_EXEC}\n\nEOF\n}\n\n# --- write openrc service file ---\ncreate_openrc_service_file() {\n    LOG_FILE=/var/log/${SYSTEM_NAME}.log\n\n    info \"openrc: Creating service file ${FILE_K3S_SERVICE}\"\n    $SUDO tee ${FILE_K3S_SERVICE} \u003e/dev/null \u003c\u003c EOF\n#!/sbin/openrc-run\n\ndepend() {\n    after network-online\n    want cgroups\n}\n\nstart_pre() {\n    rm -f /tmp/k3s.*\n}\n\nsupervisor=supervise-daemon\nname=${SYSTEM_NAME}\ncommand=\"${BIN_DIR}/k3s\"\ncommand_args=\"$(escape_dq \"${CMD_K3S_EXEC}\")\n    \u003e\u003e${LOG_FILE} 2\u003e\u00261\"\n\noutput_log=${LOG_FILE}\nerror_log=${LOG_FILE}\n\npidfile=\"/var/run/${SYSTEM_NAME}.pid\"\nrespawn_delay=5\nrespawn_max=0\n\nset -o allexport\nif [ -f /etc/environment ]; then . /etc/environment; fi\nif [ -f ${FILE_K3S_ENV} ]; then . ${FILE_K3S_ENV}; fi\nset +o allexport\nEOF\n    $SUDO chmod 0755 ${FILE_K3S_SERVICE}\n\n    $SUDO tee /etc/logrotate.d/${SYSTEM_NAME} \u003e/dev/null \u003c\u003c EOF\n${LOG_FILE} {\n\tmissingok\n\tnotifempty\n\tcopytruncate\n}\nEOF\n}\n\n# --- write systemd or openrc service file ---\ncreate_service_file() {\n    [ \"${HAS_SYSTEMD}\" = true ] \u0026\u0026 create_systemd_service_file \u0026\u0026 restore_systemd_service_file_context\n    [ \"${HAS_OPENRC}\" = true ] \u0026\u0026 create_openrc_service_file\n    return 0\n}\n\nrestore_systemd_service_file_context() {\n    $SUDO restorecon -R -i ${FILE_K3S_SERVICE} 2\u003e/dev/null || true\n    $SUDO restorecon -R -i ${FILE_K3S_ENV} 2\u003e/dev/null || true\n}\n\n# --- get hashes of the current k3s bin and service files\nget_installed_hashes() {\n    $SUDO sha256sum ${BIN_DIR}/k3s ${FILE_K3S_SERVICE} ${FILE_K3S_ENV} 2\u003e\u00261 || true\n}\n\n# --- enable and start systemd service ---\nsystemd_enable() {\n    info \"systemd: Enabling ${SYSTEM_NAME} unit\"\n    $SUDO systemctl enable ${FILE_K3S_SERVICE} \u003e/dev/null\n    $SUDO systemctl daemon-reload \u003e/dev/null\n}\n\nsystemd_start() {\n    info \"systemd: Starting ${SYSTEM_NAME}\"\n    $SUDO systemctl restart ${SYSTEM_NAME}\n}\n\n# --- enable and start openrc service ---\nopenrc_enable() {\n    info \"openrc: Enabling ${SYSTEM_NAME} service for default runlevel\"\n    $SUDO rc-update add ${SYSTEM_NAME} default \u003e/dev/null\n}\n\nopenrc_start() {\n    info \"openrc: Starting ${SYSTEM_NAME}\"\n    $SUDO ${FILE_K3S_SERVICE} restart\n}\n\nhas_working_xtables() {\n    if $SUDO sh -c \"command -v \\\"$1-save\\\"\" 1\u003e /dev/null \u0026\u0026 $SUDO sh -c \"command -v \\\"$1-restore\\\"\" 1\u003e /dev/null; then\n        if $SUDO $1-save 2\u003e/dev/null | grep -q '^-A CNI-HOSTPORT-MASQ -j MASQUERADE$'; then\n            warn \"Host $1-save/$1-restore tools are incompatible with existing rules\"\n        else\n            return 0\n        fi\n    else\n        info \"Host $1-save/$1-restore tools not found\"\n    fi\n    return 1\n}\n\n# --- startup systemd or openrc service ---\nservice_enable_and_start() {\n    if [ -f \"/proc/cgroups\" ] \u0026\u0026 [ \"$(grep memory /proc/cgroups | while read -r n n n enabled; do echo $enabled; done)\" -eq 0 ];\n    then\n        info 'Failed to find memory cgroup, you may need to add \"cgroup_memory=1 cgroup_enable=memory\" to your linux cmdline (/boot/cmdline.txt on a Raspberry Pi)'\n    fi\n\n    [ \"${INSTALL_K3S_SKIP_ENABLE}\" = true ] \u0026\u0026 return\n\n    [ \"${HAS_SYSTEMD}\" = true ] \u0026\u0026 systemd_enable\n    [ \"${HAS_OPENRC}\" = true ] \u0026\u0026 openrc_enable\n\n    [ \"${INSTALL_K3S_SKIP_START}\" = true ] \u0026\u0026 return\n\n    POST_INSTALL_HASHES=$(get_installed_hashes)\n    if [ \"${PRE_INSTALL_HASHES}\" = \"${POST_INSTALL_HASHES}\" ] \u0026\u0026 [ \"${INSTALL_K3S_FORCE_RESTART}\" != true ]; then\n        info 'No change detected so skipping service start'\n        return\n    fi\n\n    for XTABLES in iptables ip6tables; do\n        if has_working_xtables ${XTABLES}; then\n            $SUDO ${XTABLES}-save 2\u003e/dev/null | grep -v KUBE- | grep -iv flannel | $SUDO ${XTABLES}-restore\n        fi\n    done\n\n    [ \"${HAS_SYSTEMD}\" = true ] \u0026\u0026 systemd_start\n    [ \"${HAS_OPENRC}\" = true ] \u0026\u0026 openrc_start\n    return 0\n}\n\n# --- re-evaluate args to include env command ---\neval set -- $(escape \"${INSTALL_K3S_EXEC}\") $(quote \"$@\")\n\n# --- run the install process --\n{\n    verify_system\n    setup_env \"$@\"\n    download_and_verify\n    setup_selinux\n    create_symlinks\n    create_killall\n    create_uninstall\n    systemd_disable\n    create_env_file\n    create_service_file\n    service_enable_and_start\n}\n\n",
            "response_body_base64": "",
            "response_headers": {
              "Accept-Ranges": "bytes",
              "Access-Control-Allow-Origin": "*",
              "Cache-Control": "max-age=300",
              "Content-Security-Policy": "default-src 'none'; style-src 'unsafe-inline'; sandbox",
              "Content-Type": "text/plain; charset=utf-8",
              "Cross-Origin-Resource-Policy": "cross-origin",
              "Date": "Sat, 07 Dec 2024 00:29:30 GMT",
              "Etag": "W/\"f4f948b7beaa53125eb5e09834080762a4a691dd7d71adb96bc8b035239fb100\"",
              "Expires": "Sat, 07 Dec 2024 00:34:30 GMT",
              "Source-Age": "0",
              "Strict-Transport-Security": "max-age=31536000",
              "Vary": "Authorization,Accept-Encoding,Origin",
              "Via": "1.1 varnish",
              "X-Cache": "MISS",
              "X-Cache-Hits": "0",
              "X-Content-Type-Options": "nosniff",
              "X-Fastly-Request-Id": "dd98282e11f3bf68524fdb263dc72501c75de094",
              "X-Frame-Options": "deny",
              "X-Github-Request-Id": "B936:10EB97:6015A:7C45A:675396E9",
              "X-Served-By": "cache-nrt-rjtf7700075-NRT",
              "X-Timer": "S1733531370.232660,VS0,VE298",
              "X-Xss-Protection": "1; mode=block"
            },
            "retry": null,
            "status_code": 200,
            "url": "https://raw.githubusercontent.com/rancher/k3s/v1.31.2+k3s1/install.sh"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.k3s.module.k3s",
      "mode": "data",
      "type": "http",
      "name": "k3s_version",
      "provider": "provider[\"registry.terraform.io/hashicorp/http\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "body": "{\"type\":\"collection\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels\"},\"actions\":{},\"resourceType\":\"channel\",\"data\":[{\"id\":\"stable\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/stable\"},\"name\":\"stable\",\"latest\":\"v1.30.6+k3s1\"},{\"id\":\"latest\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/latest\"},\"name\":\"latest\",\"latest\":\"v1.31.2+k3s1\",\"latestRegexp\":\".*\",\"excludeRegexp\":\"(^[^+]+-|v1\\\\.25\\\\.5\\\\+k3s1|v1\\\\.26\\\\.0\\\\+k3s1)\"},{\"id\":\"testing\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/testing\"},\"name\":\"testing\",\"latest\":\"v1.18.2-rc3+k3s1\",\"latestRegexp\":\"-(alpha|beta|rc)\"},{\"id\":\"v1.16\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.16\"},\"name\":\"v1.16\",\"latest\":\"v1.16.15+k3s1\",\"latestRegexp\":\"v1\\\\.16\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.16-testing\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.16-testing\"},\"name\":\"v1.16-testing\",\"latestRegexp\":\"v1\\\\.16\\\\.[0-9]*-(alpha|beta|rc)\"},{\"id\":\"v1.17\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.17\"},\"name\":\"v1.17\",\"latest\":\"v1.17.17+k3s1\",\"latestRegexp\":\"v1\\\\.17\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.17-testing\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.17-testing\"},\"name\":\"v1.17-testing\",\"latestRegexp\":\"v1\\\\.17\\\\.[0-9]*-(alpha|beta|rc)\"},{\"id\":\"v1.18\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.18\"},\"name\":\"v1.18\",\"latest\":\"v1.18.20+k3s1\",\"latestRegexp\":\"v1\\\\.18\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.18-testing\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.18-testing\"},\"name\":\"v1.18-testing\",\"latest\":\"v1.18.2-rc3+k3s1\",\"latestRegexp\":\"v1\\\\.18\\\\.[0-9]*-(alpha|beta|rc)\"},{\"id\":\"v1.19\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.19\"},\"name\":\"v1.19\",\"latest\":\"v1.19.16+k3s1\",\"latestRegexp\":\"v1\\\\.19\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.20\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.20\"},\"name\":\"v1.20\",\"latest\":\"v1.20.15+k3s1\",\"latestRegexp\":\"v1\\\\.20\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.21\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.21\"},\"name\":\"v1.21\",\"latest\":\"v1.21.14+k3s1\",\"latestRegexp\":\"v1\\\\.21\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.22\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.22\"},\"name\":\"v1.22\",\"latest\":\"v1.22.17+k3s1\",\"latestRegexp\":\"v1\\\\.22\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.23\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.23\"},\"name\":\"v1.23\",\"latest\":\"v1.23.17+k3s1\",\"latestRegexp\":\"v1\\\\.23\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.24\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.24\"},\"name\":\"v1.24\",\"latest\":\"v1.24.17+k3s1\",\"latestRegexp\":\"v1\\\\.24\\\\..*\",\"excludeRegexp\":\"(^[^+]+-|v1\\\\.24\\\\.9\\\\+k3s1)\"},{\"id\":\"v1.25\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.25\"},\"name\":\"v1.25\",\"latest\":\"v1.25.16+k3s4\",\"latestRegexp\":\"v1\\\\.25\\\\..*\",\"excludeRegexp\":\"(^[^+]+-|v1\\\\.25\\\\.5\\\\+k3s1)\"},{\"id\":\"v1.26\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.26\"},\"name\":\"v1.26\",\"latest\":\"v1.26.15+k3s1\",\"latestRegexp\":\"v1\\\\.26\\\\..*\",\"excludeRegexp\":\"(^[^+]+-|v1\\\\.26\\\\.0\\\\+k3s1)\"},{\"id\":\"v1.27\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.27\"},\"name\":\"v1.27\",\"latest\":\"v1.27.16+k3s1\",\"latestRegexp\":\"v1\\\\.27\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.28\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.28\"},\"name\":\"v1.28\",\"latest\":\"v1.28.15+k3s1\",\"latestRegexp\":\"v1\\\\.28\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.29\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.29\"},\"name\":\"v1.29\",\"latest\":\"v1.29.10+k3s1\",\"latestRegexp\":\"v1\\\\.29\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.30\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.30\"},\"name\":\"v1.30\",\"latest\":\"v1.30.6+k3s1\",\"latestRegexp\":\"v1\\\\.30\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.31\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.31\"},\"name\":\"v1.31\",\"latest\":\"v1.31.2+k3s1\",\"latestRegexp\":\"v1\\\\.31\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"}]}\n",
            "ca_cert_pem": null,
            "id": "https://update.k3s.io/v1-release/channels",
            "insecure": null,
            "method": null,
            "request_body": null,
            "request_headers": null,
            "request_timeout_ms": null,
            "response_body": "{\"type\":\"collection\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels\"},\"actions\":{},\"resourceType\":\"channel\",\"data\":[{\"id\":\"stable\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/stable\"},\"name\":\"stable\",\"latest\":\"v1.30.6+k3s1\"},{\"id\":\"latest\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/latest\"},\"name\":\"latest\",\"latest\":\"v1.31.2+k3s1\",\"latestRegexp\":\".*\",\"excludeRegexp\":\"(^[^+]+-|v1\\\\.25\\\\.5\\\\+k3s1|v1\\\\.26\\\\.0\\\\+k3s1)\"},{\"id\":\"testing\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/testing\"},\"name\":\"testing\",\"latest\":\"v1.18.2-rc3+k3s1\",\"latestRegexp\":\"-(alpha|beta|rc)\"},{\"id\":\"v1.16\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.16\"},\"name\":\"v1.16\",\"latest\":\"v1.16.15+k3s1\",\"latestRegexp\":\"v1\\\\.16\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.16-testing\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.16-testing\"},\"name\":\"v1.16-testing\",\"latestRegexp\":\"v1\\\\.16\\\\.[0-9]*-(alpha|beta|rc)\"},{\"id\":\"v1.17\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.17\"},\"name\":\"v1.17\",\"latest\":\"v1.17.17+k3s1\",\"latestRegexp\":\"v1\\\\.17\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.17-testing\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.17-testing\"},\"name\":\"v1.17-testing\",\"latestRegexp\":\"v1\\\\.17\\\\.[0-9]*-(alpha|beta|rc)\"},{\"id\":\"v1.18\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.18\"},\"name\":\"v1.18\",\"latest\":\"v1.18.20+k3s1\",\"latestRegexp\":\"v1\\\\.18\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.18-testing\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.18-testing\"},\"name\":\"v1.18-testing\",\"latest\":\"v1.18.2-rc3+k3s1\",\"latestRegexp\":\"v1\\\\.18\\\\.[0-9]*-(alpha|beta|rc)\"},{\"id\":\"v1.19\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.19\"},\"name\":\"v1.19\",\"latest\":\"v1.19.16+k3s1\",\"latestRegexp\":\"v1\\\\.19\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.20\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.20\"},\"name\":\"v1.20\",\"latest\":\"v1.20.15+k3s1\",\"latestRegexp\":\"v1\\\\.20\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.21\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.21\"},\"name\":\"v1.21\",\"latest\":\"v1.21.14+k3s1\",\"latestRegexp\":\"v1\\\\.21\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.22\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.22\"},\"name\":\"v1.22\",\"latest\":\"v1.22.17+k3s1\",\"latestRegexp\":\"v1\\\\.22\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.23\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.23\"},\"name\":\"v1.23\",\"latest\":\"v1.23.17+k3s1\",\"latestRegexp\":\"v1\\\\.23\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.24\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.24\"},\"name\":\"v1.24\",\"latest\":\"v1.24.17+k3s1\",\"latestRegexp\":\"v1\\\\.24\\\\..*\",\"excludeRegexp\":\"(^[^+]+-|v1\\\\.24\\\\.9\\\\+k3s1)\"},{\"id\":\"v1.25\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.25\"},\"name\":\"v1.25\",\"latest\":\"v1.25.16+k3s4\",\"latestRegexp\":\"v1\\\\.25\\\\..*\",\"excludeRegexp\":\"(^[^+]+-|v1\\\\.25\\\\.5\\\\+k3s1)\"},{\"id\":\"v1.26\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.26\"},\"name\":\"v1.26\",\"latest\":\"v1.26.15+k3s1\",\"latestRegexp\":\"v1\\\\.26\\\\..*\",\"excludeRegexp\":\"(^[^+]+-|v1\\\\.26\\\\.0\\\\+k3s1)\"},{\"id\":\"v1.27\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.27\"},\"name\":\"v1.27\",\"latest\":\"v1.27.16+k3s1\",\"latestRegexp\":\"v1\\\\.27\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.28\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.28\"},\"name\":\"v1.28\",\"latest\":\"v1.28.15+k3s1\",\"latestRegexp\":\"v1\\\\.28\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.29\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.29\"},\"name\":\"v1.29\",\"latest\":\"v1.29.10+k3s1\",\"latestRegexp\":\"v1\\\\.29\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.30\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.30\"},\"name\":\"v1.30\",\"latest\":\"v1.30.6+k3s1\",\"latestRegexp\":\"v1\\\\.30\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.31\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.31\"},\"name\":\"v1.31\",\"latest\":\"v1.31.2+k3s1\",\"latestRegexp\":\"v1\\\\.31\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"}]}\n",
            "response_body_base64": "eyJ0eXBlIjoiY29sbGVjdGlvbiIsImxpbmtzIjp7InNlbGYiOiJodHRwczovL3VwZGF0ZS5rM3MuaW8vdjEtcmVsZWFzZS9jaGFubmVscyJ9LCJhY3Rpb25zIjp7fSwicmVzb3VyY2VUeXBlIjoiY2hhbm5lbCIsImRhdGEiOlt7ImlkIjoic3RhYmxlIiwidHlwZSI6ImNoYW5uZWwiLCJsaW5rcyI6eyJzZWxmIjoiaHR0cHM6Ly91cGRhdGUuazNzLmlvL3YxLXJlbGVhc2UvY2hhbm5lbHMvc3RhYmxlIn0sIm5hbWUiOiJzdGFibGUiLCJsYXRlc3QiOiJ2MS4zMC42K2szczEifSx7ImlkIjoibGF0ZXN0IiwidHlwZSI6ImNoYW5uZWwiLCJsaW5rcyI6eyJzZWxmIjoiaHR0cHM6Ly91cGRhdGUuazNzLmlvL3YxLXJlbGVhc2UvY2hhbm5lbHMvbGF0ZXN0In0sIm5hbWUiOiJsYXRlc3QiLCJsYXRlc3QiOiJ2MS4zMS4yK2szczEiLCJsYXRlc3RSZWdleHAiOiIuKiIsImV4Y2x1ZGVSZWdleHAiOiIoXlteK10rLXx2MVxcLjI1XFwuNVxcK2szczF8djFcXC4yNlxcLjBcXCtrM3MxKSJ9LHsiaWQiOiJ0ZXN0aW5nIiwidHlwZSI6ImNoYW5uZWwiLCJsaW5rcyI6eyJzZWxmIjoiaHR0cHM6Ly91cGRhdGUuazNzLmlvL3YxLXJlbGVhc2UvY2hhbm5lbHMvdGVzdGluZyJ9LCJuYW1lIjoidGVzdGluZyIsImxhdGVzdCI6InYxLjE4LjItcmMzK2szczEiLCJsYXRlc3RSZWdleHAiOiItKGFscGhhfGJldGF8cmMpIn0seyJpZCI6InYxLjE2IiwidHlwZSI6ImNoYW5uZWwiLCJsaW5rcyI6eyJzZWxmIjoiaHR0cHM6Ly91cGRhdGUuazNzLmlvL3YxLXJlbGVhc2UvY2hhbm5lbHMvdjEuMTYifSwibmFtZSI6InYxLjE2IiwibGF0ZXN0IjoidjEuMTYuMTUrazNzMSIsImxhdGVzdFJlZ2V4cCI6InYxXFwuMTZcXC4uKiIsImV4Y2x1ZGVSZWdleHAiOiJeW14rXSstIn0seyJpZCI6InYxLjE2LXRlc3RpbmciLCJ0eXBlIjoiY2hhbm5lbCIsImxpbmtzIjp7InNlbGYiOiJodHRwczovL3VwZGF0ZS5rM3MuaW8vdjEtcmVsZWFzZS9jaGFubmVscy92MS4xNi10ZXN0aW5nIn0sIm5hbWUiOiJ2MS4xNi10ZXN0aW5nIiwibGF0ZXN0UmVnZXhwIjoidjFcXC4xNlxcLlswLTldKi0oYWxwaGF8YmV0YXxyYykifSx7ImlkIjoidjEuMTciLCJ0eXBlIjoiY2hhbm5lbCIsImxpbmtzIjp7InNlbGYiOiJodHRwczovL3VwZGF0ZS5rM3MuaW8vdjEtcmVsZWFzZS9jaGFubmVscy92MS4xNyJ9LCJuYW1lIjoidjEuMTciLCJsYXRlc3QiOiJ2MS4xNy4xNytrM3MxIiwibGF0ZXN0UmVnZXhwIjoidjFcXC4xN1xcLi4qIiwiZXhjbHVkZVJlZ2V4cCI6Il5bXitdKy0ifSx7ImlkIjoidjEuMTctdGVzdGluZyIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjE3LXRlc3RpbmcifSwibmFtZSI6InYxLjE3LXRlc3RpbmciLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjE3XFwuWzAtOV0qLShhbHBoYXxiZXRhfHJjKSJ9LHsiaWQiOiJ2MS4xOCIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjE4In0sIm5hbWUiOiJ2MS4xOCIsImxhdGVzdCI6InYxLjE4LjIwK2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjE4XFwuLioiLCJleGNsdWRlUmVnZXhwIjoiXlteK10rLSJ9LHsiaWQiOiJ2MS4xOC10ZXN0aW5nIiwidHlwZSI6ImNoYW5uZWwiLCJsaW5rcyI6eyJzZWxmIjoiaHR0cHM6Ly91cGRhdGUuazNzLmlvL3YxLXJlbGVhc2UvY2hhbm5lbHMvdjEuMTgtdGVzdGluZyJ9LCJuYW1lIjoidjEuMTgtdGVzdGluZyIsImxhdGVzdCI6InYxLjE4LjItcmMzK2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjE4XFwuWzAtOV0qLShhbHBoYXxiZXRhfHJjKSJ9LHsiaWQiOiJ2MS4xOSIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjE5In0sIm5hbWUiOiJ2MS4xOSIsImxhdGVzdCI6InYxLjE5LjE2K2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjE5XFwuLioiLCJleGNsdWRlUmVnZXhwIjoiXlteK10rLSJ9LHsiaWQiOiJ2MS4yMCIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjIwIn0sIm5hbWUiOiJ2MS4yMCIsImxhdGVzdCI6InYxLjIwLjE1K2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjIwXFwuLioiLCJleGNsdWRlUmVnZXhwIjoiXlteK10rLSJ9LHsiaWQiOiJ2MS4yMSIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjIxIn0sIm5hbWUiOiJ2MS4yMSIsImxhdGVzdCI6InYxLjIxLjE0K2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjIxXFwuLioiLCJleGNsdWRlUmVnZXhwIjoiXlteK10rLSJ9LHsiaWQiOiJ2MS4yMiIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjIyIn0sIm5hbWUiOiJ2MS4yMiIsImxhdGVzdCI6InYxLjIyLjE3K2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjIyXFwuLioiLCJleGNsdWRlUmVnZXhwIjoiXlteK10rLSJ9LHsiaWQiOiJ2MS4yMyIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjIzIn0sIm5hbWUiOiJ2MS4yMyIsImxhdGVzdCI6InYxLjIzLjE3K2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjIzXFwuLioiLCJleGNsdWRlUmVnZXhwIjoiXlteK10rLSJ9LHsiaWQiOiJ2MS4yNCIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjI0In0sIm5hbWUiOiJ2MS4yNCIsImxhdGVzdCI6InYxLjI0LjE3K2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjI0XFwuLioiLCJleGNsdWRlUmVnZXhwIjoiKF5bXitdKy18djFcXC4yNFxcLjlcXCtrM3MxKSJ9LHsiaWQiOiJ2MS4yNSIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjI1In0sIm5hbWUiOiJ2MS4yNSIsImxhdGVzdCI6InYxLjI1LjE2K2szczQiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjI1XFwuLioiLCJleGNsdWRlUmVnZXhwIjoiKF5bXitdKy18djFcXC4yNVxcLjVcXCtrM3MxKSJ9LHsiaWQiOiJ2MS4yNiIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjI2In0sIm5hbWUiOiJ2MS4yNiIsImxhdGVzdCI6InYxLjI2LjE1K2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjI2XFwuLioiLCJleGNsdWRlUmVnZXhwIjoiKF5bXitdKy18djFcXC4yNlxcLjBcXCtrM3MxKSJ9LHsiaWQiOiJ2MS4yNyIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjI3In0sIm5hbWUiOiJ2MS4yNyIsImxhdGVzdCI6InYxLjI3LjE2K2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjI3XFwuLioiLCJleGNsdWRlUmVnZXhwIjoiXlteK10rLSJ9LHsiaWQiOiJ2MS4yOCIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjI4In0sIm5hbWUiOiJ2MS4yOCIsImxhdGVzdCI6InYxLjI4LjE1K2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjI4XFwuLioiLCJleGNsdWRlUmVnZXhwIjoiXlteK10rLSJ9LHsiaWQiOiJ2MS4yOSIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjI5In0sIm5hbWUiOiJ2MS4yOSIsImxhdGVzdCI6InYxLjI5LjEwK2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjI5XFwuLioiLCJleGNsdWRlUmVnZXhwIjoiXlteK10rLSJ9LHsiaWQiOiJ2MS4zMCIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjMwIn0sIm5hbWUiOiJ2MS4zMCIsImxhdGVzdCI6InYxLjMwLjYrazNzMSIsImxhdGVzdFJlZ2V4cCI6InYxXFwuMzBcXC4uKiIsImV4Y2x1ZGVSZWdleHAiOiJeW14rXSstIn0seyJpZCI6InYxLjMxIiwidHlwZSI6ImNoYW5uZWwiLCJsaW5rcyI6eyJzZWxmIjoiaHR0cHM6Ly91cGRhdGUuazNzLmlvL3YxLXJlbGVhc2UvY2hhbm5lbHMvdjEuMzEifSwibmFtZSI6InYxLjMxIiwibGF0ZXN0IjoidjEuMzEuMitrM3MxIiwibGF0ZXN0UmVnZXhwIjoidjFcXC4zMVxcLi4qIiwiZXhjbHVkZVJlZ2V4cCI6Il5bXitdKy0ifV19Cg==",
            "response_headers": {
              "Accept-Ranges": "bytes",
              "Age": "4998",
              "Alt-Svc": "h3=\":443\"; ma=86400",
              "Cache-Control": "max-age=14400",
              "Cf-Cache-Status": "HIT",
              "Cf-Ray": "8ee066d5c8de8b57-HKG",
              "Content-Type": "application/json",
              "Date": "Sat, 07 Dec 2024 00:29:29 GMT",
              "Expires": "Wed 24 Feb 1982 18:42:00 GMT",
              "Last-Modified": "Fri, 06 Dec 2024 22:44:18 GMT",
              "Nel": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}",
              "Report-To": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=WVXnoOmRIuEMDktfHqOXAtdaNSi8ioNhqyH7NO0WMRKNYPHXN79w2t2kEvWFIGFSHGI7eRruxin9O42BdCNoXt1NRC%2FiC8TKcpE1t%2BjecKZbFKCV0VWcs1FKTqls%2FCfe\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
              "Server": "cloudflare",
              "Server-Timing": "cfL4;desc=\"?proto=TCP\u0026rtt=2714\u0026min_rtt=1456\u0026rtt_var=1502\u0026sent=6\u0026recv=8\u0026lost=0\u0026retrans=0\u0026sent_bytes=3161\u0026recv_bytes=504\u0026delivery_rate=2709918\u0026cwnd=253\u0026unsent_bytes=0\u0026cid=db685a5869046417\u0026ts=76\u0026x=0\"",
              "Strict-Transport-Security": "max-age=15552000; includeSubDomains; preload",
              "Vary": "Accept-Encoding",
              "X-Api-Schemas": "https://update.k3s.io/v1-release/schemas",
              "X-Content-Type-Options": "nosniff"
            },
            "retry": null,
            "status_code": 200,
            "url": "https://update.k3s.io/v1-release/channels"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.k3s.module.k3s",
      "mode": "managed",
      "type": "null_resource",
      "name": "k8s_ca_certificates_install",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "2532575677669970936",
            "triggers": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.cvm.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm.data.tencentcloud_images.default",
            "module.cvm.data.tencentcloud_instance_types.default",
            "module.cvm.tencentcloud_instance.ubuntu",
            "module.k3s.module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s.module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "id": "7547118307651322343",
            "triggers": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.cvm.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm.data.tencentcloud_images.default",
            "module.cvm.data.tencentcloud_instance_types.default",
            "module.cvm.tencentcloud_instance.ubuntu",
            "module.k3s.module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s.module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "id": "3108820994270220110",
            "triggers": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.cvm.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm.data.tencentcloud_images.default",
            "module.cvm.data.tencentcloud_instance_types.default",
            "module.cvm.tencentcloud_instance.ubuntu",
            "module.k3s.module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s.module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        },
        {
          "index_key": 3,
          "schema_version": 0,
          "attributes": {
            "id": "8596220799845149057",
            "triggers": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.cvm.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm.data.tencentcloud_images.default",
            "module.cvm.data.tencentcloud_instance_types.default",
            "module.cvm.tencentcloud_instance.ubuntu",
            "module.k3s.module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s.module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        },
        {
          "index_key": 4,
          "schema_version": 0,
          "attributes": {
            "id": "5933496659493244078",
            "triggers": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.cvm.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm.data.tencentcloud_images.default",
            "module.cvm.data.tencentcloud_instance_types.default",
            "module.cvm.tencentcloud_instance.ubuntu",
            "module.k3s.module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s.module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        },
        {
          "index_key": 5,
          "schema_version": 0,
          "attributes": {
            "id": "3361433889593282253",
            "triggers": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.cvm.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm.data.tencentcloud_images.default",
            "module.cvm.data.tencentcloud_instance_types.default",
            "module.cvm.tencentcloud_instance.ubuntu",
            "module.k3s.module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s.module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "module": "module.k3s.module.k3s",
      "mode": "managed",
      "type": "null_resource",
      "name": "kubernetes_ready",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "4759866796929488273",
            "triggers": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.cvm.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm.data.tencentcloud_images.default",
            "module.cvm.data.tencentcloud_instance_types.default",
            "module.cvm.tencentcloud_instance.ubuntu",
            "module.k3s.module.k3s.data.http.k3s_installer",
            "module.k3s.module.k3s.data.http.k3s_version",
            "module.k3s.module.k3s.null_resource.agents_annotation",
            "module.k3s.module.k3s.null_resource.agents_drain",
            "module.k3s.module.k3s.null_resource.agents_install",
            "module.k3s.module.k3s.null_resource.agents_label",
            "module.k3s.module.k3s.null_resource.agents_taint",
            "module.k3s.module.k3s.null_resource.k8s_ca_certificates_install",
            "module.k3s.module.k3s.null_resource.servers_annotation",
            "module.k3s.module.k3s.null_resource.servers_drain",
            "module.k3s.module.k3s.null_resource.servers_install",
            "module.k3s.module.k3s.null_resource.servers_label",
            "module.k3s.module.k3s.null_resource.servers_taint",
            "module.k3s.module.k3s.random_password.k3s_cluster_secret",
            "module.k3s.module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s.module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "module": "module.k3s.module.k3s",
      "mode": "managed",
      "type": "null_resource",
      "name": "servers_drain",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "index_key": "karmada",
          "schema_version": 0,
          "attributes": {
            "id": "8875565742966288299",
            "triggers": {
              "connection_json": "eyJhZ2VudCI6bnVsbCwiYWdlbnRfaWRlbnRpdHkiOm51bGwsImJhc3Rpb25fY2VydGlmaWNhdGUiOm51bGwsImJhc3Rpb25faG9zdCI6bnVsbCwiYmFzdGlvbl9ob3N0X2tleSI6bnVsbCwiYmFzdGlvbl9wYXNzd29yZCI6bnVsbCwiYmFzdGlvbl9wb3J0IjpudWxsLCJiYXN0aW9uX3ByaXZhdGVfa2V5IjpudWxsLCJiYXN0aW9uX3VzZXIiOm51bGwsImNhY2VydCI6bnVsbCwiY2VydGlmaWNhdGUiOm51bGwsImhvc3QiOiI0My4xMzUuNDAuOTkiLCJob3N0X2tleSI6bnVsbCwiaHR0cHMiOm51bGwsImluc2VjdXJlIjpudWxsLCJwYXNzd29yZCI6InF3ZTEyM2V3cSIsInBvcnQiOm51bGwsInByaXZhdGVfa2V5IjpudWxsLCJzY3JpcHRfcGF0aCI6bnVsbCwidGltZW91dCI6IjMwcyIsInR5cGUiOiJzc2giLCJ1c2VfbnRsbSI6bnVsbCwidXNlciI6InVidW50dSJ9",
              "drain_timeout": "0s",
              "kubectl_cmd": "kubectl",
              "server_name": "karmada"
            }
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.cvm.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm.data.tencentcloud_images.default",
            "module.cvm.data.tencentcloud_instance_types.default",
            "module.cvm.tencentcloud_instance.ubuntu",
            "module.k3s.module.k3s.data.http.k3s_installer",
            "module.k3s.module.k3s.data.http.k3s_version",
            "module.k3s.module.k3s.null_resource.k8s_ca_certificates_install",
            "module.k3s.module.k3s.null_resource.servers_install",
            "module.k3s.module.k3s.random_password.k3s_cluster_secret",
            "module.k3s.module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s.module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "module": "module.k3s.module.k3s",
      "mode": "managed",
      "type": "null_resource",
      "name": "servers_install",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "index_key": "karmada",
          "schema_version": 0,
          "attributes": {
            "id": "7319536884451896971",
            "triggers": {
              "on_immutable_changes": "1217af7dd3487d96a2808706b732f4edbef9b4ca",
              "on_new_version": "v1.31.2+k3s1"
            }
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.cvm.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm.data.tencentcloud_images.default",
            "module.cvm.data.tencentcloud_instance_types.default",
            "module.cvm.tencentcloud_instance.ubuntu",
            "module.k3s.module.k3s.data.http.k3s_installer",
            "module.k3s.module.k3s.data.http.k3s_version",
            "module.k3s.module.k3s.null_resource.k8s_ca_certificates_install",
            "module.k3s.module.k3s.random_password.k3s_cluster_secret",
            "module.k3s.module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s.module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "module": "module.k3s.module.k3s",
      "mode": "managed",
      "type": "random_password",
      "name": "k3s_cluster_secret",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 3,
          "attributes": {
            "bcrypt_hash": "$2a$10$Fc30o6V.EzZw2GFqRN9ckOuFFaNbjEKJOlASbijGRp4h.JX1dzdA2",
            "id": "none",
            "keepers": null,
            "length": 48,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "numeric": true,
            "override_special": null,
            "result": "fdKPk1QSPsKXl6VmTO8GBkeTcOfHR8PrBf9Cy0E37aEVePKT",
            "special": false,
            "upper": true
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "bcrypt_hash"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "result"
              }
            ]
          ],
          "dependencies": [
            "module.cvm.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm.data.tencentcloud_images.default",
            "module.cvm.data.tencentcloud_instance_types.default",
            "module.cvm.tencentcloud_instance.ubuntu",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "module": "module.k3s.module.k3s",
      "mode": "managed",
      "type": "tls_cert_request",
      "name": "master_user",
      "provider": "provider[\"registry.terraform.io/hashicorp/tls\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "cert_request_pem": "-----BEGIN CERTIFICATE REQUEST-----\nMIIBJzCBrgIBADAvMRcwFQYDVQQKEw5zeXN0ZW06bWFzdGVyczEUMBIGA1UEAxML\nbWFzdGVyLXVzZXIwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAATifaIINzofZ7qdmQKM\nk8H2P87EPiio4Fzr7fwxYanUo0I535RQKVPAkzAjjEDXjKD71WyPoiS5xW3XCOkg\nDejt/J8svaxIAmHbwH9z8FsaZ2xWXB11V4RGb65dnEC1tfCgADAKBggqhkjOPQQD\nAwNoADBlAjAsgBoe8kVFiY8dfpXqkYwd2KbOyVSPccOmk6/hBemEMER9hFHCQBoA\nAx4GYrU2YwECMQCnWoB+4aEG9Vvl6fHyWtM28f4iw/Q2BRUBD7Mh2lhAZd3jnfPJ\njVgUEvwNfzaDF58=\n-----END CERTIFICATE REQUEST-----\n",
            "dns_names": null,
            "id": "ea411ae84a5b1a6d945a25de1fca1d2dc1b2e3ce",
            "ip_addresses": null,
            "key_algorithm": "ECDSA",
            "private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDDnnKFmMlS4UC1Af7PmuAKg42P/exDpf0FCbYBxH62wy+i6GwyfA/I4\n9Ct4LInRqlagBwYFK4EEACKhZANiAATifaIINzofZ7qdmQKMk8H2P87EPiio4Fzr\n7fwxYanUo0I535RQKVPAkzAjjEDXjKD71WyPoiS5xW3XCOkgDejt/J8svaxIAmHb\nwH9z8FsaZ2xWXB11V4RGb65dnEC1tfA=\n-----END EC PRIVATE KEY-----\n",
            "subject": [
              {
                "common_name": "master-user",
                "country": null,
                "locality": null,
                "organization": "system:masters",
                "organizational_unit": null,
                "postal_code": null,
                "province": null,
                "serial_number": null,
                "street_address": null
              }
            ],
            "uris": null
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "private_key_pem"
              }
            ]
          ],
          "dependencies": [
            "module.cvm.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm.data.tencentcloud_images.default",
            "module.cvm.data.tencentcloud_instance_types.default",
            "module.cvm.tencentcloud_instance.ubuntu",
            "module.k3s.module.k3s.tls_private_key.master_user",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "module": "module.k3s.module.k3s",
      "mode": "managed",
      "type": "tls_locally_signed_cert",
      "name": "master_user",
      "provider": "provider[\"registry.terraform.io/hashicorp/tls\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "allowed_uses": [
              "key_encipherment",
              "digital_signature",
              "client_auth"
            ],
            "ca_cert_pem": "-----BEGIN CERTIFICATE-----\nMIIBvjCCAUOgAwIBAgIQd0KzkGtVXJRWTocIfGkq6DAKBggqhkjOPQQDAzAfMR0w\nGwYDVQQDExRrdWJlcm5ldGVzLWNsaWVudC1jYTAgFw0yNDEyMDcwMDI5MzBaGA8y\nMTI0MTIwODAwMjkzMFowHzEdMBsGA1UEAxMUa3ViZXJuZXRlcy1jbGllbnQtY2Ew\ndjAQBgcqhkjOPQIBBgUrgQQAIgNiAASRAmC9EaAr4/blR8a8kxc4css/dDAil+Iv\nDuqfr06OZ2qgsxowLQ68r0K/orvCjwn3xu8ZZcCn75w2Ez3rF6yfhYsbIuG9KML7\nWvwTfJg4HecXeVig61ExO18/Kwsovu+jQjBAMA4GA1UdDwEB/wQEAwICpDAPBgNV\nHRMBAf8EBTADAQH/MB0GA1UdDgQWBBQGXKltNsHyu/flwXChrnEZw52lZzAKBggq\nhkjOPQQDAwNpADBmAjEAvDlT7LVY7JuEZbSb3c9h9X4UAgcKidXeKytwhpmXkGqZ\n6H3rsWv0FG8YXlTYRAHKAjEAhYV1JugrZZlNptVm2mLcY+oKpXIDnbPZhHcxN1a9\nMUX9QETC1BRzh22VG5KsGRTY\n-----END CERTIFICATE-----\n",
            "ca_key_algorithm": "ECDSA",
            "ca_private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDA1YJgVgn5SEgX8D1wtzeVmyK5U5mnxxNjccO+Uxccogsd86POdKK33\n82IiYB7/xDGgBwYFK4EEACKhZANiAASRAmC9EaAr4/blR8a8kxc4css/dDAil+Iv\nDuqfr06OZ2qgsxowLQ68r0K/orvCjwn3xu8ZZcCn75w2Ez3rF6yfhYsbIuG9KML7\nWvwTfJg4HecXeVig61ExO18/Kwsovu8=\n-----END EC PRIVATE KEY-----\n",
            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIB4DCCAWegAwIBAgIQcg4gzXA+qOZxvrcNMadNvTAKBggqhkjOPQQDAzAfMR0w\nGwYDVQQDExRrdWJlcm5ldGVzLWNsaWVudC1jYTAgFw0yNDEyMDcwMDI5MzBaGA8y\nMTI0MTIwODAwMjkzMFowLzEXMBUGA1UEChMOc3lzdGVtOm1hc3RlcnMxFDASBgNV\nBAMTC21hc3Rlci11c2VyMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAE4n2iCDc6H2e6\nnZkCjJPB9j/OxD4oqOBc6+38MWGp1KNCOd+UUClTwJMwI4xA14yg+9Vsj6IkucVt\n1wjpIA3o7fyfLL2sSAJh28B/c/BbGmdsVlwddVeERm+uXZxAtbXwo1YwVDAOBgNV\nHQ8BAf8EBAMCBaAwEwYDVR0lBAwwCgYIKwYBBQUHAwIwDAYDVR0TAQH/BAIwADAf\nBgNVHSMEGDAWgBQGXKltNsHyu/flwXChrnEZw52lZzAKBggqhkjOPQQDAwNnADBk\nAjBs91Xv6SeoNrfqAZBRzARGx8Qg7Iyck64yKPJFfamf0Y6O+OiNYmIlRoG75SeN\n5GACMCoYC7ZKHPfvxt1JqZHsSVF+XSy9bUxb/Mar1lmTu7Zc4c+ehexH2tHLrwY1\npzzlpg==\n-----END CERTIFICATE-----\n",
            "cert_request_pem": "-----BEGIN CERTIFICATE REQUEST-----\nMIIBJzCBrgIBADAvMRcwFQYDVQQKEw5zeXN0ZW06bWFzdGVyczEUMBIGA1UEAxML\nbWFzdGVyLXVzZXIwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAATifaIINzofZ7qdmQKM\nk8H2P87EPiio4Fzr7fwxYanUo0I535RQKVPAkzAjjEDXjKD71WyPoiS5xW3XCOkg\nDejt/J8svaxIAmHbwH9z8FsaZ2xWXB11V4RGb65dnEC1tfCgADAKBggqhkjOPQQD\nAwNoADBlAjAsgBoe8kVFiY8dfpXqkYwd2KbOyVSPccOmk6/hBemEMER9hFHCQBoA\nAx4GYrU2YwECMQCnWoB+4aEG9Vvl6fHyWtM28f4iw/Q2BRUBD7Mh2lhAZd3jnfPJ\njVgUEvwNfzaDF58=\n-----END CERTIFICATE REQUEST-----\n",
            "early_renewal_hours": 0,
            "id": "151605348989118601484799408207875755453",
            "is_ca_certificate": false,
            "ready_for_renewal": false,
            "set_subject_key_id": false,
            "validity_end_time": "2124-12-08T08:29:30.239992065+08:00",
            "validity_period_hours": 876600,
            "validity_start_time": "2024-12-07T08:29:30.239992065+08:00"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "ca_private_key_pem"
              }
            ]
          ],
          "dependencies": [
            "module.cvm.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm.data.tencentcloud_images.default",
            "module.cvm.data.tencentcloud_instance_types.default",
            "module.cvm.tencentcloud_instance.ubuntu",
            "module.k3s.module.k3s.tls_cert_request.master_user",
            "module.k3s.module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s.module.k3s.tls_private_key.master_user",
            "module.k3s.module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "module": "module.k3s.module.k3s",
      "mode": "managed",
      "type": "tls_private_key",
      "name": "kubernetes_ca",
      "provider": "provider[\"registry.terraform.io/hashicorp/tls\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "algorithm": "ECDSA",
            "ecdsa_curve": "P384",
            "id": "bd7d8e629dc9fcd762159a941f63d63b142d4728",
            "private_key_openssh": "-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAiAAAABNl\nY2RzYS1zaGEyLW5pc3RwMzg0AAAACG5pc3RwMzg0AAAAYQSRAmC9EaAr4/blR8a8\nkxc4css/dDAil+IvDuqfr06OZ2qgsxowLQ68r0K/orvCjwn3xu8ZZcCn75w2Ez3r\nF6yfhYsbIuG9KML7WvwTfJg4HecXeVig61ExO18/Kwsovu8AAADI3ieko94npKMA\nAAATZWNkc2Etc2hhMi1uaXN0cDM4NAAAAAhuaXN0cDM4NAAAAGEEkQJgvRGgK+P2\n5UfGvJMXOHLLP3QwIpfiLw7qn69OjmdqoLMaMC0OvK9Cv6K7wo8J98bvGWXAp++c\nNhM96xesn4WLGyLhvSjC+1r8E3yYOB3nF3lYoOtRMTtfPysLKL7vAAAAMDVgmBWC\nflISBfwPXC3N5WbIrlTmafHE2Nxw75TFxyiCx3zo850orffzYiJgHv/EMQAAAAA=\n-----END OPENSSH PRIVATE KEY-----\n",
            "private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDA1YJgVgn5SEgX8D1wtzeVmyK5U5mnxxNjccO+Uxccogsd86POdKK33\n82IiYB7/xDGgBwYFK4EEACKhZANiAASRAmC9EaAr4/blR8a8kxc4css/dDAil+Iv\nDuqfr06OZ2qgsxowLQ68r0K/orvCjwn3xu8ZZcCn75w2Ez3rF6yfhYsbIuG9KML7\nWvwTfJg4HecXeVig61ExO18/Kwsovu8=\n-----END EC PRIVATE KEY-----\n",
            "private_key_pem_pkcs8": "-----BEGIN PRIVATE KEY-----\nMIG2AgEAMBAGByqGSM49AgEGBSuBBAAiBIGeMIGbAgEBBDA1YJgVgn5SEgX8D1wt\nzeVmyK5U5mnxxNjccO+Uxccogsd86POdKK3382IiYB7/xDGhZANiAASRAmC9EaAr\n4/blR8a8kxc4css/dDAil+IvDuqfr06OZ2qgsxowLQ68r0K/orvCjwn3xu8ZZcCn\n75w2Ez3rF6yfhYsbIuG9KML7WvwTfJg4HecXeVig61ExO18/Kwsovu8=\n-----END PRIVATE KEY-----\n",
            "public_key_fingerprint_md5": "56:1c:d4:19:21:8b:da:4f:24:4b:7d:e3:bf:ca:09:cf",
            "public_key_fingerprint_sha256": "SHA256:O4cb/883OS26CqG8AzTPDFSH5/81yg5jYQPrzj6RR0Y",
            "public_key_openssh": "ecdsa-sha2-nistp384 AAAAE2VjZHNhLXNoYTItbmlzdHAzODQAAAAIbmlzdHAzODQAAABhBJECYL0RoCvj9uVHxryTFzhyyz90MCKX4i8O6p+vTo5naqCzGjAtDryvQr+iu8KPCffG7xllwKfvnDYTPesXrJ+Fixsi4b0owvta/BN8mDgd5xd5WKDrUTE7Xz8rCyi+7w==\n",
            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEkQJgvRGgK+P25UfGvJMXOHLLP3QwIpfi\nLw7qn69OjmdqoLMaMC0OvK9Cv6K7wo8J98bvGWXAp++cNhM96xesn4WLGyLhvSjC\n+1r8E3yYOB3nF3lYoOtRMTtfPysLKL7v\n-----END PUBLIC KEY-----\n",
            "rsa_bits": 2048
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "private_key_pem_pkcs8"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "private_key_pem"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "private_key_openssh"
              }
            ]
          ],
          "dependencies": [
            "module.cvm.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm.data.tencentcloud_images.default",
            "module.cvm.data.tencentcloud_instance_types.default",
            "module.cvm.tencentcloud_instance.ubuntu",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 1,
          "attributes": {
            "algorithm": "ECDSA",
            "ecdsa_curve": "P384",
            "id": "bae44cea43e15b5fa24a3c0d042d321481a32fe9",
            "private_key_openssh": "-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAiAAAABNl\nY2RzYS1zaGEyLW5pc3RwMzg0AAAACG5pc3RwMzg0AAAAYQS+zvBu/rx0v1abqCSz\nCH//a83pa6CL2tfNXpmO397AYRKBZhfNqm4vTm+v2XemLw7KaU1VsvtwtXtKlc06\nzsjFeElccwAffrxjFfyczTnW/H8WNcSQ8/tykJCT5spod6UAAADIQUsCZUFLAmUA\nAAATZWNkc2Etc2hhMi1uaXN0cDM4NAAAAAhuaXN0cDM4NAAAAGEEvs7wbv68dL9W\nm6gkswh//2vN6Wugi9rXzV6Zjt/ewGESgWYXzapuL05vr9l3pi8OymlNVbL7cLV7\nSpXNOs7IxXhJXHMAH368YxX8nM051vx/FjXEkPP7cpCQk+bKaHelAAAAMHJJdybh\nEafdLv94OFk55oXr7M+AxaBWXhlalgWyxYNFvnv5+jTSzrNBZnpH4Q+GdQAAAAA=\n-----END OPENSSH PRIVATE KEY-----\n",
            "private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDBySXcm4RGn3S7/eDhZOeaF6+zPgMWgVl4ZWpYFssWDRb57+fo00s6z\nQWZ6R+EPhnWgBwYFK4EEACKhZANiAAS+zvBu/rx0v1abqCSzCH//a83pa6CL2tfN\nXpmO397AYRKBZhfNqm4vTm+v2XemLw7KaU1VsvtwtXtKlc06zsjFeElccwAffrxj\nFfyczTnW/H8WNcSQ8/tykJCT5spod6U=\n-----END EC PRIVATE KEY-----\n",
            "private_key_pem_pkcs8": "-----BEGIN PRIVATE KEY-----\nMIG2AgEAMBAGByqGSM49AgEGBSuBBAAiBIGeMIGbAgEBBDBySXcm4RGn3S7/eDhZ\nOeaF6+zPgMWgVl4ZWpYFssWDRb57+fo00s6zQWZ6R+EPhnWhZANiAAS+zvBu/rx0\nv1abqCSzCH//a83pa6CL2tfNXpmO397AYRKBZhfNqm4vTm+v2XemLw7KaU1Vsvtw\ntXtKlc06zsjFeElccwAffrxjFfyczTnW/H8WNcSQ8/tykJCT5spod6U=\n-----END PRIVATE KEY-----\n",
            "public_key_fingerprint_md5": "3e:14:7f:42:d3:2c:9b:cb:bb:f4:e9:b2:fb:30:59:1a",
            "public_key_fingerprint_sha256": "SHA256:8iZ4thETsmeRkF3xOZ8Zp/6aD4Rxi6cDEqSD/5sfOdc",
            "public_key_openssh": "ecdsa-sha2-nistp384 AAAAE2VjZHNhLXNoYTItbmlzdHAzODQAAAAIbmlzdHAzODQAAABhBL7O8G7+vHS/VpuoJLMIf/9rzelroIva181emY7f3sBhEoFmF82qbi9Ob6/Zd6YvDsppTVWy+3C1e0qVzTrOyMV4SVxzAB9+vGMV/JzNOdb8fxY1xJDz+3KQkJPmymh3pQ==\n",
            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEvs7wbv68dL9Wm6gkswh//2vN6Wugi9rX\nzV6Zjt/ewGESgWYXzapuL05vr9l3pi8OymlNVbL7cLV7SpXNOs7IxXhJXHMAH368\nYxX8nM051vx/FjXEkPP7cpCQk+bKaHel\n-----END PUBLIC KEY-----\n",
            "rsa_bits": 2048
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "private_key_pem_pkcs8"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "private_key_pem"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "private_key_openssh"
              }
            ]
          ],
          "dependencies": [
            "module.cvm.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm.data.tencentcloud_images.default",
            "module.cvm.data.tencentcloud_instance_types.default",
            "module.cvm.tencentcloud_instance.ubuntu",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 1,
          "attributes": {
            "algorithm": "ECDSA",
            "ecdsa_curve": "P384",
            "id": "23645e434d690e1bf57991c0e932d7672045fd3a",
            "private_key_openssh": "-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAiAAAABNl\nY2RzYS1zaGEyLW5pc3RwMzg0AAAACG5pc3RwMzg0AAAAYQQgDFza1TgahPI0lo31\nYROPRLK23Em3xrGZVi3LlnhdSBC1tlWvwwCbfNxSjKX+gSgFACJLbJkc8PodhpK2\n1WBCTEbwU6RI784Ccpexr7tZpP+0PFBj4+n57iZ1U1kS5NAAAADIL/E5AS/xOQEA\nAAATZWNkc2Etc2hhMi1uaXN0cDM4NAAAAAhuaXN0cDM4NAAAAGEEIAxc2tU4GoTy\nNJaN9WETj0SyttxJt8axmVYty5Z4XUgQtbZVr8MAm3zcUoyl/oEoBQAiS2yZHPD6\nHYaSttVgQkxG8FOkSO/OAnKXsa+7WaT/tDxQY+Pp+e4mdVNZEuTQAAAAME331HHM\nkl0BoXjjZwT8GnjGmHIzZt8eCfeymr53H67hXbUnXXCUSQMVCTbTXeAzHAAAAAA=\n-----END OPENSSH PRIVATE KEY-----\n",
            "private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDBN99RxzJJdAaF442cE/Bp4xphyM2bfHgn3spq+dx+u4V21J11wlEkD\nFQk2013gMxygBwYFK4EEACKhZANiAAQgDFza1TgahPI0lo31YROPRLK23Em3xrGZ\nVi3LlnhdSBC1tlWvwwCbfNxSjKX+gSgFACJLbJkc8PodhpK21WBCTEbwU6RI784C\ncpexr7tZpP+0PFBj4+n57iZ1U1kS5NA=\n-----END EC PRIVATE KEY-----\n",
            "private_key_pem_pkcs8": "-----BEGIN PRIVATE KEY-----\nMIG2AgEAMBAGByqGSM49AgEGBSuBBAAiBIGeMIGbAgEBBDBN99RxzJJdAaF442cE\n/Bp4xphyM2bfHgn3spq+dx+u4V21J11wlEkDFQk2013gMxyhZANiAAQgDFza1Tga\nhPI0lo31YROPRLK23Em3xrGZVi3LlnhdSBC1tlWvwwCbfNxSjKX+gSgFACJLbJkc\n8PodhpK21WBCTEbwU6RI784Ccpexr7tZpP+0PFBj4+n57iZ1U1kS5NA=\n-----END PRIVATE KEY-----\n",
            "public_key_fingerprint_md5": "55:87:5a:d6:f5:f3:d6:ff:0b:c7:cd:c1:d5:1b:f4:15",
            "public_key_fingerprint_sha256": "SHA256:tCb/Fr0+wFNd4+Mlsl3MHJ0EvpRVzTPJTsGQoia4eq8",
            "public_key_openssh": "ecdsa-sha2-nistp384 AAAAE2VjZHNhLXNoYTItbmlzdHAzODQAAAAIbmlzdHAzODQAAABhBCAMXNrVOBqE8jSWjfVhE49EsrbcSbfGsZlWLcuWeF1IELW2Va/DAJt83FKMpf6BKAUAIktsmRzw+h2GkrbVYEJMRvBTpEjvzgJyl7Gvu1mk/7Q8UGPj6fnuJnVTWRLk0A==\n",
            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEIAxc2tU4GoTyNJaN9WETj0SyttxJt8ax\nmVYty5Z4XUgQtbZVr8MAm3zcUoyl/oEoBQAiS2yZHPD6HYaSttVgQkxG8FOkSO/O\nAnKXsa+7WaT/tDxQY+Pp+e4mdVNZEuTQ\n-----END PUBLIC KEY-----\n",
            "rsa_bits": 2048
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "private_key_pem_pkcs8"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "private_key_openssh"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "private_key_pem"
              }
            ]
          ],
          "dependencies": [
            "module.cvm.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm.data.tencentcloud_images.default",
            "module.cvm.data.tencentcloud_instance_types.default",
            "module.cvm.tencentcloud_instance.ubuntu",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "module": "module.k3s.module.k3s",
      "mode": "managed",
      "type": "tls_private_key",
      "name": "master_user",
      "provider": "provider[\"registry.terraform.io/hashicorp/tls\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "algorithm": "ECDSA",
            "ecdsa_curve": "P384",
            "id": "a2cf9b272d8c88ccd91da0947da953d9e3088e89",
            "private_key_openssh": "-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAiAAAABNl\nY2RzYS1zaGEyLW5pc3RwMzg0AAAACG5pc3RwMzg0AAAAYQTifaIINzofZ7qdmQKM\nk8H2P87EPiio4Fzr7fwxYanUo0I535RQKVPAkzAjjEDXjKD71WyPoiS5xW3XCOkg\nDejt/J8svaxIAmHbwH9z8FsaZ2xWXB11V4RGb65dnEC1tfAAAADQX1cCZV9XAmUA\nAAATZWNkc2Etc2hhMi1uaXN0cDM4NAAAAAhuaXN0cDM4NAAAAGEE4n2iCDc6H2e6\nnZkCjJPB9j/OxD4oqOBc6+38MWGp1KNCOd+UUClTwJMwI4xA14yg+9Vsj6IkucVt\n1wjpIA3o7fyfLL2sSAJh28B/c/BbGmdsVlwddVeERm+uXZxAtbXwAAAAMQDnnKFm\nMlS4UC1Af7PmuAKg42P/exDpf0FCbYBxH62wy+i6GwyfA/I49Ct4LInRqlYAAAAA\nAQIDBAUGBw==\n-----END OPENSSH PRIVATE KEY-----\n",
            "private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDDnnKFmMlS4UC1Af7PmuAKg42P/exDpf0FCbYBxH62wy+i6GwyfA/I4\n9Ct4LInRqlagBwYFK4EEACKhZANiAATifaIINzofZ7qdmQKMk8H2P87EPiio4Fzr\n7fwxYanUo0I535RQKVPAkzAjjEDXjKD71WyPoiS5xW3XCOkgDejt/J8svaxIAmHb\nwH9z8FsaZ2xWXB11V4RGb65dnEC1tfA=\n-----END EC PRIVATE KEY-----\n",
            "private_key_pem_pkcs8": "-----BEGIN PRIVATE KEY-----\nMIG2AgEAMBAGByqGSM49AgEGBSuBBAAiBIGeMIGbAgEBBDDnnKFmMlS4UC1Af7Pm\nuAKg42P/exDpf0FCbYBxH62wy+i6GwyfA/I49Ct4LInRqlahZANiAATifaIINzof\nZ7qdmQKMk8H2P87EPiio4Fzr7fwxYanUo0I535RQKVPAkzAjjEDXjKD71WyPoiS5\nxW3XCOkgDejt/J8svaxIAmHbwH9z8FsaZ2xWXB11V4RGb65dnEC1tfA=\n-----END PRIVATE KEY-----\n",
            "public_key_fingerprint_md5": "7a:14:6b:e4:df:c1:fe:87:6f:02:e7:48:78:15:9e:e9",
            "public_key_fingerprint_sha256": "SHA256:6XWMA5qbwamTK+4ihURqHZ9Qn6YEUpEvlz0hqql3G6A",
            "public_key_openssh": "ecdsa-sha2-nistp384 AAAAE2VjZHNhLXNoYTItbmlzdHAzODQAAAAIbmlzdHAzODQAAABhBOJ9ogg3Oh9nup2ZAoyTwfY/zsQ+KKjgXOvt/DFhqdSjQjnflFApU8CTMCOMQNeMoPvVbI+iJLnFbdcI6SAN6O38nyy9rEgCYdvAf3PwWxpnbFZcHXVXhEZvrl2cQLW18A==\n",
            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAE4n2iCDc6H2e6nZkCjJPB9j/OxD4oqOBc\n6+38MWGp1KNCOd+UUClTwJMwI4xA14yg+9Vsj6IkucVt1wjpIA3o7fyfLL2sSAJh\n28B/c/BbGmdsVlwddVeERm+uXZxAtbXw\n-----END PUBLIC KEY-----\n",
            "rsa_bits": 2048
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "private_key_openssh"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "private_key_pem_pkcs8"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "private_key_pem"
              }
            ]
          ],
          "dependencies": [
            "module.cvm.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm.data.tencentcloud_images.default",
            "module.cvm.data.tencentcloud_instance_types.default",
            "module.cvm.tencentcloud_instance.ubuntu",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "module": "module.k3s.module.k3s",
      "mode": "managed",
      "type": "tls_self_signed_cert",
      "name": "kubernetes_ca_certs",
      "provider": "provider[\"registry.terraform.io/hashicorp/tls\"]",
      "instances": [
        {
          "index_key": "0",
          "schema_version": 0,
          "attributes": {
            "allowed_uses": [
              "digital_signature",
              "key_encipherment",
              "cert_signing"
            ],
            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIBvjCCAUOgAwIBAgIQd0KzkGtVXJRWTocIfGkq6DAKBggqhkjOPQQDAzAfMR0w\nGwYDVQQDExRrdWJlcm5ldGVzLWNsaWVudC1jYTAgFw0yNDEyMDcwMDI5MzBaGA8y\nMTI0MTIwODAwMjkzMFowHzEdMBsGA1UEAxMUa3ViZXJuZXRlcy1jbGllbnQtY2Ew\ndjAQBgcqhkjOPQIBBgUrgQQAIgNiAASRAmC9EaAr4/blR8a8kxc4css/dDAil+Iv\nDuqfr06OZ2qgsxowLQ68r0K/orvCjwn3xu8ZZcCn75w2Ez3rF6yfhYsbIuG9KML7\nWvwTfJg4HecXeVig61ExO18/Kwsovu+jQjBAMA4GA1UdDwEB/wQEAwICpDAPBgNV\nHRMBAf8EBTADAQH/MB0GA1UdDgQWBBQGXKltNsHyu/flwXChrnEZw52lZzAKBggq\nhkjOPQQDAwNpADBmAjEAvDlT7LVY7JuEZbSb3c9h9X4UAgcKidXeKytwhpmXkGqZ\n6H3rsWv0FG8YXlTYRAHKAjEAhYV1JugrZZlNptVm2mLcY+oKpXIDnbPZhHcxN1a9\nMUX9QETC1BRzh22VG5KsGRTY\n-----END CERTIFICATE-----\n",
            "dns_names": null,
            "early_renewal_hours": 0,
            "id": "158524465084460835141711322315135462120",
            "ip_addresses": null,
            "is_ca_certificate": true,
            "key_algorithm": "ECDSA",
            "private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDA1YJgVgn5SEgX8D1wtzeVmyK5U5mnxxNjccO+Uxccogsd86POdKK33\n82IiYB7/xDGgBwYFK4EEACKhZANiAASRAmC9EaAr4/blR8a8kxc4css/dDAil+Iv\nDuqfr06OZ2qgsxowLQ68r0K/orvCjwn3xu8ZZcCn75w2Ez3rF6yfhYsbIuG9KML7\nWvwTfJg4HecXeVig61ExO18/Kwsovu8=\n-----END EC PRIVATE KEY-----\n",
            "ready_for_renewal": false,
            "set_authority_key_id": false,
            "set_subject_key_id": false,
            "subject": [
              {
                "common_name": "kubernetes-client-ca",
                "country": null,
                "locality": null,
                "organization": null,
                "organizational_unit": null,
                "postal_code": null,
                "province": null,
                "serial_number": null,
                "street_address": null
              }
            ],
            "uris": null,
            "validity_end_time": "2124-12-08T08:29:30.222365064+08:00",
            "validity_period_hours": 876600,
            "validity_start_time": "2024-12-07T08:29:30.222365064+08:00"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "private_key_pem"
              }
            ]
          ],
          "dependencies": [
            "module.cvm.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm.data.tencentcloud_images.default",
            "module.cvm.data.tencentcloud_instance_types.default",
            "module.cvm.tencentcloud_instance.ubuntu",
            "module.k3s.module.k3s.tls_private_key.kubernetes_ca",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        },
        {
          "index_key": "1",
          "schema_version": 0,
          "attributes": {
            "allowed_uses": [
              "digital_signature",
              "key_encipherment",
              "cert_signing"
            ],
            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIBvTCCAUOgAwIBAgIQZlRAlVfbvr3t38pW/3cZPTAKBggqhkjOPQQDAzAfMR0w\nGwYDVQQDExRrdWJlcm5ldGVzLXNlcnZlci1jYTAgFw0yNDEyMDcwMDI5MzBaGA8y\nMTI0MTIwODAwMjkzMFowHzEdMBsGA1UEAxMUa3ViZXJuZXRlcy1zZXJ2ZXItY2Ew\ndjAQBgcqhkjOPQIBBgUrgQQAIgNiAAS+zvBu/rx0v1abqCSzCH//a83pa6CL2tfN\nXpmO397AYRKBZhfNqm4vTm+v2XemLw7KaU1VsvtwtXtKlc06zsjFeElccwAffrxj\nFfyczTnW/H8WNcSQ8/tykJCT5spod6WjQjBAMA4GA1UdDwEB/wQEAwICpDAPBgNV\nHRMBAf8EBTADAQH/MB0GA1UdDgQWBBR8sG2FstiR2hpHb+IagezgGjYWUTAKBggq\nhkjOPQQDAwNoADBlAjEA6mVeG+ux24OtS/w2S/xWWdZ/FL8z8ZZ7EGF3MSkq3Yfm\nlduO9quu0NHHY1WAfkCHAjBJKaMyC9ICX+xiT11Nf3WggyyF0skPeKXgWUbLUk2e\n2O3YOJpRtZE5b2eHQc/qZ9U=\n-----END CERTIFICATE-----\n",
            "dns_names": null,
            "early_renewal_hours": 0,
            "id": "136018718412580044251437957016190392637",
            "ip_addresses": null,
            "is_ca_certificate": true,
            "key_algorithm": "ECDSA",
            "private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDBySXcm4RGn3S7/eDhZOeaF6+zPgMWgVl4ZWpYFssWDRb57+fo00s6z\nQWZ6R+EPhnWgBwYFK4EEACKhZANiAAS+zvBu/rx0v1abqCSzCH//a83pa6CL2tfN\nXpmO397AYRKBZhfNqm4vTm+v2XemLw7KaU1VsvtwtXtKlc06zsjFeElccwAffrxj\nFfyczTnW/H8WNcSQ8/tykJCT5spod6U=\n-----END EC PRIVATE KEY-----\n",
            "ready_for_renewal": false,
            "set_authority_key_id": false,
            "set_subject_key_id": false,
            "subject": [
              {
                "common_name": "kubernetes-server-ca",
                "country": null,
                "locality": null,
                "organization": null,
                "organizational_unit": null,
                "postal_code": null,
                "province": null,
                "serial_number": null,
                "street_address": null
              }
            ],
            "uris": null,
            "validity_end_time": "2124-12-08T08:29:30.224844559+08:00",
            "validity_period_hours": 876600,
            "validity_start_time": "2024-12-07T08:29:30.224844559+08:00"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "private_key_pem"
              }
            ]
          ],
          "dependencies": [
            "module.cvm.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm.data.tencentcloud_images.default",
            "module.cvm.data.tencentcloud_instance_types.default",
            "module.cvm.tencentcloud_instance.ubuntu",
            "module.k3s.module.k3s.tls_private_key.kubernetes_ca",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        },
        {
          "index_key": "2",
          "schema_version": 0,
          "attributes": {
            "allowed_uses": [
              "digital_signature",
              "key_encipherment",
              "cert_signing"
            ],
            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIB1TCCAVugAwIBAgIQJucldYm2Cu31x4kh/bGvuDAKBggqhkjOPQQDAzArMSkw\nJwYDVQQDEyBrdWJlcm5ldGVzLXJlcXVlc3QtaGVhZGVyLWtleS1jYTAgFw0yNDEy\nMDcwMDI5MzBaGA8yMTI0MTIwODAwMjkzMFowKzEpMCcGA1UEAxMga3ViZXJuZXRl\ncy1yZXF1ZXN0LWhlYWRlci1rZXktY2EwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAAQg\nDFza1TgahPI0lo31YROPRLK23Em3xrGZVi3LlnhdSBC1tlWvwwCbfNxSjKX+gSgF\nACJLbJkc8PodhpK21WBCTEbwU6RI784Ccpexr7tZpP+0PFBj4+n57iZ1U1kS5NCj\nQjBAMA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBTE\nIKVa94qvT/vm/jaVAzS7pNnaZTAKBggqhkjOPQQDAwNoADBlAjEAliSFxTlle1+x\n6NZ/JNQQPZHYbp3eX0CDhxP7i5cWNjPD2hZR8k8P/OfR8pSUGO6EAjBxR0IK3KQ/\nllZ8s6OS1YTX/Llb6qxI1kVARSxEzKXFsbHgZpxKlaIQm7DVt6thQAQ=\n-----END CERTIFICATE-----\n",
            "dns_names": null,
            "early_renewal_hours": 0,
            "id": "51710844175618220091215983365091078072",
            "ip_addresses": null,
            "is_ca_certificate": true,
            "key_algorithm": "ECDSA",
            "private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDBN99RxzJJdAaF442cE/Bp4xphyM2bfHgn3spq+dx+u4V21J11wlEkD\nFQk2013gMxygBwYFK4EEACKhZANiAAQgDFza1TgahPI0lo31YROPRLK23Em3xrGZ\nVi3LlnhdSBC1tlWvwwCbfNxSjKX+gSgFACJLbJkc8PodhpK21WBCTEbwU6RI784C\ncpexr7tZpP+0PFBj4+n57iZ1U1kS5NA=\n-----END EC PRIVATE KEY-----\n",
            "ready_for_renewal": false,
            "set_authority_key_id": false,
            "set_subject_key_id": false,
            "subject": [
              {
                "common_name": "kubernetes-request-header-key-ca",
                "country": null,
                "locality": null,
                "organization": null,
                "organizational_unit": null,
                "postal_code": null,
                "province": null,
                "serial_number": null,
                "street_address": null
              }
            ],
            "uris": null,
            "validity_end_time": "2124-12-08T08:29:30.224133327+08:00",
            "validity_period_hours": 876600,
            "validity_start_time": "2024-12-07T08:29:30.224133327+08:00"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "private_key_pem"
              }
            ]
          ],
          "dependencies": [
            "module.cvm.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm.data.tencentcloud_images.default",
            "module.cvm.data.tencentcloud_instance_types.default",
            "module.cvm.tencentcloud_instance.ubuntu",
            "module.k3s.module.k3s.tls_private_key.kubernetes_ca",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "module": "module.k3s1.module.k3s",
      "mode": "data",
      "type": "http",
      "name": "k3s_installer",
      "provider": "provider[\"registry.terraform.io/hashicorp/http\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "body": "#!/bin/sh\nset -e\nset -o noglob\n\n# Usage:\n#   curl ... | ENV_VAR=... sh -\n#       or\n#   ENV_VAR=... ./install.sh\n#\n# Example:\n#   Installing a server without traefik:\n#     curl ... | INSTALL_K3S_EXEC=\"--disable=traefik\" sh -\n#   Installing an agent to point at a server:\n#     curl ... | K3S_TOKEN=xxx K3S_URL=https://server-url:6443 sh -\n#\n# Environment variables:\n#   - K3S_*\n#     Environment variables which begin with K3S_ will be preserved for the\n#     systemd service to use. Setting K3S_URL without explicitly setting\n#     a systemd exec command will default the command to \"agent\", and we\n#     enforce that K3S_TOKEN is also set.\n#\n#   - INSTALL_K3S_SKIP_DOWNLOAD\n#     If set to true will not download k3s hash or binary.\n#\n#   - INSTALL_K3S_FORCE_RESTART\n#     If set to true will always restart the K3s service\n#\n#   - INSTALL_K3S_SYMLINK\n#     If set to 'skip' will not create symlinks, 'force' will overwrite,\n#     default will symlink if command does not exist in path.\n#\n#   - INSTALL_K3S_SKIP_ENABLE\n#     If set to true will not enable or start k3s service.\n#\n#   - INSTALL_K3S_SKIP_START\n#     If set to true will not start k3s service.\n#\n#   - INSTALL_K3S_VERSION\n#     Version of k3s to download from github. Will attempt to download from the\n#     stable channel if not specified.\n#\n#   - INSTALL_K3S_COMMIT\n#     Commit of k3s to download from temporary cloud storage.\n#     * (for developer \u0026 QA use)\n#\n#   - INSTALL_K3S_PR\n#     PR build of k3s to download from Github Artifacts.\n#     * (for developer \u0026 QA use)\n#\n#   - INSTALL_K3S_BIN_DIR\n#     Directory to install k3s binary, links, and uninstall script to, or use\n#     /usr/local/bin as the default\n#\n#   - INSTALL_K3S_BIN_DIR_READ_ONLY\n#     If set to true will not write files to INSTALL_K3S_BIN_DIR, forces\n#     setting INSTALL_K3S_SKIP_DOWNLOAD=true\n#\n#   - INSTALL_K3S_SYSTEMD_DIR\n#     Directory to install systemd service and environment files to, or use\n#     /etc/systemd/system as the default\n#\n#   - INSTALL_K3S_EXEC or script arguments\n#     Command with flags to use for launching k3s in the systemd service, if\n#     the command is not specified will default to \"agent\" if K3S_URL is set\n#     or \"server\" if not. The final systemd command resolves to a combination\n#     of EXEC and script args ($@).\n#\n#     The following commands result in the same behavior:\n#       curl ... | INSTALL_K3S_EXEC=\"--disable=traefik\" sh -s -\n#       curl ... | INSTALL_K3S_EXEC=\"server --disable=traefik\" sh -s -\n#       curl ... | INSTALL_K3S_EXEC=\"server\" sh -s - --disable=traefik\n#       curl ... | sh -s - server --disable=traefik\n#       curl ... | sh -s - --disable=traefik\n#\n#   - INSTALL_K3S_NAME\n#     Name of systemd service to create, will default from the k3s exec command\n#     if not specified. If specified the name will be prefixed with 'k3s-'.\n#\n#   - INSTALL_K3S_TYPE\n#     Type of systemd service to create, will default from the k3s exec command\n#     if not specified.\n#\n#   - INSTALL_K3S_SELINUX_WARN\n#     If set to true will continue if k3s-selinux policy is not found.\n#\n#   - INSTALL_K3S_SKIP_SELINUX_RPM\n#     If set to true will skip automatic installation of the k3s RPM.\n#\n#   - INSTALL_K3S_CHANNEL_URL\n#     Channel URL for fetching k3s download URL.\n#     Defaults to 'https://update.k3s.io/v1-release/channels'.\n#\n#   - INSTALL_K3S_CHANNEL\n#     Channel to use for fetching k3s download URL.\n#     Defaults to 'stable'.\n\nGITHUB_URL=https://github.com/k3s-io/k3s/releases\nGITHUB_PR_URL=\"\"\nSTORAGE_URL=https://k3s-ci-builds.s3.amazonaws.com\nDOWNLOADER=\n\n# --- helper functions for logs ---\ninfo()\n{\n    echo '[INFO] ' \"$@\"\n}\nwarn()\n{\n    echo '[WARN] ' \"$@\" \u003e\u00262\n}\nfatal()\n{\n    echo '[ERROR] ' \"$@\" \u003e\u00262\n    exit 1\n}\n\n# --- fatal if no systemd or openrc ---\nverify_system() {\n    if [ -x /sbin/openrc-run ]; then\n        HAS_OPENRC=true\n        return\n    fi\n    if [ -x /bin/systemctl ] || type systemctl \u003e /dev/null 2\u003e\u00261; then\n        HAS_SYSTEMD=true\n        return\n    fi\n    fatal 'Can not find systemd or openrc to use as a process supervisor for k3s'\n}\n\n# --- add quotes to command arguments ---\nquote() {\n    for arg in \"$@\"; do\n        printf '%s\\n' \"$arg\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/'/\"\n    done\n}\n\n# --- add indentation and trailing slash to quoted args ---\nquote_indent() {\n    printf ' \\\\\\n'\n    for arg in \"$@\"; do\n        printf '\\t%s \\\\\\n' \"$(quote \"$arg\")\"\n    done\n}\n\n# --- escape most punctuation characters, except quotes, forward slash, and space ---\nescape() {\n    printf '%s' \"$@\" | sed -e 's/\\([][!#$%\u0026()*;\u003c=\u003e?\\_`{|}]\\)/\\\\\\1/g;'\n}\n\n# --- escape double quotes ---\nescape_dq() {\n    printf '%s' \"$@\" | sed -e 's/\"/\\\\\"/g'\n}\n\n# --- ensures $K3S_URL is empty or begins with https://, exiting fatally otherwise ---\nverify_k3s_url() {\n    case \"${K3S_URL}\" in\n        \"\")\n            ;;\n        https://*)\n            ;;\n        *)\n            fatal \"Only https:// URLs are supported for K3S_URL (have ${K3S_URL})\"\n            ;;\n    esac\n}\n\n# --- define needed environment variables ---\nsetup_env() {\n    # --- use command args if passed or create default ---\n    case \"$1\" in\n        # --- if we only have flags discover if command should be server or agent ---\n        (-*|\"\")\n            if [ -z \"${K3S_URL}\" ]; then\n                CMD_K3S=server\n            else\n                if [ -z \"${K3S_TOKEN}\" ] \u0026\u0026 [ -z \"${K3S_TOKEN_FILE}\" ]; then\n                    fatal \"Defaulted k3s exec command to 'agent' because K3S_URL is defined, but K3S_TOKEN or K3S_TOKEN_FILE is not defined.\"\n                fi\n                CMD_K3S=agent\n            fi\n        ;;\n        # --- command is provided ---\n        (*)\n            CMD_K3S=$1\n            shift\n        ;;\n    esac\n\n    verify_k3s_url\n\n    CMD_K3S_EXEC=\"${CMD_K3S}$(quote_indent \"$@\")\"\n\n    # --- use systemd name if defined or create default ---\n    if [ -n \"${INSTALL_K3S_NAME}\" ]; then\n        SYSTEM_NAME=k3s-${INSTALL_K3S_NAME}\n    else\n        if [ \"${CMD_K3S}\" = server ]; then\n            SYSTEM_NAME=k3s\n        else\n            SYSTEM_NAME=k3s-${CMD_K3S}\n        fi\n    fi\n\n    # --- check for invalid characters in system name ---\n    valid_chars=$(printf '%s' \"${SYSTEM_NAME}\" | sed -e 's/[][!#$%\u0026()*;\u003c=\u003e?\\_`{|}/[:space:]]/^/g;' )\n    if [ \"${SYSTEM_NAME}\" != \"${valid_chars}\"  ]; then\n        invalid_chars=$(printf '%s' \"${valid_chars}\" | sed -e 's/[^^]/ /g')\n        fatal \"Invalid characters for system name:\n            ${SYSTEM_NAME}\n            ${invalid_chars}\"\n    fi\n\n    # --- use sudo if we are not already root ---\n    SUDO=sudo\n    if [ $(id -u) -eq 0 ]; then\n        SUDO=\n    fi\n\n    # --- use systemd type if defined or create default ---\n    if [ -n \"${INSTALL_K3S_TYPE}\" ]; then\n        SYSTEMD_TYPE=${INSTALL_K3S_TYPE}\n    else\n        SYSTEMD_TYPE=notify\n    fi\n\n    # --- use binary install directory if defined or create default ---\n    if [ -n \"${INSTALL_K3S_BIN_DIR}\" ]; then\n        BIN_DIR=${INSTALL_K3S_BIN_DIR}\n    else\n        # --- use /usr/local/bin if root can write to it, otherwise use /opt/bin if it exists\n        BIN_DIR=/usr/local/bin\n        if ! $SUDO sh -c \"touch ${BIN_DIR}/k3s-ro-test \u0026\u0026 rm -rf ${BIN_DIR}/k3s-ro-test\"; then\n            if [ -d /opt/bin ]; then\n                BIN_DIR=/opt/bin\n            fi\n        fi\n    fi\n\n    # --- use systemd directory if defined or create default ---\n    if [ -n \"${INSTALL_K3S_SYSTEMD_DIR}\" ]; then\n        SYSTEMD_DIR=\"${INSTALL_K3S_SYSTEMD_DIR}\"\n    else\n        SYSTEMD_DIR=/etc/systemd/system\n    fi\n\n    # --- set related files from system name ---\n    SERVICE_K3S=${SYSTEM_NAME}.service\n    UNINSTALL_K3S_SH=${UNINSTALL_K3S_SH:-${BIN_DIR}/${SYSTEM_NAME}-uninstall.sh}\n    KILLALL_K3S_SH=${KILLALL_K3S_SH:-${BIN_DIR}/k3s-killall.sh}\n\n    # --- use service or environment location depending on systemd/openrc ---\n    if [ \"${HAS_SYSTEMD}\" = true ]; then\n        FILE_K3S_SERVICE=${SYSTEMD_DIR}/${SERVICE_K3S}\n        FILE_K3S_ENV=${SYSTEMD_DIR}/${SERVICE_K3S}.env\n    elif [ \"${HAS_OPENRC}\" = true ]; then\n        $SUDO mkdir -p /etc/rancher/k3s\n        FILE_K3S_SERVICE=/etc/init.d/${SYSTEM_NAME}\n        FILE_K3S_ENV=/etc/rancher/k3s/${SYSTEM_NAME}.env\n    fi\n\n    # --- get hash of config \u0026 exec for currently installed k3s ---\n    PRE_INSTALL_HASHES=$(get_installed_hashes)\n\n    # --- if bin directory is read only skip download ---\n    if [ \"${INSTALL_K3S_BIN_DIR_READ_ONLY}\" = true ]; then\n        INSTALL_K3S_SKIP_DOWNLOAD=true\n    fi\n\n    # --- setup channel values\n    INSTALL_K3S_CHANNEL_URL=${INSTALL_K3S_CHANNEL_URL:-'https://update.k3s.io/v1-release/channels'}\n    INSTALL_K3S_CHANNEL=${INSTALL_K3S_CHANNEL:-'stable'}\n}\n\n# --- check if skip download environment variable set ---\ncan_skip_download_binary() {\n    if [ \"${INSTALL_K3S_SKIP_DOWNLOAD}\" != true ] \u0026\u0026 [ \"${INSTALL_K3S_SKIP_DOWNLOAD}\" != binary ]; then\n        return 1\n    fi\n}\n\ncan_skip_download_selinux() {                                                        \n    if [ \"${INSTALL_K3S_SKIP_DOWNLOAD}\" != true ] \u0026\u0026 [ \"${INSTALL_K3S_SKIP_DOWNLOAD}\" != selinux ]; then \n        return 1                                                                     \n    fi                                                                               \n}  \n\n# --- verify an executable k3s binary is installed ---\nverify_k3s_is_executable() {\n    if [ ! -x ${BIN_DIR}/k3s ]; then\n        fatal \"Executable k3s binary not found at ${BIN_DIR}/k3s\"\n    fi\n}\n\n# --- set arch and suffix, fatal if architecture not supported ---\nsetup_verify_arch() {\n    if [ -z \"$ARCH\" ]; then\n        ARCH=$(uname -m)\n    fi\n    case $ARCH in\n        amd64)\n            ARCH=amd64\n            SUFFIX=\n            ;;\n        x86_64)\n            ARCH=amd64\n            SUFFIX=\n            ;;\n        arm64)\n            ARCH=arm64\n            SUFFIX=-${ARCH}\n            ;;\n        s390x)\n            ARCH=s390x\n            SUFFIX=-${ARCH}\n            ;;\n        aarch64)\n            ARCH=arm64\n            SUFFIX=-${ARCH}\n            ;;\n        arm*)\n            ARCH=arm\n            SUFFIX=-${ARCH}hf\n            ;;\n        *)\n            fatal \"Unsupported architecture $ARCH\"\n    esac\n}\n\n# --- verify existence of network downloader executable ---\nverify_downloader() {\n    # Return failure if it doesn't exist or is no executable\n    [ -x \"$(command -v $1)\" ] || return 1\n\n    # Set verified executable as our downloader program and return success\n    DOWNLOADER=$1\n    return 0\n}\n\n# --- create temporary directory and cleanup when done ---\nsetup_tmp() {\n    TMP_DIR=$(mktemp -d -t k3s-install.XXXXXXXXXX)\n    TMP_HASH=${TMP_DIR}/k3s.hash\n    TMP_ZIP=${TMP_DIR}/k3s.zip\n    TMP_BIN=${TMP_DIR}/k3s.bin\n    cleanup() {\n        code=$?\n        set +e\n        trap - EXIT\n        rm -rf ${TMP_DIR}\n        exit $code\n    }\n    trap cleanup INT EXIT\n}\n\n# --- use desired k3s version if defined or find version from channel ---\nget_release_version() {\n    if [ -n \"${INSTALL_K3S_PR}\" ]; then\n        VERSION_K3S=\"PR ${INSTALL_K3S_PR}\"\n        get_pr_artifact_url\n    elif [ -n \"${INSTALL_K3S_COMMIT}\" ]; then\n        VERSION_K3S=\"commit ${INSTALL_K3S_COMMIT}\"\n    elif [ -n \"${INSTALL_K3S_VERSION}\" ]; then\n        VERSION_K3S=${INSTALL_K3S_VERSION}\n    else\n        info \"Finding release for channel ${INSTALL_K3S_CHANNEL}\"\n        version_url=\"${INSTALL_K3S_CHANNEL_URL}/${INSTALL_K3S_CHANNEL}\"\n        case $DOWNLOADER in\n            curl)\n                VERSION_K3S=$(curl -w '%{url_effective}' -L -s -S ${version_url} -o /dev/null | sed -e 's|.*/||')\n                ;;\n            wget)\n                VERSION_K3S=$(wget -SqO /dev/null ${version_url} 2\u003e\u00261 | grep -i Location | sed -e 's|.*/||')\n                ;;\n            *)\n                fatal \"Incorrect downloader executable '$DOWNLOADER'\"\n                ;;\n        esac\n    fi\n    info \"Using ${VERSION_K3S} as release\"\n}\n\n# --- get k3s-selinux version ---\nget_k3s_selinux_version() {\n    available_version=\"k3s-selinux-1.2-2.${rpm_target}.noarch.rpm\"\n    info \"Finding available k3s-selinux versions\"\n    \n    # run verify_downloader in case it binary installation was skipped\n    verify_downloader curl || verify_downloader wget || fatal 'Can not find curl or wget for downloading files'\n\n    case $DOWNLOADER in\n        curl)\n            DOWNLOADER_OPTS=\"-s\"\n            ;;\n        wget)\n            DOWNLOADER_OPTS=\"-q -O -\"\n            ;;\n        *)\n            fatal \"Incorrect downloader executable '$DOWNLOADER'\"\n            ;;\n    esac\n    for i in {1..3}; do\n        set +e\n        if [ \"${rpm_channel}\" = \"testing\" ]; then\n            version=$(timeout 5 ${DOWNLOADER} ${DOWNLOADER_OPTS} https://api.github.com/repos/k3s-io/k3s-selinux/releases |  grep browser_download_url | awk '{ print $2 }' | grep -oE \"[^\\/]+${rpm_target}\\.noarch\\.rpm\" | head -n 1)\n        else\n            version=$(timeout 5 ${DOWNLOADER} ${DOWNLOADER_OPTS} https://api.github.com/repos/k3s-io/k3s-selinux/releases/latest |  grep browser_download_url | awk '{ print $2 }' | grep -oE \"[^\\/]+${rpm_target}\\.noarch\\.rpm\")\n        fi\n        set -e\n        if [ \"${version}\" != \"\" ]; then\n            break\n        fi\n        sleep 1\n    done\n    if [ \"${version}\" == \"\" ]; then\n        warn \"Failed to get available versions of k3s-selinux..defaulting to ${available_version}\"\n        return\n    fi\n    available_version=${version}\n}\n\n# --- download from github url ---\ndownload() {\n    [ $# -eq 2 ] || fatal 'download needs exactly 2 arguments'\n    set +e\n    case $DOWNLOADER in\n        curl)\n            curl -o $1 -sfL $2\n            ;;\n        wget)\n            wget -qO $1 $2\n            ;;\n        *)\n            fatal \"Incorrect executable '$DOWNLOADER'\"\n            ;;\n    esac\n\n    # Abort if download command failed\n    [ $? -eq 0 ] || fatal 'Download failed'\n    set -e\n}\n\n# --- download hash from github url ---\ndownload_hash() {\n    if [ -n \"${INSTALL_K3S_PR}\" ]; then\n        info \"Downloading hash ${GITHUB_PR_URL}\"\n        curl -s -o ${TMP_ZIP} -H \"Authorization: Bearer $GITHUB_TOKEN\" -L ${GITHUB_PR_URL}\n        unzip -p ${TMP_ZIP} k3s.sha256sum \u003e ${TMP_HASH}\n    else\n        if [ -n \"${INSTALL_K3S_COMMIT}\" ]; then\n            HASH_URL=${STORAGE_URL}/k3s${SUFFIX}-${INSTALL_K3S_COMMIT}.sha256sum\n        else\n            HASH_URL=${GITHUB_URL}/download/${VERSION_K3S}/sha256sum-${ARCH}.txt\n        fi\n        info \"Downloading hash ${HASH_URL}\"\n        download ${TMP_HASH} ${HASH_URL}\n    fi\n    HASH_EXPECTED=$(grep \" k3s${SUFFIX}$\" ${TMP_HASH})\n    HASH_EXPECTED=${HASH_EXPECTED%%[[:blank:]]*}\n}\n\n# --- check hash against installed version ---\ninstalled_hash_matches() {\n    if [ -x ${BIN_DIR}/k3s ]; then\n        HASH_INSTALLED=$(sha256sum ${BIN_DIR}/k3s)\n        HASH_INSTALLED=${HASH_INSTALLED%%[[:blank:]]*}\n        if [ \"${HASH_EXPECTED}\" = \"${HASH_INSTALLED}\" ]; then\n            return\n        fi\n    fi\n    return 1\n}\n\n# Use the GitHub API to identify the artifact associated with a given PR\nget_pr_artifact_url() {\n    github_api_url=https://api.github.com/repos/k3s-io/k3s\n\n    # Check if jq is installed\n    if ! [ -x \"$(command -v jq)\" ]; then\n        fatal \"Installing PR builds requires jq\"\n    fi\n\n    # Check if unzip is installed\n    if ! [ -x \"$(command -v unzip)\" ]; then\n        fatal \"Installing PR builds requires unzip\"\n    fi\n\n    if [ -z \"${GITHUB_TOKEN}\" ]; then\n        fatal \"Installing PR builds requires GITHUB_TOKEN with k3s-io/k3s repo permissions\"\n    fi\n\n    # GET request to the GitHub API to retrieve the latest commit SHA from the pull request\n    set +e\n    commit_id=$(curl -f -s -H \"Authorization: Bearer ${GITHUB_TOKEN}\" \"${github_api_url}/pulls/${INSTALL_K3S_PR}\" | jq -r '.head.sha')\n    set -e\n\n    if [ -z \"${commit_id}\" ]; then\n        fatal \"Installing PR builds requires GITHUB_TOKEN with k3s-io/k3s repo permissions\"\n    fi\n    \n    # GET request to the GitHub API to retrieve the Build workflow associated with the commit\n    wf_raw=$(curl -s -H \"Authorization: Bearer ${GITHUB_TOKEN}\" \"${github_api_url}/commits/${commit_id}/check-runs\")\n    build_workflow=$(printf \"%s\" \"${wf_raw}\" | jq -r '.check_runs[] |  select(.name == \"build / Build\")')\n    \n    # Extract the Run ID from the build workflow and lookup artifacts associated with the run\n    run_id=$(echo \"${build_workflow}\" | jq -r ' .details_url' | awk -F'/' '{print $(NF-2)}' | sort -rn | head -1)\n\n    # Extract the artifact ID for the \"k3s\" artifact    \n    artifacts=$(curl -s -H \"Authorization: Bearer ${GITHUB_TOKEN}\" \"${github_api_url}/actions/runs/${run_id}/artifacts\")\n    artifacts_url=$(echo \"${artifacts}\" | jq -r '.artifacts[] | select(.name == \"k3s\") | .archive_download_url')\n    GITHUB_PR_URL=\"${artifacts_url}\"\n}\n\n# --- download binary from github url ---\ndownload_binary() {\n    if [ -n \"${INSTALL_K3S_PR}\" ]; then\n        # Since Binary and Hash are zipped together, check if TMP_ZIP already exists\n        if ! [ -f ${TMP_ZIP} ]; then\n            info \"Downloading K3s artifact ${GITHUB_PR_URL}\"\n            curl -s -f -o ${TMP_ZIP} -H \"Authorization: Bearer $GITHUB_TOKEN\" -L ${GITHUB_PR_URL}\n        fi\n        # extract k3s binary from zip\n        unzip -p ${TMP_ZIP} k3s \u003e ${TMP_BIN}\n        return\n    elif [ -n \"${INSTALL_K3S_COMMIT}\" ]; then\n        BIN_URL=${STORAGE_URL}/k3s${SUFFIX}-${INSTALL_K3S_COMMIT}\n    else\n        BIN_URL=${GITHUB_URL}/download/${VERSION_K3S}/k3s${SUFFIX}\n    fi\n    info \"Downloading binary ${BIN_URL}\"\n    download ${TMP_BIN} ${BIN_URL}\n}\n\n# --- verify downloaded binary hash ---\nverify_binary() {\n    info \"Verifying binary download\"\n    HASH_BIN=$(sha256sum ${TMP_BIN})\n    HASH_BIN=${HASH_BIN%%[[:blank:]]*}\n    if [ \"${HASH_EXPECTED}\" != \"${HASH_BIN}\" ]; then\n        fatal \"Download sha256 does not match ${HASH_EXPECTED}, got ${HASH_BIN}\"\n    fi\n}\n\n# --- setup permissions and move binary to system directory ---\nsetup_binary() {\n    chmod 755 ${TMP_BIN}\n    info \"Installing k3s to ${BIN_DIR}/k3s\"\n    $SUDO chown root:root ${TMP_BIN}\n    $SUDO mv -f ${TMP_BIN} ${BIN_DIR}/k3s\n}\n\n# --- setup selinux policy ---\nsetup_selinux() {\n    case ${INSTALL_K3S_CHANNEL} in \n        *testing)\n            rpm_channel=testing\n            ;;\n        *latest)\n            rpm_channel=latest\n            ;;\n        *)\n            rpm_channel=stable\n            ;;\n    esac\n\n    rpm_site=\"rpm.rancher.io\"\n    if [ \"${rpm_channel}\" = \"testing\" ]; then\n        rpm_site=\"rpm-testing.rancher.io\"\n    fi\n\n    [ -r /etc/os-release ] \u0026\u0026 . /etc/os-release\n    if [ `expr \"${ID_LIKE}\" : \".*suse.*\"` != 0 ]; then\n        rpm_target=sle\n        rpm_site_infix=microos\n        package_installer=zypper\n        if [ \"${ID_LIKE:-}\" = suse ] \u0026\u0026 ( [ \"${VARIANT_ID:-}\" = sle-micro ] || [ \"${ID:-}\" = sle-micro ] ); then\n            rpm_target=sle\n            rpm_site_infix=slemicro\n            package_installer=zypper\n        fi\n    elif [ \"${ID_LIKE:-}\" = coreos ] || [ \"${VARIANT_ID:-}\" = coreos ] || [ \"${VARIANT_ID:-}\" = \"iot\" ]; then\n        rpm_target=coreos\n        rpm_site_infix=coreos\n        package_installer=rpm-ostree\n    elif [ \"${VERSION_ID%%.*}\" = \"7\" ] || ( [ \"${ID:-}\" = amzn ] \u0026\u0026 [ \"${VERSION_ID%%.*}\" = \"2\" ] ); then\n        rpm_target=el7\n        rpm_site_infix=centos/7\n        package_installer=yum\n    elif [ \"${VERSION_ID%%.*}\" = \"8\" ] || [ \"${VERSION_ID%%.*}\" = \"V10\" ] || [ \"${VERSION_ID%%.*}\" -gt \"36\" ]; then\n        rpm_target=el8\n        rpm_site_infix=centos/8\n        package_installer=yum\n    else\n        rpm_target=el9\n        rpm_site_infix=centos/9\n        package_installer=yum\n    fi\n\n    if [ \"${package_installer}\" = \"rpm-ostree\" ] \u0026\u0026 [ -x /bin/yum ]; then\n        package_installer=yum\n    fi\n\n    if [ \"${package_installer}\" = \"yum\" ] \u0026\u0026 [ -x /usr/bin/dnf ]; then\n        package_installer=dnf\n    fi\n\n    policy_hint=\"please install:\n    ${package_installer} install -y container-selinux\n    ${package_installer} install -y https://${rpm_site}/k3s/${rpm_channel}/common/${rpm_site_infix}/noarch/${available_version}\n\"\n\n    if [ \"$INSTALL_K3S_SKIP_SELINUX_RPM\" = true ] || can_skip_download_selinux || [ ! -d /usr/share/selinux ]; then\n        info \"Skipping installation of SELinux RPM\"\n        return\n    fi\n    \n    get_k3s_selinux_version\n    install_selinux_rpm ${rpm_site} ${rpm_channel} ${rpm_target} ${rpm_site_infix}\n\n    policy_error=fatal\n    if [ \"$INSTALL_K3S_SELINUX_WARN\" = true ] || [ \"${ID_LIKE:-}\" = coreos ] || \n       [ \"${VARIANT_ID:-}\" = coreos ] || [ \"${VARIANT_ID:-}\" = iot ]; then\n        policy_error=warn\n    fi\n\n    if ! $SUDO chcon -u system_u -r object_r -t container_runtime_exec_t ${BIN_DIR}/k3s \u003e/dev/null 2\u003e\u00261; then\n        if $SUDO grep '^\\s*SELINUX=enforcing' /etc/selinux/config \u003e/dev/null 2\u003e\u00261; then\n            $policy_error \"Failed to apply container_runtime_exec_t to ${BIN_DIR}/k3s, ${policy_hint}\"\n        fi\n    elif [ ! -f /usr/share/selinux/packages/k3s.pp ]; then\n        if [ -x /usr/sbin/transactional-update ] || [ \"${ID_LIKE:-}\" = coreos ] || [ \"${VARIANT_ID:-}\" = coreos ] || [ \"${VARIANT_ID:-}\" = iot ]; then\n            warn \"Please reboot your machine to activate the changes and avoid data loss.\"\n        else\n            $policy_error \"Failed to find the k3s-selinux policy, ${policy_hint}\"\n        fi\n    fi\n}\n\ninstall_selinux_rpm() {\n    if [ -r /etc/redhat-release ] || [ -r /etc/centos-release ] || [ -r /etc/oracle-release ] || \n       [ -r /etc/fedora-release ] || [ -r /etc/system-release ] || [ \"${ID_LIKE%%[ ]*}\" = \"suse\" ]; then\n        repodir=/etc/yum.repos.d\n        if [ -d /etc/zypp/repos.d ]; then\n            repodir=/etc/zypp/repos.d\n        fi\n        set +o noglob\n        $SUDO rm -f ${repodir}/rancher-k3s-common*.repo\n        set -o noglob\n        if [ -r /etc/redhat-release ] \u0026\u0026 [ \"${3}\" = \"el7\" ]; then\n            $SUDO yum install -y yum-utils\n            $SUDO yum-config-manager --enable rhel-7-server-extras-rpms\n        fi\n        $SUDO tee ${repodir}/rancher-k3s-common.repo \u003e/dev/null \u003c\u003c EOF\n[rancher-k3s-common-${2}]\nname=Rancher K3s Common (${2})\nbaseurl=https://${1}/k3s/${2}/common/${4}/noarch\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=0\ngpgkey=https://${1}/public.key\nEOF\n        case ${3} in\n        sle)\n            rpm_installer=\"zypper --gpg-auto-import-keys\"\n            if [ \"${TRANSACTIONAL_UPDATE=false}\" != \"true\" ] \u0026\u0026 [ -x /usr/sbin/transactional-update ]; then\n                transactional_update_run=\"transactional-update --no-selfupdate -d run\"\n                rpm_installer=\"transactional-update --no-selfupdate -d run ${rpm_installer}\"\n                : \"${INSTALL_K3S_SKIP_START:=true}\"\n            fi\n            # create the /var/lib/rpm-state in SLE systems to fix the prein selinux macro\n            $SUDO ${transactional_update_run} mkdir -p /var/lib/rpm-state\n            ;;\n        coreos)\n            rpm_installer=\"rpm-ostree --idempotent\"\n            # rpm_install_extra_args=\"--apply-live\"\n            : \"${INSTALL_K3S_SKIP_START:=true}\"\n            ;;\n        *)\n            rpm_installer=\"yum\"\n            ;;\n        esac\n        if [ \"${rpm_installer}\" = \"yum\" ] \u0026\u0026 [ -x /usr/bin/dnf ]; then\n            rpm_installer=dnf\n        fi\n\t    if rpm -q --quiet k3s-selinux; then \n            # remove k3s-selinux module before upgrade to allow container-selinux to upgrade safely\n            if check_available_upgrades container-selinux ${3} \u0026\u0026 check_available_upgrades k3s-selinux ${3}; then\n                MODULE_PRIORITY=$($SUDO semodule --list=full | grep k3s | cut -f1 -d\" \")\n                if [ -n \"${MODULE_PRIORITY}\" ]; then\n                    $SUDO semodule -X $MODULE_PRIORITY -r k3s || true\n                fi\n            fi\n        fi\n        # shellcheck disable=SC2086\n        $SUDO ${rpm_installer} install -y \"k3s-selinux\"\n    fi\n    return\n}\n\ncheck_available_upgrades() {\n    set +e\n    case ${2} in\n        sle)\n            available_upgrades=$($SUDO zypper -q -t -s 11 se -s -u --type package $1 | tail -n 1 | grep -v \"No matching\" | awk '{print $3}')\n            ;;\n        coreos)\n            # currently rpm-ostree does not support search functionality https://github.com/coreos/rpm-ostree/issues/1877\n            ;;\n        *)\n            available_upgrades=$($SUDO yum -q --refresh list $1 --upgrades | tail -n 1 | awk '{print $2}')\n            ;;\n    esac\n    set -e\n    if [ -n \"${available_upgrades}\" ]; then\n        return 0\n    fi\n    return 1\n}\n# --- download and verify k3s ---\ndownload_and_verify() {\n    if can_skip_download_binary; then\n       info 'Skipping k3s download and verify'\n       verify_k3s_is_executable\n       return\n    fi\n\n    setup_verify_arch\n    verify_downloader curl || verify_downloader wget || fatal 'Can not find curl or wget for downloading files'\n    setup_tmp\n    get_release_version\n    download_hash\n\n    if installed_hash_matches; then\n        info 'Skipping binary downloaded, installed k3s matches hash'\n        return\n    fi\n\n    download_binary\n    verify_binary\n    setup_binary\n}\n\n# --- add additional utility links ---\ncreate_symlinks() {\n    [ \"${INSTALL_K3S_BIN_DIR_READ_ONLY}\" = true ] \u0026\u0026 return\n    [ \"${INSTALL_K3S_SYMLINK}\" = skip ] \u0026\u0026 return\n\n    for cmd in kubectl crictl ctr; do\n        if [ ! -e ${BIN_DIR}/${cmd} ] || [ \"${INSTALL_K3S_SYMLINK}\" = force ]; then\n            which_cmd=$(command -v ${cmd} 2\u003e/dev/null || true)\n            if [ -z \"${which_cmd}\" ] || [ \"${INSTALL_K3S_SYMLINK}\" = force ]; then\n                info \"Creating ${BIN_DIR}/${cmd} symlink to k3s\"\n                $SUDO ln -sf k3s ${BIN_DIR}/${cmd}\n            else\n                info \"Skipping ${BIN_DIR}/${cmd} symlink to k3s, command exists in PATH at ${which_cmd}\"\n            fi\n        else\n            info \"Skipping ${BIN_DIR}/${cmd} symlink to k3s, already exists\"\n        fi\n    done\n}\n\n# --- create killall script ---\ncreate_killall() {\n    [ \"${INSTALL_K3S_BIN_DIR_READ_ONLY}\" = true ] \u0026\u0026 return\n    info \"Creating killall script ${KILLALL_K3S_SH}\"\n    $SUDO tee ${KILLALL_K3S_SH} \u003e/dev/null \u003c\u003c \\EOF\n#!/bin/sh\n[ $(id -u) -eq 0 ] || exec sudo $0 $@\n\nK3S_DATA_DIR=${K3S_DATA_DIR:-/var/lib/rancher/k3s}\n\nfor bin in ${K3S_DATA_DIR}/data/**/bin/; do\n    [ -d $bin ] \u0026\u0026 export PATH=$PATH:$bin:$bin/aux\ndone\n\nset -x\n\nfor service in /etc/systemd/system/k3s*.service; do\n    [ -s $service ] \u0026\u0026 systemctl stop $(basename $service)\ndone\n\nfor service in /etc/init.d/k3s*; do\n    [ -x $service ] \u0026\u0026 $service stop\ndone\n\npschildren() {\n    ps -e -o ppid= -o pid= | \\\n    sed -e 's/^\\s*//g; s/\\s\\s*/\\t/g;' | \\\n    grep -w \"^$1\" | \\\n    cut -f2\n}\n\npstree() {\n    for pid in $@; do\n        echo $pid\n        for child in $(pschildren $pid); do\n            pstree $child\n        done\n    done\n}\n\nkilltree() {\n    kill -9 $(\n        { set +x; } 2\u003e/dev/null;\n        pstree $@;\n        set -x;\n    ) 2\u003e/dev/null\n}\n\nremove_interfaces() {\n    # Delete network interface(s) that match 'master cni0'\n    ip link show 2\u003e/dev/null | grep 'master cni0' | while read ignore iface ignore; do\n        iface=${iface%%@*}\n        [ -z \"$iface\" ] || ip link delete $iface\n    done\n\n    # Delete cni related interfaces\n    ip link delete cni0\n    ip link delete flannel.1\n    ip link delete flannel-v6.1\n    ip link delete kube-ipvs0\n    ip link delete flannel-wg\n    ip link delete flannel-wg-v6\n\n    # Restart tailscale\n    if [ -n \"$(command -v tailscale)\" ]; then\n        tailscale set --advertise-routes=\n    fi\n}\n\ngetshims() {\n    ps -e -o pid= -o args= | sed -e 's/^ *//; s/\\s\\s*/\\t/;' | grep -w \"${K3S_DATA_DIR}\"'/data/[^/]*/bin/containerd-shim' | cut -f1\n}\n\nkilltree $({ set +x; } 2\u003e/dev/null; getshims; set -x)\n\ndo_unmount_and_remove() {\n    set +x\n    while read -r _ path _; do\n        case \"$path\" in $1*) echo \"$path\" ;; esac\n    done \u003c /proc/self/mounts | sort -r | xargs -r -t -n 1 sh -c 'umount -f \"$0\" \u0026\u0026 rm -rf \"$0\"'\n    set -x\n}\n\ndo_unmount_and_remove '/run/k3s'\ndo_unmount_and_remove '/var/lib/kubelet/pods'\ndo_unmount_and_remove '/var/lib/kubelet/plugins'\ndo_unmount_and_remove '/run/netns/cni-'\n\n# Remove CNI namespaces\nip netns show 2\u003e/dev/null | grep cni- | xargs -r -t -n 1 ip netns delete\n\nremove_interfaces\n\nrm -rf /var/lib/cni/\niptables-save | grep -v KUBE- | grep -v CNI- | grep -iv flannel | iptables-restore\nip6tables-save | grep -v KUBE- | grep -v CNI- | grep -iv flannel | ip6tables-restore\nEOF\n    $SUDO chmod 755 ${KILLALL_K3S_SH}\n    $SUDO chown root:root ${KILLALL_K3S_SH}\n}\n\n# --- create uninstall script ---\ncreate_uninstall() {\n    [ \"${INSTALL_K3S_BIN_DIR_READ_ONLY}\" = true ] \u0026\u0026 return\n    info \"Creating uninstall script ${UNINSTALL_K3S_SH}\"\n    $SUDO tee ${UNINSTALL_K3S_SH} \u003e/dev/null \u003c\u003c EOF\n#!/bin/sh\nset -x\n[ \\$(id -u) -eq 0 ] || exec sudo \\$0 \\$@\n\nK3S_DATA_DIR=\\${K3S_DATA_DIR:-/var/lib/rancher/k3s}\n\n${KILLALL_K3S_SH}\n\nif command -v systemctl; then\n    systemctl disable ${SYSTEM_NAME}\n    systemctl reset-failed ${SYSTEM_NAME}\n    systemctl daemon-reload\nfi\nif command -v rc-update; then\n    rc-update delete ${SYSTEM_NAME} default\nfi\n\nrm -f ${FILE_K3S_SERVICE}\nrm -f ${FILE_K3S_ENV}\n\nremove_uninstall() {\n    rm -f ${UNINSTALL_K3S_SH}\n}\ntrap remove_uninstall EXIT\n\nif (ls ${SYSTEMD_DIR}/k3s*.service || ls /etc/init.d/k3s*) \u003e/dev/null 2\u003e\u00261; then\n    set +x; echo 'Additional k3s services installed, skipping uninstall of k3s'; set -x\n    exit\nfi\n\nfor cmd in kubectl crictl ctr; do\n    if [ -L ${BIN_DIR}/\\$cmd ]; then\n        rm -f ${BIN_DIR}/\\$cmd\n    fi\ndone\n\nclean_mounted_directory() {\n    if ! grep -q \" \\$1\" /proc/mounts; then\n        rm -rf \"\\$1\"\n\treturn 0\n    fi\n\n    for path in \"\\$1\"/*; do\n        if [ -d \"\\$path\" ]; then\n            if grep -q \" \\$path\" /proc/mounts; then\n                clean_mounted_directory \"\\$path\"\n            else\n                rm -rf \"\\$path\"\n            fi\n        else\n            rm \"\\$path\"\n        fi\n     done\n}\n\nrm -rf /etc/rancher/k3s\nrm -rf /run/k3s\nrm -rf /run/flannel\nclean_mounted_directory \\${K3S_DATA_DIR}\nrm -rf /var/lib/kubelet\nrm -f ${BIN_DIR}/k3s\nrm -f ${KILLALL_K3S_SH}\n\nif type yum \u003e/dev/null 2\u003e\u00261; then\n    yum remove -y k3s-selinux\n    rm -f /etc/yum.repos.d/rancher-k3s-common*.repo\nelif type rpm-ostree \u003e/dev/null 2\u003e\u00261; then\n    rpm-ostree uninstall k3s-selinux\n    rm -f /etc/yum.repos.d/rancher-k3s-common*.repo\nelif type zypper \u003e/dev/null 2\u003e\u00261; then\n    uninstall_cmd=\"zypper remove -y k3s-selinux\"\n    if [ \"\\${TRANSACTIONAL_UPDATE=false}\" != \"true\" ] \u0026\u0026 [ -x /usr/sbin/transactional-update ]; then\n        uninstall_cmd=\"transactional-update --no-selfupdate -d run \\$uninstall_cmd\"\n    fi\n    $SUDO \\$uninstall_cmd\n    rm -f /etc/zypp/repos.d/rancher-k3s-common*.repo\nfi\nEOF\n    $SUDO chmod 755 ${UNINSTALL_K3S_SH}\n    $SUDO chown root:root ${UNINSTALL_K3S_SH}\n}\n\n# --- disable current service if loaded --\nsystemd_disable() {\n    $SUDO systemctl disable ${SYSTEM_NAME} \u003e/dev/null 2\u003e\u00261 || true\n    $SUDO rm -f /etc/systemd/system/${SERVICE_K3S} || true\n    $SUDO rm -f /etc/systemd/system/${SERVICE_K3S}.env || true\n}\n\n# --- capture current env and create file containing k3s_ variables ---\ncreate_env_file() {\n    info \"env: Creating environment file ${FILE_K3S_ENV}\"\n    $SUDO touch ${FILE_K3S_ENV}\n    $SUDO chmod 0600 ${FILE_K3S_ENV}\n    sh -c export | while read x v; do echo $v; done | grep -E '^(K3S|CONTAINERD)_' | $SUDO tee ${FILE_K3S_ENV} \u003e/dev/null\n    sh -c export | while read x v; do echo $v; done | grep -Ei '^(NO|HTTP|HTTPS)_PROXY' | $SUDO tee -a ${FILE_K3S_ENV} \u003e/dev/null\n}\n\n# --- write systemd service file ---\ncreate_systemd_service_file() {\n    info \"systemd: Creating service file ${FILE_K3S_SERVICE}\"\n    $SUDO tee ${FILE_K3S_SERVICE} \u003e/dev/null \u003c\u003c EOF\n[Unit]\nDescription=Lightweight Kubernetes\nDocumentation=https://k3s.io\nWants=network-online.target\nAfter=network-online.target\n\n[Install]\nWantedBy=multi-user.target\n\n[Service]\nType=${SYSTEMD_TYPE}\nEnvironmentFile=-/etc/default/%N\nEnvironmentFile=-/etc/sysconfig/%N\nEnvironmentFile=-${FILE_K3S_ENV}\nKillMode=process\nDelegate=yes\n# Having non-zero Limit*s causes performance problems due to accounting overhead\n# in the kernel. We recommend using cgroups to do container-local accounting.\nLimitNOFILE=1048576\nLimitNPROC=infinity\nLimitCORE=infinity\nTasksMax=infinity\nTimeoutStartSec=0\nRestart=always\nRestartSec=5s\nExecStartPre=/bin/sh -xc '! /usr/bin/systemctl is-enabled --quiet nm-cloud-setup.service 2\u003e/dev/null'\nExecStartPre=-/sbin/modprobe br_netfilter\nExecStartPre=-/sbin/modprobe overlay\nExecStart=${BIN_DIR}/k3s \\\\\n    ${CMD_K3S_EXEC}\n\nEOF\n}\n\n# --- write openrc service file ---\ncreate_openrc_service_file() {\n    LOG_FILE=/var/log/${SYSTEM_NAME}.log\n\n    info \"openrc: Creating service file ${FILE_K3S_SERVICE}\"\n    $SUDO tee ${FILE_K3S_SERVICE} \u003e/dev/null \u003c\u003c EOF\n#!/sbin/openrc-run\n\ndepend() {\n    after network-online\n    want cgroups\n}\n\nstart_pre() {\n    rm -f /tmp/k3s.*\n}\n\nsupervisor=supervise-daemon\nname=${SYSTEM_NAME}\ncommand=\"${BIN_DIR}/k3s\"\ncommand_args=\"$(escape_dq \"${CMD_K3S_EXEC}\")\n    \u003e\u003e${LOG_FILE} 2\u003e\u00261\"\n\noutput_log=${LOG_FILE}\nerror_log=${LOG_FILE}\n\npidfile=\"/var/run/${SYSTEM_NAME}.pid\"\nrespawn_delay=5\nrespawn_max=0\n\nset -o allexport\nif [ -f /etc/environment ]; then . /etc/environment; fi\nif [ -f ${FILE_K3S_ENV} ]; then . ${FILE_K3S_ENV}; fi\nset +o allexport\nEOF\n    $SUDO chmod 0755 ${FILE_K3S_SERVICE}\n\n    $SUDO tee /etc/logrotate.d/${SYSTEM_NAME} \u003e/dev/null \u003c\u003c EOF\n${LOG_FILE} {\n\tmissingok\n\tnotifempty\n\tcopytruncate\n}\nEOF\n}\n\n# --- write systemd or openrc service file ---\ncreate_service_file() {\n    [ \"${HAS_SYSTEMD}\" = true ] \u0026\u0026 create_systemd_service_file \u0026\u0026 restore_systemd_service_file_context\n    [ \"${HAS_OPENRC}\" = true ] \u0026\u0026 create_openrc_service_file\n    return 0\n}\n\nrestore_systemd_service_file_context() {\n    $SUDO restorecon -R -i ${FILE_K3S_SERVICE} 2\u003e/dev/null || true\n    $SUDO restorecon -R -i ${FILE_K3S_ENV} 2\u003e/dev/null || true\n}\n\n# --- get hashes of the current k3s bin and service files\nget_installed_hashes() {\n    $SUDO sha256sum ${BIN_DIR}/k3s ${FILE_K3S_SERVICE} ${FILE_K3S_ENV} 2\u003e\u00261 || true\n}\n\n# --- enable and start systemd service ---\nsystemd_enable() {\n    info \"systemd: Enabling ${SYSTEM_NAME} unit\"\n    $SUDO systemctl enable ${FILE_K3S_SERVICE} \u003e/dev/null\n    $SUDO systemctl daemon-reload \u003e/dev/null\n}\n\nsystemd_start() {\n    info \"systemd: Starting ${SYSTEM_NAME}\"\n    $SUDO systemctl restart ${SYSTEM_NAME}\n}\n\n# --- enable and start openrc service ---\nopenrc_enable() {\n    info \"openrc: Enabling ${SYSTEM_NAME} service for default runlevel\"\n    $SUDO rc-update add ${SYSTEM_NAME} default \u003e/dev/null\n}\n\nopenrc_start() {\n    info \"openrc: Starting ${SYSTEM_NAME}\"\n    $SUDO ${FILE_K3S_SERVICE} restart\n}\n\nhas_working_xtables() {\n    if $SUDO sh -c \"command -v \\\"$1-save\\\"\" 1\u003e /dev/null \u0026\u0026 $SUDO sh -c \"command -v \\\"$1-restore\\\"\" 1\u003e /dev/null; then\n        if $SUDO $1-save 2\u003e/dev/null | grep -q '^-A CNI-HOSTPORT-MASQ -j MASQUERADE$'; then\n            warn \"Host $1-save/$1-restore tools are incompatible with existing rules\"\n        else\n            return 0\n        fi\n    else\n        info \"Host $1-save/$1-restore tools not found\"\n    fi\n    return 1\n}\n\n# --- startup systemd or openrc service ---\nservice_enable_and_start() {\n    if [ -f \"/proc/cgroups\" ] \u0026\u0026 [ \"$(grep memory /proc/cgroups | while read -r n n n enabled; do echo $enabled; done)\" -eq 0 ];\n    then\n        info 'Failed to find memory cgroup, you may need to add \"cgroup_memory=1 cgroup_enable=memory\" to your linux cmdline (/boot/cmdline.txt on a Raspberry Pi)'\n    fi\n\n    [ \"${INSTALL_K3S_SKIP_ENABLE}\" = true ] \u0026\u0026 return\n\n    [ \"${HAS_SYSTEMD}\" = true ] \u0026\u0026 systemd_enable\n    [ \"${HAS_OPENRC}\" = true ] \u0026\u0026 openrc_enable\n\n    [ \"${INSTALL_K3S_SKIP_START}\" = true ] \u0026\u0026 return\n\n    POST_INSTALL_HASHES=$(get_installed_hashes)\n    if [ \"${PRE_INSTALL_HASHES}\" = \"${POST_INSTALL_HASHES}\" ] \u0026\u0026 [ \"${INSTALL_K3S_FORCE_RESTART}\" != true ]; then\n        info 'No change detected so skipping service start'\n        return\n    fi\n\n    for XTABLES in iptables ip6tables; do\n        if has_working_xtables ${XTABLES}; then\n            $SUDO ${XTABLES}-save 2\u003e/dev/null | grep -v KUBE- | grep -iv flannel | $SUDO ${XTABLES}-restore\n        fi\n    done\n\n    [ \"${HAS_SYSTEMD}\" = true ] \u0026\u0026 systemd_start\n    [ \"${HAS_OPENRC}\" = true ] \u0026\u0026 openrc_start\n    return 0\n}\n\n# --- re-evaluate args to include env command ---\neval set -- $(escape \"${INSTALL_K3S_EXEC}\") $(quote \"$@\")\n\n# --- run the install process --\n{\n    verify_system\n    setup_env \"$@\"\n    download_and_verify\n    setup_selinux\n    create_symlinks\n    create_killall\n    create_uninstall\n    systemd_disable\n    create_env_file\n    create_service_file\n    service_enable_and_start\n}\n\n",
            "ca_cert_pem": null,
            "id": "https://raw.githubusercontent.com/rancher/k3s/v1.31.2+k3s1/install.sh",
            "insecure": null,
            "method": null,
            "request_body": null,
            "request_headers": null,
            "request_timeout_ms": null,
            "response_body": "#!/bin/sh\nset -e\nset -o noglob\n\n# Usage:\n#   curl ... | ENV_VAR=... sh -\n#       or\n#   ENV_VAR=... ./install.sh\n#\n# Example:\n#   Installing a server without traefik:\n#     curl ... | INSTALL_K3S_EXEC=\"--disable=traefik\" sh -\n#   Installing an agent to point at a server:\n#     curl ... | K3S_TOKEN=xxx K3S_URL=https://server-url:6443 sh -\n#\n# Environment variables:\n#   - K3S_*\n#     Environment variables which begin with K3S_ will be preserved for the\n#     systemd service to use. Setting K3S_URL without explicitly setting\n#     a systemd exec command will default the command to \"agent\", and we\n#     enforce that K3S_TOKEN is also set.\n#\n#   - INSTALL_K3S_SKIP_DOWNLOAD\n#     If set to true will not download k3s hash or binary.\n#\n#   - INSTALL_K3S_FORCE_RESTART\n#     If set to true will always restart the K3s service\n#\n#   - INSTALL_K3S_SYMLINK\n#     If set to 'skip' will not create symlinks, 'force' will overwrite,\n#     default will symlink if command does not exist in path.\n#\n#   - INSTALL_K3S_SKIP_ENABLE\n#     If set to true will not enable or start k3s service.\n#\n#   - INSTALL_K3S_SKIP_START\n#     If set to true will not start k3s service.\n#\n#   - INSTALL_K3S_VERSION\n#     Version of k3s to download from github. Will attempt to download from the\n#     stable channel if not specified.\n#\n#   - INSTALL_K3S_COMMIT\n#     Commit of k3s to download from temporary cloud storage.\n#     * (for developer \u0026 QA use)\n#\n#   - INSTALL_K3S_PR\n#     PR build of k3s to download from Github Artifacts.\n#     * (for developer \u0026 QA use)\n#\n#   - INSTALL_K3S_BIN_DIR\n#     Directory to install k3s binary, links, and uninstall script to, or use\n#     /usr/local/bin as the default\n#\n#   - INSTALL_K3S_BIN_DIR_READ_ONLY\n#     If set to true will not write files to INSTALL_K3S_BIN_DIR, forces\n#     setting INSTALL_K3S_SKIP_DOWNLOAD=true\n#\n#   - INSTALL_K3S_SYSTEMD_DIR\n#     Directory to install systemd service and environment files to, or use\n#     /etc/systemd/system as the default\n#\n#   - INSTALL_K3S_EXEC or script arguments\n#     Command with flags to use for launching k3s in the systemd service, if\n#     the command is not specified will default to \"agent\" if K3S_URL is set\n#     or \"server\" if not. The final systemd command resolves to a combination\n#     of EXEC and script args ($@).\n#\n#     The following commands result in the same behavior:\n#       curl ... | INSTALL_K3S_EXEC=\"--disable=traefik\" sh -s -\n#       curl ... | INSTALL_K3S_EXEC=\"server --disable=traefik\" sh -s -\n#       curl ... | INSTALL_K3S_EXEC=\"server\" sh -s - --disable=traefik\n#       curl ... | sh -s - server --disable=traefik\n#       curl ... | sh -s - --disable=traefik\n#\n#   - INSTALL_K3S_NAME\n#     Name of systemd service to create, will default from the k3s exec command\n#     if not specified. If specified the name will be prefixed with 'k3s-'.\n#\n#   - INSTALL_K3S_TYPE\n#     Type of systemd service to create, will default from the k3s exec command\n#     if not specified.\n#\n#   - INSTALL_K3S_SELINUX_WARN\n#     If set to true will continue if k3s-selinux policy is not found.\n#\n#   - INSTALL_K3S_SKIP_SELINUX_RPM\n#     If set to true will skip automatic installation of the k3s RPM.\n#\n#   - INSTALL_K3S_CHANNEL_URL\n#     Channel URL for fetching k3s download URL.\n#     Defaults to 'https://update.k3s.io/v1-release/channels'.\n#\n#   - INSTALL_K3S_CHANNEL\n#     Channel to use for fetching k3s download URL.\n#     Defaults to 'stable'.\n\nGITHUB_URL=https://github.com/k3s-io/k3s/releases\nGITHUB_PR_URL=\"\"\nSTORAGE_URL=https://k3s-ci-builds.s3.amazonaws.com\nDOWNLOADER=\n\n# --- helper functions for logs ---\ninfo()\n{\n    echo '[INFO] ' \"$@\"\n}\nwarn()\n{\n    echo '[WARN] ' \"$@\" \u003e\u00262\n}\nfatal()\n{\n    echo '[ERROR] ' \"$@\" \u003e\u00262\n    exit 1\n}\n\n# --- fatal if no systemd or openrc ---\nverify_system() {\n    if [ -x /sbin/openrc-run ]; then\n        HAS_OPENRC=true\n        return\n    fi\n    if [ -x /bin/systemctl ] || type systemctl \u003e /dev/null 2\u003e\u00261; then\n        HAS_SYSTEMD=true\n        return\n    fi\n    fatal 'Can not find systemd or openrc to use as a process supervisor for k3s'\n}\n\n# --- add quotes to command arguments ---\nquote() {\n    for arg in \"$@\"; do\n        printf '%s\\n' \"$arg\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/'/\"\n    done\n}\n\n# --- add indentation and trailing slash to quoted args ---\nquote_indent() {\n    printf ' \\\\\\n'\n    for arg in \"$@\"; do\n        printf '\\t%s \\\\\\n' \"$(quote \"$arg\")\"\n    done\n}\n\n# --- escape most punctuation characters, except quotes, forward slash, and space ---\nescape() {\n    printf '%s' \"$@\" | sed -e 's/\\([][!#$%\u0026()*;\u003c=\u003e?\\_`{|}]\\)/\\\\\\1/g;'\n}\n\n# --- escape double quotes ---\nescape_dq() {\n    printf '%s' \"$@\" | sed -e 's/\"/\\\\\"/g'\n}\n\n# --- ensures $K3S_URL is empty or begins with https://, exiting fatally otherwise ---\nverify_k3s_url() {\n    case \"${K3S_URL}\" in\n        \"\")\n            ;;\n        https://*)\n            ;;\n        *)\n            fatal \"Only https:// URLs are supported for K3S_URL (have ${K3S_URL})\"\n            ;;\n    esac\n}\n\n# --- define needed environment variables ---\nsetup_env() {\n    # --- use command args if passed or create default ---\n    case \"$1\" in\n        # --- if we only have flags discover if command should be server or agent ---\n        (-*|\"\")\n            if [ -z \"${K3S_URL}\" ]; then\n                CMD_K3S=server\n            else\n                if [ -z \"${K3S_TOKEN}\" ] \u0026\u0026 [ -z \"${K3S_TOKEN_FILE}\" ]; then\n                    fatal \"Defaulted k3s exec command to 'agent' because K3S_URL is defined, but K3S_TOKEN or K3S_TOKEN_FILE is not defined.\"\n                fi\n                CMD_K3S=agent\n            fi\n        ;;\n        # --- command is provided ---\n        (*)\n            CMD_K3S=$1\n            shift\n        ;;\n    esac\n\n    verify_k3s_url\n\n    CMD_K3S_EXEC=\"${CMD_K3S}$(quote_indent \"$@\")\"\n\n    # --- use systemd name if defined or create default ---\n    if [ -n \"${INSTALL_K3S_NAME}\" ]; then\n        SYSTEM_NAME=k3s-${INSTALL_K3S_NAME}\n    else\n        if [ \"${CMD_K3S}\" = server ]; then\n            SYSTEM_NAME=k3s\n        else\n            SYSTEM_NAME=k3s-${CMD_K3S}\n        fi\n    fi\n\n    # --- check for invalid characters in system name ---\n    valid_chars=$(printf '%s' \"${SYSTEM_NAME}\" | sed -e 's/[][!#$%\u0026()*;\u003c=\u003e?\\_`{|}/[:space:]]/^/g;' )\n    if [ \"${SYSTEM_NAME}\" != \"${valid_chars}\"  ]; then\n        invalid_chars=$(printf '%s' \"${valid_chars}\" | sed -e 's/[^^]/ /g')\n        fatal \"Invalid characters for system name:\n            ${SYSTEM_NAME}\n            ${invalid_chars}\"\n    fi\n\n    # --- use sudo if we are not already root ---\n    SUDO=sudo\n    if [ $(id -u) -eq 0 ]; then\n        SUDO=\n    fi\n\n    # --- use systemd type if defined or create default ---\n    if [ -n \"${INSTALL_K3S_TYPE}\" ]; then\n        SYSTEMD_TYPE=${INSTALL_K3S_TYPE}\n    else\n        SYSTEMD_TYPE=notify\n    fi\n\n    # --- use binary install directory if defined or create default ---\n    if [ -n \"${INSTALL_K3S_BIN_DIR}\" ]; then\n        BIN_DIR=${INSTALL_K3S_BIN_DIR}\n    else\n        # --- use /usr/local/bin if root can write to it, otherwise use /opt/bin if it exists\n        BIN_DIR=/usr/local/bin\n        if ! $SUDO sh -c \"touch ${BIN_DIR}/k3s-ro-test \u0026\u0026 rm -rf ${BIN_DIR}/k3s-ro-test\"; then\n            if [ -d /opt/bin ]; then\n                BIN_DIR=/opt/bin\n            fi\n        fi\n    fi\n\n    # --- use systemd directory if defined or create default ---\n    if [ -n \"${INSTALL_K3S_SYSTEMD_DIR}\" ]; then\n        SYSTEMD_DIR=\"${INSTALL_K3S_SYSTEMD_DIR}\"\n    else\n        SYSTEMD_DIR=/etc/systemd/system\n    fi\n\n    # --- set related files from system name ---\n    SERVICE_K3S=${SYSTEM_NAME}.service\n    UNINSTALL_K3S_SH=${UNINSTALL_K3S_SH:-${BIN_DIR}/${SYSTEM_NAME}-uninstall.sh}\n    KILLALL_K3S_SH=${KILLALL_K3S_SH:-${BIN_DIR}/k3s-killall.sh}\n\n    # --- use service or environment location depending on systemd/openrc ---\n    if [ \"${HAS_SYSTEMD}\" = true ]; then\n        FILE_K3S_SERVICE=${SYSTEMD_DIR}/${SERVICE_K3S}\n        FILE_K3S_ENV=${SYSTEMD_DIR}/${SERVICE_K3S}.env\n    elif [ \"${HAS_OPENRC}\" = true ]; then\n        $SUDO mkdir -p /etc/rancher/k3s\n        FILE_K3S_SERVICE=/etc/init.d/${SYSTEM_NAME}\n        FILE_K3S_ENV=/etc/rancher/k3s/${SYSTEM_NAME}.env\n    fi\n\n    # --- get hash of config \u0026 exec for currently installed k3s ---\n    PRE_INSTALL_HASHES=$(get_installed_hashes)\n\n    # --- if bin directory is read only skip download ---\n    if [ \"${INSTALL_K3S_BIN_DIR_READ_ONLY}\" = true ]; then\n        INSTALL_K3S_SKIP_DOWNLOAD=true\n    fi\n\n    # --- setup channel values\n    INSTALL_K3S_CHANNEL_URL=${INSTALL_K3S_CHANNEL_URL:-'https://update.k3s.io/v1-release/channels'}\n    INSTALL_K3S_CHANNEL=${INSTALL_K3S_CHANNEL:-'stable'}\n}\n\n# --- check if skip download environment variable set ---\ncan_skip_download_binary() {\n    if [ \"${INSTALL_K3S_SKIP_DOWNLOAD}\" != true ] \u0026\u0026 [ \"${INSTALL_K3S_SKIP_DOWNLOAD}\" != binary ]; then\n        return 1\n    fi\n}\n\ncan_skip_download_selinux() {                                                        \n    if [ \"${INSTALL_K3S_SKIP_DOWNLOAD}\" != true ] \u0026\u0026 [ \"${INSTALL_K3S_SKIP_DOWNLOAD}\" != selinux ]; then \n        return 1                                                                     \n    fi                                                                               \n}  \n\n# --- verify an executable k3s binary is installed ---\nverify_k3s_is_executable() {\n    if [ ! -x ${BIN_DIR}/k3s ]; then\n        fatal \"Executable k3s binary not found at ${BIN_DIR}/k3s\"\n    fi\n}\n\n# --- set arch and suffix, fatal if architecture not supported ---\nsetup_verify_arch() {\n    if [ -z \"$ARCH\" ]; then\n        ARCH=$(uname -m)\n    fi\n    case $ARCH in\n        amd64)\n            ARCH=amd64\n            SUFFIX=\n            ;;\n        x86_64)\n            ARCH=amd64\n            SUFFIX=\n            ;;\n        arm64)\n            ARCH=arm64\n            SUFFIX=-${ARCH}\n            ;;\n        s390x)\n            ARCH=s390x\n            SUFFIX=-${ARCH}\n            ;;\n        aarch64)\n            ARCH=arm64\n            SUFFIX=-${ARCH}\n            ;;\n        arm*)\n            ARCH=arm\n            SUFFIX=-${ARCH}hf\n            ;;\n        *)\n            fatal \"Unsupported architecture $ARCH\"\n    esac\n}\n\n# --- verify existence of network downloader executable ---\nverify_downloader() {\n    # Return failure if it doesn't exist or is no executable\n    [ -x \"$(command -v $1)\" ] || return 1\n\n    # Set verified executable as our downloader program and return success\n    DOWNLOADER=$1\n    return 0\n}\n\n# --- create temporary directory and cleanup when done ---\nsetup_tmp() {\n    TMP_DIR=$(mktemp -d -t k3s-install.XXXXXXXXXX)\n    TMP_HASH=${TMP_DIR}/k3s.hash\n    TMP_ZIP=${TMP_DIR}/k3s.zip\n    TMP_BIN=${TMP_DIR}/k3s.bin\n    cleanup() {\n        code=$?\n        set +e\n        trap - EXIT\n        rm -rf ${TMP_DIR}\n        exit $code\n    }\n    trap cleanup INT EXIT\n}\n\n# --- use desired k3s version if defined or find version from channel ---\nget_release_version() {\n    if [ -n \"${INSTALL_K3S_PR}\" ]; then\n        VERSION_K3S=\"PR ${INSTALL_K3S_PR}\"\n        get_pr_artifact_url\n    elif [ -n \"${INSTALL_K3S_COMMIT}\" ]; then\n        VERSION_K3S=\"commit ${INSTALL_K3S_COMMIT}\"\n    elif [ -n \"${INSTALL_K3S_VERSION}\" ]; then\n        VERSION_K3S=${INSTALL_K3S_VERSION}\n    else\n        info \"Finding release for channel ${INSTALL_K3S_CHANNEL}\"\n        version_url=\"${INSTALL_K3S_CHANNEL_URL}/${INSTALL_K3S_CHANNEL}\"\n        case $DOWNLOADER in\n            curl)\n                VERSION_K3S=$(curl -w '%{url_effective}' -L -s -S ${version_url} -o /dev/null | sed -e 's|.*/||')\n                ;;\n            wget)\n                VERSION_K3S=$(wget -SqO /dev/null ${version_url} 2\u003e\u00261 | grep -i Location | sed -e 's|.*/||')\n                ;;\n            *)\n                fatal \"Incorrect downloader executable '$DOWNLOADER'\"\n                ;;\n        esac\n    fi\n    info \"Using ${VERSION_K3S} as release\"\n}\n\n# --- get k3s-selinux version ---\nget_k3s_selinux_version() {\n    available_version=\"k3s-selinux-1.2-2.${rpm_target}.noarch.rpm\"\n    info \"Finding available k3s-selinux versions\"\n    \n    # run verify_downloader in case it binary installation was skipped\n    verify_downloader curl || verify_downloader wget || fatal 'Can not find curl or wget for downloading files'\n\n    case $DOWNLOADER in\n        curl)\n            DOWNLOADER_OPTS=\"-s\"\n            ;;\n        wget)\n            DOWNLOADER_OPTS=\"-q -O -\"\n            ;;\n        *)\n            fatal \"Incorrect downloader executable '$DOWNLOADER'\"\n            ;;\n    esac\n    for i in {1..3}; do\n        set +e\n        if [ \"${rpm_channel}\" = \"testing\" ]; then\n            version=$(timeout 5 ${DOWNLOADER} ${DOWNLOADER_OPTS} https://api.github.com/repos/k3s-io/k3s-selinux/releases |  grep browser_download_url | awk '{ print $2 }' | grep -oE \"[^\\/]+${rpm_target}\\.noarch\\.rpm\" | head -n 1)\n        else\n            version=$(timeout 5 ${DOWNLOADER} ${DOWNLOADER_OPTS} https://api.github.com/repos/k3s-io/k3s-selinux/releases/latest |  grep browser_download_url | awk '{ print $2 }' | grep -oE \"[^\\/]+${rpm_target}\\.noarch\\.rpm\")\n        fi\n        set -e\n        if [ \"${version}\" != \"\" ]; then\n            break\n        fi\n        sleep 1\n    done\n    if [ \"${version}\" == \"\" ]; then\n        warn \"Failed to get available versions of k3s-selinux..defaulting to ${available_version}\"\n        return\n    fi\n    available_version=${version}\n}\n\n# --- download from github url ---\ndownload() {\n    [ $# -eq 2 ] || fatal 'download needs exactly 2 arguments'\n    set +e\n    case $DOWNLOADER in\n        curl)\n            curl -o $1 -sfL $2\n            ;;\n        wget)\n            wget -qO $1 $2\n            ;;\n        *)\n            fatal \"Incorrect executable '$DOWNLOADER'\"\n            ;;\n    esac\n\n    # Abort if download command failed\n    [ $? -eq 0 ] || fatal 'Download failed'\n    set -e\n}\n\n# --- download hash from github url ---\ndownload_hash() {\n    if [ -n \"${INSTALL_K3S_PR}\" ]; then\n        info \"Downloading hash ${GITHUB_PR_URL}\"\n        curl -s -o ${TMP_ZIP} -H \"Authorization: Bearer $GITHUB_TOKEN\" -L ${GITHUB_PR_URL}\n        unzip -p ${TMP_ZIP} k3s.sha256sum \u003e ${TMP_HASH}\n    else\n        if [ -n \"${INSTALL_K3S_COMMIT}\" ]; then\n            HASH_URL=${STORAGE_URL}/k3s${SUFFIX}-${INSTALL_K3S_COMMIT}.sha256sum\n        else\n            HASH_URL=${GITHUB_URL}/download/${VERSION_K3S}/sha256sum-${ARCH}.txt\n        fi\n        info \"Downloading hash ${HASH_URL}\"\n        download ${TMP_HASH} ${HASH_URL}\n    fi\n    HASH_EXPECTED=$(grep \" k3s${SUFFIX}$\" ${TMP_HASH})\n    HASH_EXPECTED=${HASH_EXPECTED%%[[:blank:]]*}\n}\n\n# --- check hash against installed version ---\ninstalled_hash_matches() {\n    if [ -x ${BIN_DIR}/k3s ]; then\n        HASH_INSTALLED=$(sha256sum ${BIN_DIR}/k3s)\n        HASH_INSTALLED=${HASH_INSTALLED%%[[:blank:]]*}\n        if [ \"${HASH_EXPECTED}\" = \"${HASH_INSTALLED}\" ]; then\n            return\n        fi\n    fi\n    return 1\n}\n\n# Use the GitHub API to identify the artifact associated with a given PR\nget_pr_artifact_url() {\n    github_api_url=https://api.github.com/repos/k3s-io/k3s\n\n    # Check if jq is installed\n    if ! [ -x \"$(command -v jq)\" ]; then\n        fatal \"Installing PR builds requires jq\"\n    fi\n\n    # Check if unzip is installed\n    if ! [ -x \"$(command -v unzip)\" ]; then\n        fatal \"Installing PR builds requires unzip\"\n    fi\n\n    if [ -z \"${GITHUB_TOKEN}\" ]; then\n        fatal \"Installing PR builds requires GITHUB_TOKEN with k3s-io/k3s repo permissions\"\n    fi\n\n    # GET request to the GitHub API to retrieve the latest commit SHA from the pull request\n    set +e\n    commit_id=$(curl -f -s -H \"Authorization: Bearer ${GITHUB_TOKEN}\" \"${github_api_url}/pulls/${INSTALL_K3S_PR}\" | jq -r '.head.sha')\n    set -e\n\n    if [ -z \"${commit_id}\" ]; then\n        fatal \"Installing PR builds requires GITHUB_TOKEN with k3s-io/k3s repo permissions\"\n    fi\n    \n    # GET request to the GitHub API to retrieve the Build workflow associated with the commit\n    wf_raw=$(curl -s -H \"Authorization: Bearer ${GITHUB_TOKEN}\" \"${github_api_url}/commits/${commit_id}/check-runs\")\n    build_workflow=$(printf \"%s\" \"${wf_raw}\" | jq -r '.check_runs[] |  select(.name == \"build / Build\")')\n    \n    # Extract the Run ID from the build workflow and lookup artifacts associated with the run\n    run_id=$(echo \"${build_workflow}\" | jq -r ' .details_url' | awk -F'/' '{print $(NF-2)}' | sort -rn | head -1)\n\n    # Extract the artifact ID for the \"k3s\" artifact    \n    artifacts=$(curl -s -H \"Authorization: Bearer ${GITHUB_TOKEN}\" \"${github_api_url}/actions/runs/${run_id}/artifacts\")\n    artifacts_url=$(echo \"${artifacts}\" | jq -r '.artifacts[] | select(.name == \"k3s\") | .archive_download_url')\n    GITHUB_PR_URL=\"${artifacts_url}\"\n}\n\n# --- download binary from github url ---\ndownload_binary() {\n    if [ -n \"${INSTALL_K3S_PR}\" ]; then\n        # Since Binary and Hash are zipped together, check if TMP_ZIP already exists\n        if ! [ -f ${TMP_ZIP} ]; then\n            info \"Downloading K3s artifact ${GITHUB_PR_URL}\"\n            curl -s -f -o ${TMP_ZIP} -H \"Authorization: Bearer $GITHUB_TOKEN\" -L ${GITHUB_PR_URL}\n        fi\n        # extract k3s binary from zip\n        unzip -p ${TMP_ZIP} k3s \u003e ${TMP_BIN}\n        return\n    elif [ -n \"${INSTALL_K3S_COMMIT}\" ]; then\n        BIN_URL=${STORAGE_URL}/k3s${SUFFIX}-${INSTALL_K3S_COMMIT}\n    else\n        BIN_URL=${GITHUB_URL}/download/${VERSION_K3S}/k3s${SUFFIX}\n    fi\n    info \"Downloading binary ${BIN_URL}\"\n    download ${TMP_BIN} ${BIN_URL}\n}\n\n# --- verify downloaded binary hash ---\nverify_binary() {\n    info \"Verifying binary download\"\n    HASH_BIN=$(sha256sum ${TMP_BIN})\n    HASH_BIN=${HASH_BIN%%[[:blank:]]*}\n    if [ \"${HASH_EXPECTED}\" != \"${HASH_BIN}\" ]; then\n        fatal \"Download sha256 does not match ${HASH_EXPECTED}, got ${HASH_BIN}\"\n    fi\n}\n\n# --- setup permissions and move binary to system directory ---\nsetup_binary() {\n    chmod 755 ${TMP_BIN}\n    info \"Installing k3s to ${BIN_DIR}/k3s\"\n    $SUDO chown root:root ${TMP_BIN}\n    $SUDO mv -f ${TMP_BIN} ${BIN_DIR}/k3s\n}\n\n# --- setup selinux policy ---\nsetup_selinux() {\n    case ${INSTALL_K3S_CHANNEL} in \n        *testing)\n            rpm_channel=testing\n            ;;\n        *latest)\n            rpm_channel=latest\n            ;;\n        *)\n            rpm_channel=stable\n            ;;\n    esac\n\n    rpm_site=\"rpm.rancher.io\"\n    if [ \"${rpm_channel}\" = \"testing\" ]; then\n        rpm_site=\"rpm-testing.rancher.io\"\n    fi\n\n    [ -r /etc/os-release ] \u0026\u0026 . /etc/os-release\n    if [ `expr \"${ID_LIKE}\" : \".*suse.*\"` != 0 ]; then\n        rpm_target=sle\n        rpm_site_infix=microos\n        package_installer=zypper\n        if [ \"${ID_LIKE:-}\" = suse ] \u0026\u0026 ( [ \"${VARIANT_ID:-}\" = sle-micro ] || [ \"${ID:-}\" = sle-micro ] ); then\n            rpm_target=sle\n            rpm_site_infix=slemicro\n            package_installer=zypper\n        fi\n    elif [ \"${ID_LIKE:-}\" = coreos ] || [ \"${VARIANT_ID:-}\" = coreos ] || [ \"${VARIANT_ID:-}\" = \"iot\" ]; then\n        rpm_target=coreos\n        rpm_site_infix=coreos\n        package_installer=rpm-ostree\n    elif [ \"${VERSION_ID%%.*}\" = \"7\" ] || ( [ \"${ID:-}\" = amzn ] \u0026\u0026 [ \"${VERSION_ID%%.*}\" = \"2\" ] ); then\n        rpm_target=el7\n        rpm_site_infix=centos/7\n        package_installer=yum\n    elif [ \"${VERSION_ID%%.*}\" = \"8\" ] || [ \"${VERSION_ID%%.*}\" = \"V10\" ] || [ \"${VERSION_ID%%.*}\" -gt \"36\" ]; then\n        rpm_target=el8\n        rpm_site_infix=centos/8\n        package_installer=yum\n    else\n        rpm_target=el9\n        rpm_site_infix=centos/9\n        package_installer=yum\n    fi\n\n    if [ \"${package_installer}\" = \"rpm-ostree\" ] \u0026\u0026 [ -x /bin/yum ]; then\n        package_installer=yum\n    fi\n\n    if [ \"${package_installer}\" = \"yum\" ] \u0026\u0026 [ -x /usr/bin/dnf ]; then\n        package_installer=dnf\n    fi\n\n    policy_hint=\"please install:\n    ${package_installer} install -y container-selinux\n    ${package_installer} install -y https://${rpm_site}/k3s/${rpm_channel}/common/${rpm_site_infix}/noarch/${available_version}\n\"\n\n    if [ \"$INSTALL_K3S_SKIP_SELINUX_RPM\" = true ] || can_skip_download_selinux || [ ! -d /usr/share/selinux ]; then\n        info \"Skipping installation of SELinux RPM\"\n        return\n    fi\n    \n    get_k3s_selinux_version\n    install_selinux_rpm ${rpm_site} ${rpm_channel} ${rpm_target} ${rpm_site_infix}\n\n    policy_error=fatal\n    if [ \"$INSTALL_K3S_SELINUX_WARN\" = true ] || [ \"${ID_LIKE:-}\" = coreos ] || \n       [ \"${VARIANT_ID:-}\" = coreos ] || [ \"${VARIANT_ID:-}\" = iot ]; then\n        policy_error=warn\n    fi\n\n    if ! $SUDO chcon -u system_u -r object_r -t container_runtime_exec_t ${BIN_DIR}/k3s \u003e/dev/null 2\u003e\u00261; then\n        if $SUDO grep '^\\s*SELINUX=enforcing' /etc/selinux/config \u003e/dev/null 2\u003e\u00261; then\n            $policy_error \"Failed to apply container_runtime_exec_t to ${BIN_DIR}/k3s, ${policy_hint}\"\n        fi\n    elif [ ! -f /usr/share/selinux/packages/k3s.pp ]; then\n        if [ -x /usr/sbin/transactional-update ] || [ \"${ID_LIKE:-}\" = coreos ] || [ \"${VARIANT_ID:-}\" = coreos ] || [ \"${VARIANT_ID:-}\" = iot ]; then\n            warn \"Please reboot your machine to activate the changes and avoid data loss.\"\n        else\n            $policy_error \"Failed to find the k3s-selinux policy, ${policy_hint}\"\n        fi\n    fi\n}\n\ninstall_selinux_rpm() {\n    if [ -r /etc/redhat-release ] || [ -r /etc/centos-release ] || [ -r /etc/oracle-release ] || \n       [ -r /etc/fedora-release ] || [ -r /etc/system-release ] || [ \"${ID_LIKE%%[ ]*}\" = \"suse\" ]; then\n        repodir=/etc/yum.repos.d\n        if [ -d /etc/zypp/repos.d ]; then\n            repodir=/etc/zypp/repos.d\n        fi\n        set +o noglob\n        $SUDO rm -f ${repodir}/rancher-k3s-common*.repo\n        set -o noglob\n        if [ -r /etc/redhat-release ] \u0026\u0026 [ \"${3}\" = \"el7\" ]; then\n            $SUDO yum install -y yum-utils\n            $SUDO yum-config-manager --enable rhel-7-server-extras-rpms\n        fi\n        $SUDO tee ${repodir}/rancher-k3s-common.repo \u003e/dev/null \u003c\u003c EOF\n[rancher-k3s-common-${2}]\nname=Rancher K3s Common (${2})\nbaseurl=https://${1}/k3s/${2}/common/${4}/noarch\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=0\ngpgkey=https://${1}/public.key\nEOF\n        case ${3} in\n        sle)\n            rpm_installer=\"zypper --gpg-auto-import-keys\"\n            if [ \"${TRANSACTIONAL_UPDATE=false}\" != \"true\" ] \u0026\u0026 [ -x /usr/sbin/transactional-update ]; then\n                transactional_update_run=\"transactional-update --no-selfupdate -d run\"\n                rpm_installer=\"transactional-update --no-selfupdate -d run ${rpm_installer}\"\n                : \"${INSTALL_K3S_SKIP_START:=true}\"\n            fi\n            # create the /var/lib/rpm-state in SLE systems to fix the prein selinux macro\n            $SUDO ${transactional_update_run} mkdir -p /var/lib/rpm-state\n            ;;\n        coreos)\n            rpm_installer=\"rpm-ostree --idempotent\"\n            # rpm_install_extra_args=\"--apply-live\"\n            : \"${INSTALL_K3S_SKIP_START:=true}\"\n            ;;\n        *)\n            rpm_installer=\"yum\"\n            ;;\n        esac\n        if [ \"${rpm_installer}\" = \"yum\" ] \u0026\u0026 [ -x /usr/bin/dnf ]; then\n            rpm_installer=dnf\n        fi\n\t    if rpm -q --quiet k3s-selinux; then \n            # remove k3s-selinux module before upgrade to allow container-selinux to upgrade safely\n            if check_available_upgrades container-selinux ${3} \u0026\u0026 check_available_upgrades k3s-selinux ${3}; then\n                MODULE_PRIORITY=$($SUDO semodule --list=full | grep k3s | cut -f1 -d\" \")\n                if [ -n \"${MODULE_PRIORITY}\" ]; then\n                    $SUDO semodule -X $MODULE_PRIORITY -r k3s || true\n                fi\n            fi\n        fi\n        # shellcheck disable=SC2086\n        $SUDO ${rpm_installer} install -y \"k3s-selinux\"\n    fi\n    return\n}\n\ncheck_available_upgrades() {\n    set +e\n    case ${2} in\n        sle)\n            available_upgrades=$($SUDO zypper -q -t -s 11 se -s -u --type package $1 | tail -n 1 | grep -v \"No matching\" | awk '{print $3}')\n            ;;\n        coreos)\n            # currently rpm-ostree does not support search functionality https://github.com/coreos/rpm-ostree/issues/1877\n            ;;\n        *)\n            available_upgrades=$($SUDO yum -q --refresh list $1 --upgrades | tail -n 1 | awk '{print $2}')\n            ;;\n    esac\n    set -e\n    if [ -n \"${available_upgrades}\" ]; then\n        return 0\n    fi\n    return 1\n}\n# --- download and verify k3s ---\ndownload_and_verify() {\n    if can_skip_download_binary; then\n       info 'Skipping k3s download and verify'\n       verify_k3s_is_executable\n       return\n    fi\n\n    setup_verify_arch\n    verify_downloader curl || verify_downloader wget || fatal 'Can not find curl or wget for downloading files'\n    setup_tmp\n    get_release_version\n    download_hash\n\n    if installed_hash_matches; then\n        info 'Skipping binary downloaded, installed k3s matches hash'\n        return\n    fi\n\n    download_binary\n    verify_binary\n    setup_binary\n}\n\n# --- add additional utility links ---\ncreate_symlinks() {\n    [ \"${INSTALL_K3S_BIN_DIR_READ_ONLY}\" = true ] \u0026\u0026 return\n    [ \"${INSTALL_K3S_SYMLINK}\" = skip ] \u0026\u0026 return\n\n    for cmd in kubectl crictl ctr; do\n        if [ ! -e ${BIN_DIR}/${cmd} ] || [ \"${INSTALL_K3S_SYMLINK}\" = force ]; then\n            which_cmd=$(command -v ${cmd} 2\u003e/dev/null || true)\n            if [ -z \"${which_cmd}\" ] || [ \"${INSTALL_K3S_SYMLINK}\" = force ]; then\n                info \"Creating ${BIN_DIR}/${cmd} symlink to k3s\"\n                $SUDO ln -sf k3s ${BIN_DIR}/${cmd}\n            else\n                info \"Skipping ${BIN_DIR}/${cmd} symlink to k3s, command exists in PATH at ${which_cmd}\"\n            fi\n        else\n            info \"Skipping ${BIN_DIR}/${cmd} symlink to k3s, already exists\"\n        fi\n    done\n}\n\n# --- create killall script ---\ncreate_killall() {\n    [ \"${INSTALL_K3S_BIN_DIR_READ_ONLY}\" = true ] \u0026\u0026 return\n    info \"Creating killall script ${KILLALL_K3S_SH}\"\n    $SUDO tee ${KILLALL_K3S_SH} \u003e/dev/null \u003c\u003c \\EOF\n#!/bin/sh\n[ $(id -u) -eq 0 ] || exec sudo $0 $@\n\nK3S_DATA_DIR=${K3S_DATA_DIR:-/var/lib/rancher/k3s}\n\nfor bin in ${K3S_DATA_DIR}/data/**/bin/; do\n    [ -d $bin ] \u0026\u0026 export PATH=$PATH:$bin:$bin/aux\ndone\n\nset -x\n\nfor service in /etc/systemd/system/k3s*.service; do\n    [ -s $service ] \u0026\u0026 systemctl stop $(basename $service)\ndone\n\nfor service in /etc/init.d/k3s*; do\n    [ -x $service ] \u0026\u0026 $service stop\ndone\n\npschildren() {\n    ps -e -o ppid= -o pid= | \\\n    sed -e 's/^\\s*//g; s/\\s\\s*/\\t/g;' | \\\n    grep -w \"^$1\" | \\\n    cut -f2\n}\n\npstree() {\n    for pid in $@; do\n        echo $pid\n        for child in $(pschildren $pid); do\n            pstree $child\n        done\n    done\n}\n\nkilltree() {\n    kill -9 $(\n        { set +x; } 2\u003e/dev/null;\n        pstree $@;\n        set -x;\n    ) 2\u003e/dev/null\n}\n\nremove_interfaces() {\n    # Delete network interface(s) that match 'master cni0'\n    ip link show 2\u003e/dev/null | grep 'master cni0' | while read ignore iface ignore; do\n        iface=${iface%%@*}\n        [ -z \"$iface\" ] || ip link delete $iface\n    done\n\n    # Delete cni related interfaces\n    ip link delete cni0\n    ip link delete flannel.1\n    ip link delete flannel-v6.1\n    ip link delete kube-ipvs0\n    ip link delete flannel-wg\n    ip link delete flannel-wg-v6\n\n    # Restart tailscale\n    if [ -n \"$(command -v tailscale)\" ]; then\n        tailscale set --advertise-routes=\n    fi\n}\n\ngetshims() {\n    ps -e -o pid= -o args= | sed -e 's/^ *//; s/\\s\\s*/\\t/;' | grep -w \"${K3S_DATA_DIR}\"'/data/[^/]*/bin/containerd-shim' | cut -f1\n}\n\nkilltree $({ set +x; } 2\u003e/dev/null; getshims; set -x)\n\ndo_unmount_and_remove() {\n    set +x\n    while read -r _ path _; do\n        case \"$path\" in $1*) echo \"$path\" ;; esac\n    done \u003c /proc/self/mounts | sort -r | xargs -r -t -n 1 sh -c 'umount -f \"$0\" \u0026\u0026 rm -rf \"$0\"'\n    set -x\n}\n\ndo_unmount_and_remove '/run/k3s'\ndo_unmount_and_remove '/var/lib/kubelet/pods'\ndo_unmount_and_remove '/var/lib/kubelet/plugins'\ndo_unmount_and_remove '/run/netns/cni-'\n\n# Remove CNI namespaces\nip netns show 2\u003e/dev/null | grep cni- | xargs -r -t -n 1 ip netns delete\n\nremove_interfaces\n\nrm -rf /var/lib/cni/\niptables-save | grep -v KUBE- | grep -v CNI- | grep -iv flannel | iptables-restore\nip6tables-save | grep -v KUBE- | grep -v CNI- | grep -iv flannel | ip6tables-restore\nEOF\n    $SUDO chmod 755 ${KILLALL_K3S_SH}\n    $SUDO chown root:root ${KILLALL_K3S_SH}\n}\n\n# --- create uninstall script ---\ncreate_uninstall() {\n    [ \"${INSTALL_K3S_BIN_DIR_READ_ONLY}\" = true ] \u0026\u0026 return\n    info \"Creating uninstall script ${UNINSTALL_K3S_SH}\"\n    $SUDO tee ${UNINSTALL_K3S_SH} \u003e/dev/null \u003c\u003c EOF\n#!/bin/sh\nset -x\n[ \\$(id -u) -eq 0 ] || exec sudo \\$0 \\$@\n\nK3S_DATA_DIR=\\${K3S_DATA_DIR:-/var/lib/rancher/k3s}\n\n${KILLALL_K3S_SH}\n\nif command -v systemctl; then\n    systemctl disable ${SYSTEM_NAME}\n    systemctl reset-failed ${SYSTEM_NAME}\n    systemctl daemon-reload\nfi\nif command -v rc-update; then\n    rc-update delete ${SYSTEM_NAME} default\nfi\n\nrm -f ${FILE_K3S_SERVICE}\nrm -f ${FILE_K3S_ENV}\n\nremove_uninstall() {\n    rm -f ${UNINSTALL_K3S_SH}\n}\ntrap remove_uninstall EXIT\n\nif (ls ${SYSTEMD_DIR}/k3s*.service || ls /etc/init.d/k3s*) \u003e/dev/null 2\u003e\u00261; then\n    set +x; echo 'Additional k3s services installed, skipping uninstall of k3s'; set -x\n    exit\nfi\n\nfor cmd in kubectl crictl ctr; do\n    if [ -L ${BIN_DIR}/\\$cmd ]; then\n        rm -f ${BIN_DIR}/\\$cmd\n    fi\ndone\n\nclean_mounted_directory() {\n    if ! grep -q \" \\$1\" /proc/mounts; then\n        rm -rf \"\\$1\"\n\treturn 0\n    fi\n\n    for path in \"\\$1\"/*; do\n        if [ -d \"\\$path\" ]; then\n            if grep -q \" \\$path\" /proc/mounts; then\n                clean_mounted_directory \"\\$path\"\n            else\n                rm -rf \"\\$path\"\n            fi\n        else\n            rm \"\\$path\"\n        fi\n     done\n}\n\nrm -rf /etc/rancher/k3s\nrm -rf /run/k3s\nrm -rf /run/flannel\nclean_mounted_directory \\${K3S_DATA_DIR}\nrm -rf /var/lib/kubelet\nrm -f ${BIN_DIR}/k3s\nrm -f ${KILLALL_K3S_SH}\n\nif type yum \u003e/dev/null 2\u003e\u00261; then\n    yum remove -y k3s-selinux\n    rm -f /etc/yum.repos.d/rancher-k3s-common*.repo\nelif type rpm-ostree \u003e/dev/null 2\u003e\u00261; then\n    rpm-ostree uninstall k3s-selinux\n    rm -f /etc/yum.repos.d/rancher-k3s-common*.repo\nelif type zypper \u003e/dev/null 2\u003e\u00261; then\n    uninstall_cmd=\"zypper remove -y k3s-selinux\"\n    if [ \"\\${TRANSACTIONAL_UPDATE=false}\" != \"true\" ] \u0026\u0026 [ -x /usr/sbin/transactional-update ]; then\n        uninstall_cmd=\"transactional-update --no-selfupdate -d run \\$uninstall_cmd\"\n    fi\n    $SUDO \\$uninstall_cmd\n    rm -f /etc/zypp/repos.d/rancher-k3s-common*.repo\nfi\nEOF\n    $SUDO chmod 755 ${UNINSTALL_K3S_SH}\n    $SUDO chown root:root ${UNINSTALL_K3S_SH}\n}\n\n# --- disable current service if loaded --\nsystemd_disable() {\n    $SUDO systemctl disable ${SYSTEM_NAME} \u003e/dev/null 2\u003e\u00261 || true\n    $SUDO rm -f /etc/systemd/system/${SERVICE_K3S} || true\n    $SUDO rm -f /etc/systemd/system/${SERVICE_K3S}.env || true\n}\n\n# --- capture current env and create file containing k3s_ variables ---\ncreate_env_file() {\n    info \"env: Creating environment file ${FILE_K3S_ENV}\"\n    $SUDO touch ${FILE_K3S_ENV}\n    $SUDO chmod 0600 ${FILE_K3S_ENV}\n    sh -c export | while read x v; do echo $v; done | grep -E '^(K3S|CONTAINERD)_' | $SUDO tee ${FILE_K3S_ENV} \u003e/dev/null\n    sh -c export | while read x v; do echo $v; done | grep -Ei '^(NO|HTTP|HTTPS)_PROXY' | $SUDO tee -a ${FILE_K3S_ENV} \u003e/dev/null\n}\n\n# --- write systemd service file ---\ncreate_systemd_service_file() {\n    info \"systemd: Creating service file ${FILE_K3S_SERVICE}\"\n    $SUDO tee ${FILE_K3S_SERVICE} \u003e/dev/null \u003c\u003c EOF\n[Unit]\nDescription=Lightweight Kubernetes\nDocumentation=https://k3s.io\nWants=network-online.target\nAfter=network-online.target\n\n[Install]\nWantedBy=multi-user.target\n\n[Service]\nType=${SYSTEMD_TYPE}\nEnvironmentFile=-/etc/default/%N\nEnvironmentFile=-/etc/sysconfig/%N\nEnvironmentFile=-${FILE_K3S_ENV}\nKillMode=process\nDelegate=yes\n# Having non-zero Limit*s causes performance problems due to accounting overhead\n# in the kernel. We recommend using cgroups to do container-local accounting.\nLimitNOFILE=1048576\nLimitNPROC=infinity\nLimitCORE=infinity\nTasksMax=infinity\nTimeoutStartSec=0\nRestart=always\nRestartSec=5s\nExecStartPre=/bin/sh -xc '! /usr/bin/systemctl is-enabled --quiet nm-cloud-setup.service 2\u003e/dev/null'\nExecStartPre=-/sbin/modprobe br_netfilter\nExecStartPre=-/sbin/modprobe overlay\nExecStart=${BIN_DIR}/k3s \\\\\n    ${CMD_K3S_EXEC}\n\nEOF\n}\n\n# --- write openrc service file ---\ncreate_openrc_service_file() {\n    LOG_FILE=/var/log/${SYSTEM_NAME}.log\n\n    info \"openrc: Creating service file ${FILE_K3S_SERVICE}\"\n    $SUDO tee ${FILE_K3S_SERVICE} \u003e/dev/null \u003c\u003c EOF\n#!/sbin/openrc-run\n\ndepend() {\n    after network-online\n    want cgroups\n}\n\nstart_pre() {\n    rm -f /tmp/k3s.*\n}\n\nsupervisor=supervise-daemon\nname=${SYSTEM_NAME}\ncommand=\"${BIN_DIR}/k3s\"\ncommand_args=\"$(escape_dq \"${CMD_K3S_EXEC}\")\n    \u003e\u003e${LOG_FILE} 2\u003e\u00261\"\n\noutput_log=${LOG_FILE}\nerror_log=${LOG_FILE}\n\npidfile=\"/var/run/${SYSTEM_NAME}.pid\"\nrespawn_delay=5\nrespawn_max=0\n\nset -o allexport\nif [ -f /etc/environment ]; then . /etc/environment; fi\nif [ -f ${FILE_K3S_ENV} ]; then . ${FILE_K3S_ENV}; fi\nset +o allexport\nEOF\n    $SUDO chmod 0755 ${FILE_K3S_SERVICE}\n\n    $SUDO tee /etc/logrotate.d/${SYSTEM_NAME} \u003e/dev/null \u003c\u003c EOF\n${LOG_FILE} {\n\tmissingok\n\tnotifempty\n\tcopytruncate\n}\nEOF\n}\n\n# --- write systemd or openrc service file ---\ncreate_service_file() {\n    [ \"${HAS_SYSTEMD}\" = true ] \u0026\u0026 create_systemd_service_file \u0026\u0026 restore_systemd_service_file_context\n    [ \"${HAS_OPENRC}\" = true ] \u0026\u0026 create_openrc_service_file\n    return 0\n}\n\nrestore_systemd_service_file_context() {\n    $SUDO restorecon -R -i ${FILE_K3S_SERVICE} 2\u003e/dev/null || true\n    $SUDO restorecon -R -i ${FILE_K3S_ENV} 2\u003e/dev/null || true\n}\n\n# --- get hashes of the current k3s bin and service files\nget_installed_hashes() {\n    $SUDO sha256sum ${BIN_DIR}/k3s ${FILE_K3S_SERVICE} ${FILE_K3S_ENV} 2\u003e\u00261 || true\n}\n\n# --- enable and start systemd service ---\nsystemd_enable() {\n    info \"systemd: Enabling ${SYSTEM_NAME} unit\"\n    $SUDO systemctl enable ${FILE_K3S_SERVICE} \u003e/dev/null\n    $SUDO systemctl daemon-reload \u003e/dev/null\n}\n\nsystemd_start() {\n    info \"systemd: Starting ${SYSTEM_NAME}\"\n    $SUDO systemctl restart ${SYSTEM_NAME}\n}\n\n# --- enable and start openrc service ---\nopenrc_enable() {\n    info \"openrc: Enabling ${SYSTEM_NAME} service for default runlevel\"\n    $SUDO rc-update add ${SYSTEM_NAME} default \u003e/dev/null\n}\n\nopenrc_start() {\n    info \"openrc: Starting ${SYSTEM_NAME}\"\n    $SUDO ${FILE_K3S_SERVICE} restart\n}\n\nhas_working_xtables() {\n    if $SUDO sh -c \"command -v \\\"$1-save\\\"\" 1\u003e /dev/null \u0026\u0026 $SUDO sh -c \"command -v \\\"$1-restore\\\"\" 1\u003e /dev/null; then\n        if $SUDO $1-save 2\u003e/dev/null | grep -q '^-A CNI-HOSTPORT-MASQ -j MASQUERADE$'; then\n            warn \"Host $1-save/$1-restore tools are incompatible with existing rules\"\n        else\n            return 0\n        fi\n    else\n        info \"Host $1-save/$1-restore tools not found\"\n    fi\n    return 1\n}\n\n# --- startup systemd or openrc service ---\nservice_enable_and_start() {\n    if [ -f \"/proc/cgroups\" ] \u0026\u0026 [ \"$(grep memory /proc/cgroups | while read -r n n n enabled; do echo $enabled; done)\" -eq 0 ];\n    then\n        info 'Failed to find memory cgroup, you may need to add \"cgroup_memory=1 cgroup_enable=memory\" to your linux cmdline (/boot/cmdline.txt on a Raspberry Pi)'\n    fi\n\n    [ \"${INSTALL_K3S_SKIP_ENABLE}\" = true ] \u0026\u0026 return\n\n    [ \"${HAS_SYSTEMD}\" = true ] \u0026\u0026 systemd_enable\n    [ \"${HAS_OPENRC}\" = true ] \u0026\u0026 openrc_enable\n\n    [ \"${INSTALL_K3S_SKIP_START}\" = true ] \u0026\u0026 return\n\n    POST_INSTALL_HASHES=$(get_installed_hashes)\n    if [ \"${PRE_INSTALL_HASHES}\" = \"${POST_INSTALL_HASHES}\" ] \u0026\u0026 [ \"${INSTALL_K3S_FORCE_RESTART}\" != true ]; then\n        info 'No change detected so skipping service start'\n        return\n    fi\n\n    for XTABLES in iptables ip6tables; do\n        if has_working_xtables ${XTABLES}; then\n            $SUDO ${XTABLES}-save 2\u003e/dev/null | grep -v KUBE- | grep -iv flannel | $SUDO ${XTABLES}-restore\n        fi\n    done\n\n    [ \"${HAS_SYSTEMD}\" = true ] \u0026\u0026 systemd_start\n    [ \"${HAS_OPENRC}\" = true ] \u0026\u0026 openrc_start\n    return 0\n}\n\n# --- re-evaluate args to include env command ---\neval set -- $(escape \"${INSTALL_K3S_EXEC}\") $(quote \"$@\")\n\n# --- run the install process --\n{\n    verify_system\n    setup_env \"$@\"\n    download_and_verify\n    setup_selinux\n    create_symlinks\n    create_killall\n    create_uninstall\n    systemd_disable\n    create_env_file\n    create_service_file\n    service_enable_and_start\n}\n\n",
            "response_body_base64": "",
            "response_headers": {
              "Accept-Ranges": "bytes",
              "Access-Control-Allow-Origin": "*",
              "Cache-Control": "max-age=300",
              "Content-Security-Policy": "default-src 'none'; style-src 'unsafe-inline'; sandbox",
              "Content-Type": "text/plain; charset=utf-8",
              "Cross-Origin-Resource-Policy": "cross-origin",
              "Date": "Sat, 07 Dec 2024 00:29:49 GMT",
              "Etag": "W/\"f4f948b7beaa53125eb5e09834080762a4a691dd7d71adb96bc8b035239fb100\"",
              "Expires": "Sat, 07 Dec 2024 00:34:49 GMT",
              "Source-Age": "19",
              "Strict-Transport-Security": "max-age=31536000",
              "Vary": "Authorization,Accept-Encoding,Origin",
              "Via": "1.1 varnish",
              "X-Cache": "HIT",
              "X-Cache-Hits": "1",
              "X-Content-Type-Options": "nosniff",
              "X-Fastly-Request-Id": "3dc65c9214f9f9e3a8660b36fc530550424169b8",
              "X-Frame-Options": "deny",
              "X-Github-Request-Id": "B936:10EB97:6015A:7C45A:675396E9",
              "X-Served-By": "cache-nrt-rjtf7700054-NRT",
              "X-Timer": "S1733531390.949149,VS0,VE1",
              "X-Xss-Protection": "1; mode=block"
            },
            "retry": null,
            "status_code": 200,
            "url": "https://raw.githubusercontent.com/rancher/k3s/v1.31.2+k3s1/install.sh"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.k3s1.module.k3s",
      "mode": "data",
      "type": "http",
      "name": "k3s_version",
      "provider": "provider[\"registry.terraform.io/hashicorp/http\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "body": "{\"type\":\"collection\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels\"},\"actions\":{},\"resourceType\":\"channel\",\"data\":[{\"id\":\"stable\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/stable\"},\"name\":\"stable\",\"latest\":\"v1.30.6+k3s1\"},{\"id\":\"latest\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/latest\"},\"name\":\"latest\",\"latest\":\"v1.31.2+k3s1\",\"latestRegexp\":\".*\",\"excludeRegexp\":\"(^[^+]+-|v1\\\\.25\\\\.5\\\\+k3s1|v1\\\\.26\\\\.0\\\\+k3s1)\"},{\"id\":\"testing\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/testing\"},\"name\":\"testing\",\"latest\":\"v1.18.2-rc3+k3s1\",\"latestRegexp\":\"-(alpha|beta|rc)\"},{\"id\":\"v1.16\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.16\"},\"name\":\"v1.16\",\"latest\":\"v1.16.15+k3s1\",\"latestRegexp\":\"v1\\\\.16\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.16-testing\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.16-testing\"},\"name\":\"v1.16-testing\",\"latestRegexp\":\"v1\\\\.16\\\\.[0-9]*-(alpha|beta|rc)\"},{\"id\":\"v1.17\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.17\"},\"name\":\"v1.17\",\"latest\":\"v1.17.17+k3s1\",\"latestRegexp\":\"v1\\\\.17\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.17-testing\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.17-testing\"},\"name\":\"v1.17-testing\",\"latestRegexp\":\"v1\\\\.17\\\\.[0-9]*-(alpha|beta|rc)\"},{\"id\":\"v1.18\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.18\"},\"name\":\"v1.18\",\"latest\":\"v1.18.20+k3s1\",\"latestRegexp\":\"v1\\\\.18\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.18-testing\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.18-testing\"},\"name\":\"v1.18-testing\",\"latest\":\"v1.18.2-rc3+k3s1\",\"latestRegexp\":\"v1\\\\.18\\\\.[0-9]*-(alpha|beta|rc)\"},{\"id\":\"v1.19\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.19\"},\"name\":\"v1.19\",\"latest\":\"v1.19.16+k3s1\",\"latestRegexp\":\"v1\\\\.19\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.20\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.20\"},\"name\":\"v1.20\",\"latest\":\"v1.20.15+k3s1\",\"latestRegexp\":\"v1\\\\.20\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.21\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.21\"},\"name\":\"v1.21\",\"latest\":\"v1.21.14+k3s1\",\"latestRegexp\":\"v1\\\\.21\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.22\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.22\"},\"name\":\"v1.22\",\"latest\":\"v1.22.17+k3s1\",\"latestRegexp\":\"v1\\\\.22\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.23\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.23\"},\"name\":\"v1.23\",\"latest\":\"v1.23.17+k3s1\",\"latestRegexp\":\"v1\\\\.23\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.24\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.24\"},\"name\":\"v1.24\",\"latest\":\"v1.24.17+k3s1\",\"latestRegexp\":\"v1\\\\.24\\\\..*\",\"excludeRegexp\":\"(^[^+]+-|v1\\\\.24\\\\.9\\\\+k3s1)\"},{\"id\":\"v1.25\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.25\"},\"name\":\"v1.25\",\"latest\":\"v1.25.16+k3s4\",\"latestRegexp\":\"v1\\\\.25\\\\..*\",\"excludeRegexp\":\"(^[^+]+-|v1\\\\.25\\\\.5\\\\+k3s1)\"},{\"id\":\"v1.26\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.26\"},\"name\":\"v1.26\",\"latest\":\"v1.26.15+k3s1\",\"latestRegexp\":\"v1\\\\.26\\\\..*\",\"excludeRegexp\":\"(^[^+]+-|v1\\\\.26\\\\.0\\\\+k3s1)\"},{\"id\":\"v1.27\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.27\"},\"name\":\"v1.27\",\"latest\":\"v1.27.16+k3s1\",\"latestRegexp\":\"v1\\\\.27\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.28\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.28\"},\"name\":\"v1.28\",\"latest\":\"v1.28.15+k3s1\",\"latestRegexp\":\"v1\\\\.28\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.29\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.29\"},\"name\":\"v1.29\",\"latest\":\"v1.29.10+k3s1\",\"latestRegexp\":\"v1\\\\.29\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.30\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.30\"},\"name\":\"v1.30\",\"latest\":\"v1.30.6+k3s1\",\"latestRegexp\":\"v1\\\\.30\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.31\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.31\"},\"name\":\"v1.31\",\"latest\":\"v1.31.2+k3s1\",\"latestRegexp\":\"v1\\\\.31\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"}]}\n",
            "ca_cert_pem": null,
            "id": "https://update.k3s.io/v1-release/channels",
            "insecure": null,
            "method": null,
            "request_body": null,
            "request_headers": null,
            "request_timeout_ms": null,
            "response_body": "{\"type\":\"collection\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels\"},\"actions\":{},\"resourceType\":\"channel\",\"data\":[{\"id\":\"stable\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/stable\"},\"name\":\"stable\",\"latest\":\"v1.30.6+k3s1\"},{\"id\":\"latest\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/latest\"},\"name\":\"latest\",\"latest\":\"v1.31.2+k3s1\",\"latestRegexp\":\".*\",\"excludeRegexp\":\"(^[^+]+-|v1\\\\.25\\\\.5\\\\+k3s1|v1\\\\.26\\\\.0\\\\+k3s1)\"},{\"id\":\"testing\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/testing\"},\"name\":\"testing\",\"latest\":\"v1.18.2-rc3+k3s1\",\"latestRegexp\":\"-(alpha|beta|rc)\"},{\"id\":\"v1.16\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.16\"},\"name\":\"v1.16\",\"latest\":\"v1.16.15+k3s1\",\"latestRegexp\":\"v1\\\\.16\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.16-testing\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.16-testing\"},\"name\":\"v1.16-testing\",\"latestRegexp\":\"v1\\\\.16\\\\.[0-9]*-(alpha|beta|rc)\"},{\"id\":\"v1.17\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.17\"},\"name\":\"v1.17\",\"latest\":\"v1.17.17+k3s1\",\"latestRegexp\":\"v1\\\\.17\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.17-testing\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.17-testing\"},\"name\":\"v1.17-testing\",\"latestRegexp\":\"v1\\\\.17\\\\.[0-9]*-(alpha|beta|rc)\"},{\"id\":\"v1.18\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.18\"},\"name\":\"v1.18\",\"latest\":\"v1.18.20+k3s1\",\"latestRegexp\":\"v1\\\\.18\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.18-testing\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.18-testing\"},\"name\":\"v1.18-testing\",\"latest\":\"v1.18.2-rc3+k3s1\",\"latestRegexp\":\"v1\\\\.18\\\\.[0-9]*-(alpha|beta|rc)\"},{\"id\":\"v1.19\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.19\"},\"name\":\"v1.19\",\"latest\":\"v1.19.16+k3s1\",\"latestRegexp\":\"v1\\\\.19\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.20\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.20\"},\"name\":\"v1.20\",\"latest\":\"v1.20.15+k3s1\",\"latestRegexp\":\"v1\\\\.20\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.21\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.21\"},\"name\":\"v1.21\",\"latest\":\"v1.21.14+k3s1\",\"latestRegexp\":\"v1\\\\.21\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.22\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.22\"},\"name\":\"v1.22\",\"latest\":\"v1.22.17+k3s1\",\"latestRegexp\":\"v1\\\\.22\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.23\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.23\"},\"name\":\"v1.23\",\"latest\":\"v1.23.17+k3s1\",\"latestRegexp\":\"v1\\\\.23\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.24\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.24\"},\"name\":\"v1.24\",\"latest\":\"v1.24.17+k3s1\",\"latestRegexp\":\"v1\\\\.24\\\\..*\",\"excludeRegexp\":\"(^[^+]+-|v1\\\\.24\\\\.9\\\\+k3s1)\"},{\"id\":\"v1.25\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.25\"},\"name\":\"v1.25\",\"latest\":\"v1.25.16+k3s4\",\"latestRegexp\":\"v1\\\\.25\\\\..*\",\"excludeRegexp\":\"(^[^+]+-|v1\\\\.25\\\\.5\\\\+k3s1)\"},{\"id\":\"v1.26\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.26\"},\"name\":\"v1.26\",\"latest\":\"v1.26.15+k3s1\",\"latestRegexp\":\"v1\\\\.26\\\\..*\",\"excludeRegexp\":\"(^[^+]+-|v1\\\\.26\\\\.0\\\\+k3s1)\"},{\"id\":\"v1.27\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.27\"},\"name\":\"v1.27\",\"latest\":\"v1.27.16+k3s1\",\"latestRegexp\":\"v1\\\\.27\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.28\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.28\"},\"name\":\"v1.28\",\"latest\":\"v1.28.15+k3s1\",\"latestRegexp\":\"v1\\\\.28\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.29\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.29\"},\"name\":\"v1.29\",\"latest\":\"v1.29.10+k3s1\",\"latestRegexp\":\"v1\\\\.29\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.30\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.30\"},\"name\":\"v1.30\",\"latest\":\"v1.30.6+k3s1\",\"latestRegexp\":\"v1\\\\.30\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.31\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.31\"},\"name\":\"v1.31\",\"latest\":\"v1.31.2+k3s1\",\"latestRegexp\":\"v1\\\\.31\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"}]}\n",
            "response_body_base64": "eyJ0eXBlIjoiY29sbGVjdGlvbiIsImxpbmtzIjp7InNlbGYiOiJodHRwczovL3VwZGF0ZS5rM3MuaW8vdjEtcmVsZWFzZS9jaGFubmVscyJ9LCJhY3Rpb25zIjp7fSwicmVzb3VyY2VUeXBlIjoiY2hhbm5lbCIsImRhdGEiOlt7ImlkIjoic3RhYmxlIiwidHlwZSI6ImNoYW5uZWwiLCJsaW5rcyI6eyJzZWxmIjoiaHR0cHM6Ly91cGRhdGUuazNzLmlvL3YxLXJlbGVhc2UvY2hhbm5lbHMvc3RhYmxlIn0sIm5hbWUiOiJzdGFibGUiLCJsYXRlc3QiOiJ2MS4zMC42K2szczEifSx7ImlkIjoibGF0ZXN0IiwidHlwZSI6ImNoYW5uZWwiLCJsaW5rcyI6eyJzZWxmIjoiaHR0cHM6Ly91cGRhdGUuazNzLmlvL3YxLXJlbGVhc2UvY2hhbm5lbHMvbGF0ZXN0In0sIm5hbWUiOiJsYXRlc3QiLCJsYXRlc3QiOiJ2MS4zMS4yK2szczEiLCJsYXRlc3RSZWdleHAiOiIuKiIsImV4Y2x1ZGVSZWdleHAiOiIoXlteK10rLXx2MVxcLjI1XFwuNVxcK2szczF8djFcXC4yNlxcLjBcXCtrM3MxKSJ9LHsiaWQiOiJ0ZXN0aW5nIiwidHlwZSI6ImNoYW5uZWwiLCJsaW5rcyI6eyJzZWxmIjoiaHR0cHM6Ly91cGRhdGUuazNzLmlvL3YxLXJlbGVhc2UvY2hhbm5lbHMvdGVzdGluZyJ9LCJuYW1lIjoidGVzdGluZyIsImxhdGVzdCI6InYxLjE4LjItcmMzK2szczEiLCJsYXRlc3RSZWdleHAiOiItKGFscGhhfGJldGF8cmMpIn0seyJpZCI6InYxLjE2IiwidHlwZSI6ImNoYW5uZWwiLCJsaW5rcyI6eyJzZWxmIjoiaHR0cHM6Ly91cGRhdGUuazNzLmlvL3YxLXJlbGVhc2UvY2hhbm5lbHMvdjEuMTYifSwibmFtZSI6InYxLjE2IiwibGF0ZXN0IjoidjEuMTYuMTUrazNzMSIsImxhdGVzdFJlZ2V4cCI6InYxXFwuMTZcXC4uKiIsImV4Y2x1ZGVSZWdleHAiOiJeW14rXSstIn0seyJpZCI6InYxLjE2LXRlc3RpbmciLCJ0eXBlIjoiY2hhbm5lbCIsImxpbmtzIjp7InNlbGYiOiJodHRwczovL3VwZGF0ZS5rM3MuaW8vdjEtcmVsZWFzZS9jaGFubmVscy92MS4xNi10ZXN0aW5nIn0sIm5hbWUiOiJ2MS4xNi10ZXN0aW5nIiwibGF0ZXN0UmVnZXhwIjoidjFcXC4xNlxcLlswLTldKi0oYWxwaGF8YmV0YXxyYykifSx7ImlkIjoidjEuMTciLCJ0eXBlIjoiY2hhbm5lbCIsImxpbmtzIjp7InNlbGYiOiJodHRwczovL3VwZGF0ZS5rM3MuaW8vdjEtcmVsZWFzZS9jaGFubmVscy92MS4xNyJ9LCJuYW1lIjoidjEuMTciLCJsYXRlc3QiOiJ2MS4xNy4xNytrM3MxIiwibGF0ZXN0UmVnZXhwIjoidjFcXC4xN1xcLi4qIiwiZXhjbHVkZVJlZ2V4cCI6Il5bXitdKy0ifSx7ImlkIjoidjEuMTctdGVzdGluZyIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjE3LXRlc3RpbmcifSwibmFtZSI6InYxLjE3LXRlc3RpbmciLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjE3XFwuWzAtOV0qLShhbHBoYXxiZXRhfHJjKSJ9LHsiaWQiOiJ2MS4xOCIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjE4In0sIm5hbWUiOiJ2MS4xOCIsImxhdGVzdCI6InYxLjE4LjIwK2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjE4XFwuLioiLCJleGNsdWRlUmVnZXhwIjoiXlteK10rLSJ9LHsiaWQiOiJ2MS4xOC10ZXN0aW5nIiwidHlwZSI6ImNoYW5uZWwiLCJsaW5rcyI6eyJzZWxmIjoiaHR0cHM6Ly91cGRhdGUuazNzLmlvL3YxLXJlbGVhc2UvY2hhbm5lbHMvdjEuMTgtdGVzdGluZyJ9LCJuYW1lIjoidjEuMTgtdGVzdGluZyIsImxhdGVzdCI6InYxLjE4LjItcmMzK2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjE4XFwuWzAtOV0qLShhbHBoYXxiZXRhfHJjKSJ9LHsiaWQiOiJ2MS4xOSIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjE5In0sIm5hbWUiOiJ2MS4xOSIsImxhdGVzdCI6InYxLjE5LjE2K2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjE5XFwuLioiLCJleGNsdWRlUmVnZXhwIjoiXlteK10rLSJ9LHsiaWQiOiJ2MS4yMCIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjIwIn0sIm5hbWUiOiJ2MS4yMCIsImxhdGVzdCI6InYxLjIwLjE1K2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjIwXFwuLioiLCJleGNsdWRlUmVnZXhwIjoiXlteK10rLSJ9LHsiaWQiOiJ2MS4yMSIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjIxIn0sIm5hbWUiOiJ2MS4yMSIsImxhdGVzdCI6InYxLjIxLjE0K2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjIxXFwuLioiLCJleGNsdWRlUmVnZXhwIjoiXlteK10rLSJ9LHsiaWQiOiJ2MS4yMiIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjIyIn0sIm5hbWUiOiJ2MS4yMiIsImxhdGVzdCI6InYxLjIyLjE3K2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjIyXFwuLioiLCJleGNsdWRlUmVnZXhwIjoiXlteK10rLSJ9LHsiaWQiOiJ2MS4yMyIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjIzIn0sIm5hbWUiOiJ2MS4yMyIsImxhdGVzdCI6InYxLjIzLjE3K2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjIzXFwuLioiLCJleGNsdWRlUmVnZXhwIjoiXlteK10rLSJ9LHsiaWQiOiJ2MS4yNCIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjI0In0sIm5hbWUiOiJ2MS4yNCIsImxhdGVzdCI6InYxLjI0LjE3K2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjI0XFwuLioiLCJleGNsdWRlUmVnZXhwIjoiKF5bXitdKy18djFcXC4yNFxcLjlcXCtrM3MxKSJ9LHsiaWQiOiJ2MS4yNSIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjI1In0sIm5hbWUiOiJ2MS4yNSIsImxhdGVzdCI6InYxLjI1LjE2K2szczQiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjI1XFwuLioiLCJleGNsdWRlUmVnZXhwIjoiKF5bXitdKy18djFcXC4yNVxcLjVcXCtrM3MxKSJ9LHsiaWQiOiJ2MS4yNiIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjI2In0sIm5hbWUiOiJ2MS4yNiIsImxhdGVzdCI6InYxLjI2LjE1K2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjI2XFwuLioiLCJleGNsdWRlUmVnZXhwIjoiKF5bXitdKy18djFcXC4yNlxcLjBcXCtrM3MxKSJ9LHsiaWQiOiJ2MS4yNyIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjI3In0sIm5hbWUiOiJ2MS4yNyIsImxhdGVzdCI6InYxLjI3LjE2K2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjI3XFwuLioiLCJleGNsdWRlUmVnZXhwIjoiXlteK10rLSJ9LHsiaWQiOiJ2MS4yOCIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjI4In0sIm5hbWUiOiJ2MS4yOCIsImxhdGVzdCI6InYxLjI4LjE1K2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjI4XFwuLioiLCJleGNsdWRlUmVnZXhwIjoiXlteK10rLSJ9LHsiaWQiOiJ2MS4yOSIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjI5In0sIm5hbWUiOiJ2MS4yOSIsImxhdGVzdCI6InYxLjI5LjEwK2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjI5XFwuLioiLCJleGNsdWRlUmVnZXhwIjoiXlteK10rLSJ9LHsiaWQiOiJ2MS4zMCIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjMwIn0sIm5hbWUiOiJ2MS4zMCIsImxhdGVzdCI6InYxLjMwLjYrazNzMSIsImxhdGVzdFJlZ2V4cCI6InYxXFwuMzBcXC4uKiIsImV4Y2x1ZGVSZWdleHAiOiJeW14rXSstIn0seyJpZCI6InYxLjMxIiwidHlwZSI6ImNoYW5uZWwiLCJsaW5rcyI6eyJzZWxmIjoiaHR0cHM6Ly91cGRhdGUuazNzLmlvL3YxLXJlbGVhc2UvY2hhbm5lbHMvdjEuMzEifSwibmFtZSI6InYxLjMxIiwibGF0ZXN0IjoidjEuMzEuMitrM3MxIiwibGF0ZXN0UmVnZXhwIjoidjFcXC4zMVxcLi4qIiwiZXhjbHVkZVJlZ2V4cCI6Il5bXitdKy0ifV19Cg==",
            "response_headers": {
              "Accept-Ranges": "bytes",
              "Age": "5009",
              "Alt-Svc": "h3=\":443\"; ma=86400",
              "Cache-Control": "max-age=14400",
              "Cf-Cache-Status": "HIT",
              "Cf-Ray": "8ee06715bcf96e64-HKG",
              "Content-Type": "application/json",
              "Date": "Sat, 07 Dec 2024 00:29:40 GMT",
              "Expires": "Wed 24 Feb 1982 18:42:00 GMT",
              "Last-Modified": "Fri, 06 Dec 2024 22:44:18 GMT",
              "Nel": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}",
              "Report-To": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=wLRZ8iK0rudvvbsjvJxq9OWCda9W1uUKcsoSD1RqRl2Hs1omToStO%2B86fTv5AKI7h6IH0MMWo2bEYW45SL6qGOA8HAFvPyR2lgNwcXgnehrScjpVWgSNDkDeGv%2F3xpQw\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
              "Server": "cloudflare",
              "Server-Timing": "cfL4;desc=\"?proto=TCP\u0026rtt=1620\u0026min_rtt=1553\u0026rtt_var=474\u0026sent=6\u0026recv=8\u0026lost=0\u0026retrans=0\u0026sent_bytes=3161\u0026recv_bytes=504\u0026delivery_rate=2797166\u0026cwnd=253\u0026unsent_bytes=0\u0026cid=a9e17180381e3989\u0026ts=64\u0026x=0\"",
              "Strict-Transport-Security": "max-age=15552000; includeSubDomains; preload",
              "Vary": "Accept-Encoding",
              "X-Api-Schemas": "https://update.k3s.io/v1-release/schemas",
              "X-Content-Type-Options": "nosniff"
            },
            "retry": null,
            "status_code": 200,
            "url": "https://update.k3s.io/v1-release/channels"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.k3s1.module.k3s",
      "mode": "managed",
      "type": "null_resource",
      "name": "k8s_ca_certificates_install",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "588723595145263928",
            "triggers": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.cvm1.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm1.data.tencentcloud_images.default",
            "module.cvm1.data.tencentcloud_instance_types.default",
            "module.cvm1.tencentcloud_instance.ubuntu",
            "module.k3s1.module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s1.module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "id": "8779682527368839435",
            "triggers": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.cvm1.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm1.data.tencentcloud_images.default",
            "module.cvm1.data.tencentcloud_instance_types.default",
            "module.cvm1.tencentcloud_instance.ubuntu",
            "module.k3s1.module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s1.module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "id": "4824923551020444528",
            "triggers": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.cvm1.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm1.data.tencentcloud_images.default",
            "module.cvm1.data.tencentcloud_instance_types.default",
            "module.cvm1.tencentcloud_instance.ubuntu",
            "module.k3s1.module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s1.module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        },
        {
          "index_key": 3,
          "schema_version": 0,
          "attributes": {
            "id": "9123789250796285062",
            "triggers": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.cvm1.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm1.data.tencentcloud_images.default",
            "module.cvm1.data.tencentcloud_instance_types.default",
            "module.cvm1.tencentcloud_instance.ubuntu",
            "module.k3s1.module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s1.module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        },
        {
          "index_key": 4,
          "schema_version": 0,
          "attributes": {
            "id": "291097598658243611",
            "triggers": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.cvm1.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm1.data.tencentcloud_images.default",
            "module.cvm1.data.tencentcloud_instance_types.default",
            "module.cvm1.tencentcloud_instance.ubuntu",
            "module.k3s1.module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s1.module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        },
        {
          "index_key": 5,
          "schema_version": 0,
          "attributes": {
            "id": "3015373552024388755",
            "triggers": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.cvm1.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm1.data.tencentcloud_images.default",
            "module.cvm1.data.tencentcloud_instance_types.default",
            "module.cvm1.tencentcloud_instance.ubuntu",
            "module.k3s1.module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s1.module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "module": "module.k3s1.module.k3s",
      "mode": "managed",
      "type": "null_resource",
      "name": "kubernetes_ready",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "3164507156100949615",
            "triggers": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.cvm1.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm1.data.tencentcloud_images.default",
            "module.cvm1.data.tencentcloud_instance_types.default",
            "module.cvm1.tencentcloud_instance.ubuntu",
            "module.k3s1.module.k3s.data.http.k3s_installer",
            "module.k3s1.module.k3s.data.http.k3s_version",
            "module.k3s1.module.k3s.null_resource.agents_annotation",
            "module.k3s1.module.k3s.null_resource.agents_drain",
            "module.k3s1.module.k3s.null_resource.agents_install",
            "module.k3s1.module.k3s.null_resource.agents_label",
            "module.k3s1.module.k3s.null_resource.agents_taint",
            "module.k3s1.module.k3s.null_resource.k8s_ca_certificates_install",
            "module.k3s1.module.k3s.null_resource.servers_annotation",
            "module.k3s1.module.k3s.null_resource.servers_drain",
            "module.k3s1.module.k3s.null_resource.servers_install",
            "module.k3s1.module.k3s.null_resource.servers_label",
            "module.k3s1.module.k3s.null_resource.servers_taint",
            "module.k3s1.module.k3s.random_password.k3s_cluster_secret",
            "module.k3s1.module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s1.module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "module": "module.k3s1.module.k3s",
      "mode": "managed",
      "type": "null_resource",
      "name": "servers_drain",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "index_key": "cluster-1",
          "schema_version": 0,
          "attributes": {
            "id": "117074381445826056",
            "triggers": {
              "connection_json": "eyJhZ2VudCI6bnVsbCwiYWdlbnRfaWRlbnRpdHkiOm51bGwsImJhc3Rpb25fY2VydGlmaWNhdGUiOm51bGwsImJhc3Rpb25faG9zdCI6bnVsbCwiYmFzdGlvbl9ob3N0X2tleSI6bnVsbCwiYmFzdGlvbl9wYXNzd29yZCI6bnVsbCwiYmFzdGlvbl9wb3J0IjpudWxsLCJiYXN0aW9uX3ByaXZhdGVfa2V5IjpudWxsLCJiYXN0aW9uX3VzZXIiOm51bGwsImNhY2VydCI6bnVsbCwiY2VydGlmaWNhdGUiOm51bGwsImhvc3QiOiI0My4xNTQuMTQzLjE1NCIsImhvc3Rfa2V5IjpudWxsLCJodHRwcyI6bnVsbCwiaW5zZWN1cmUiOm51bGwsInBhc3N3b3JkIjoicXdlMTIzZXdxIiwicG9ydCI6bnVsbCwicHJpdmF0ZV9rZXkiOm51bGwsInNjcmlwdF9wYXRoIjpudWxsLCJ0aW1lb3V0IjoiMzBzIiwidHlwZSI6InNzaCIsInVzZV9udGxtIjpudWxsLCJ1c2VyIjoidWJ1bnR1In0=",
              "drain_timeout": "0s",
              "kubectl_cmd": "kubectl",
              "server_name": "cluster-1"
            }
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.cvm1.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm1.data.tencentcloud_images.default",
            "module.cvm1.data.tencentcloud_instance_types.default",
            "module.cvm1.tencentcloud_instance.ubuntu",
            "module.k3s1.module.k3s.data.http.k3s_installer",
            "module.k3s1.module.k3s.data.http.k3s_version",
            "module.k3s1.module.k3s.null_resource.k8s_ca_certificates_install",
            "module.k3s1.module.k3s.null_resource.servers_install",
            "module.k3s1.module.k3s.random_password.k3s_cluster_secret",
            "module.k3s1.module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s1.module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "module": "module.k3s1.module.k3s",
      "mode": "managed",
      "type": "null_resource",
      "name": "servers_install",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "index_key": "cluster-1",
          "schema_version": 0,
          "attributes": {
            "id": "1608362217530363878",
            "triggers": {
              "on_immutable_changes": "d6ea8680b7c3a06ecb7724e9f9cc901b09f0de53",
              "on_new_version": "v1.31.2+k3s1"
            }
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.cvm1.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm1.data.tencentcloud_images.default",
            "module.cvm1.data.tencentcloud_instance_types.default",
            "module.cvm1.tencentcloud_instance.ubuntu",
            "module.k3s1.module.k3s.data.http.k3s_installer",
            "module.k3s1.module.k3s.data.http.k3s_version",
            "module.k3s1.module.k3s.null_resource.k8s_ca_certificates_install",
            "module.k3s1.module.k3s.random_password.k3s_cluster_secret",
            "module.k3s1.module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s1.module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "module": "module.k3s1.module.k3s",
      "mode": "managed",
      "type": "random_password",
      "name": "k3s_cluster_secret",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 3,
          "attributes": {
            "bcrypt_hash": "$2a$10$zg5eUJgJP3vfCLX74BA0eeQQ8Oa39Bb5nk59Bx7ZZSUR42kCoOdsG",
            "id": "none",
            "keepers": null,
            "length": 48,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "numeric": true,
            "override_special": null,
            "result": "tJDhF6LoxR54boOYk7pbCAV5WglFbABjgSFoU64FpCAvXgP6",
            "special": false,
            "upper": true
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "result"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "bcrypt_hash"
              }
            ]
          ],
          "dependencies": [
            "module.cvm1.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm1.data.tencentcloud_images.default",
            "module.cvm1.data.tencentcloud_instance_types.default",
            "module.cvm1.tencentcloud_instance.ubuntu",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "module": "module.k3s1.module.k3s",
      "mode": "managed",
      "type": "tls_cert_request",
      "name": "master_user",
      "provider": "provider[\"registry.terraform.io/hashicorp/tls\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "cert_request_pem": "-----BEGIN CERTIFICATE REQUEST-----\nMIIBJzCBrgIBADAvMRcwFQYDVQQKEw5zeXN0ZW06bWFzdGVyczEUMBIGA1UEAxML\nbWFzdGVyLXVzZXIwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAATKblf7ZE5eK0iFvysO\nI5sebwJkUkVcycBjjpIgB3rrE3z3g/evAhYQu9byUIag5fBnk4AitRE6gnzWtbaS\nca4+dC245wODF2CcYcjH/UDl7SQdrmxFMDnG2C1Is3iB7w+gADAKBggqhkjOPQQD\nAwNoADBlAjEAoJOqjYv80CbBjtjjlq263C1Q+2eoKGwJHnaE6/SY7oPgya47ThIt\nFOn9J8LzTrjeAjBfbSSgsq4JqE+0Smmte7W2zsrPShYqnq4GeyIlbt+hR3ym1ZbM\nUk7K2zROquJXCoc=\n-----END CERTIFICATE REQUEST-----\n",
            "dns_names": null,
            "id": "5446ad36c66cd9652aaddbda383ae3302c207847",
            "ip_addresses": null,
            "key_algorithm": "ECDSA",
            "private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDDqfZyMLPWo2JS5QDGHubvbNGuCQheGUNe/b9VOIRdjB9l29KC4W5fF\nTn/e5aFxtA+gBwYFK4EEACKhZANiAATKblf7ZE5eK0iFvysOI5sebwJkUkVcycBj\njpIgB3rrE3z3g/evAhYQu9byUIag5fBnk4AitRE6gnzWtbaSca4+dC245wODF2Cc\nYcjH/UDl7SQdrmxFMDnG2C1Is3iB7w8=\n-----END EC PRIVATE KEY-----\n",
            "subject": [
              {
                "common_name": "master-user",
                "country": null,
                "locality": null,
                "organization": "system:masters",
                "organizational_unit": null,
                "postal_code": null,
                "province": null,
                "serial_number": null,
                "street_address": null
              }
            ],
            "uris": null
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "private_key_pem"
              }
            ]
          ],
          "dependencies": [
            "module.cvm1.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm1.data.tencentcloud_images.default",
            "module.cvm1.data.tencentcloud_instance_types.default",
            "module.cvm1.tencentcloud_instance.ubuntu",
            "module.k3s1.module.k3s.tls_private_key.master_user",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "module": "module.k3s1.module.k3s",
      "mode": "managed",
      "type": "tls_locally_signed_cert",
      "name": "master_user",
      "provider": "provider[\"registry.terraform.io/hashicorp/tls\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "allowed_uses": [
              "key_encipherment",
              "digital_signature",
              "client_auth"
            ],
            "ca_cert_pem": "-----BEGIN CERTIFICATE-----\nMIIBvjCCAUSgAwIBAgIRAI8X98BnO/EUwx71/2U8m4QwCgYIKoZIzj0EAwMwHzEd\nMBsGA1UEAxMUa3ViZXJuZXRlcy1jbGllbnQtY2EwIBcNMjQxMjA3MDAyOTQwWhgP\nMjEyNDEyMDgwMDI5NDBaMB8xHTAbBgNVBAMTFGt1YmVybmV0ZXMtY2xpZW50LWNh\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEMpe9mV8YR8hOWNsfs/NcQwfiFBIbsBZo\n53R6uv1q4V345SneirNMHWV5nvvQRcNwMEaraJgegXTjhMXPo3btvwUnZye7xXcJ\nIbKzwvkXQURALb0csdgSOoVywan+a9D0o0IwQDAOBgNVHQ8BAf8EBAMCAqQwDwYD\nVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUM19K8SHUoBVg3nF+CLz6AQb3SKMwCgYI\nKoZIzj0EAwMDaAAwZQIxAPgiQnDEuvpJIXTfdPCSGflQ4cznNbkVt/MOCzRa5kya\nWPh885/+EN5Ri3MtXRb3TgIwaoZJQubdGC9fpAlGtNaobWZcwsVSHj1WhIEUS3mJ\npPoHHwXFdhQ+0gOzPxKSly9D\n-----END CERTIFICATE-----\n",
            "ca_key_algorithm": "ECDSA",
            "ca_private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDDyVzz5eDg/t+gUw+ANJRtbEcRWb6GGM1+z0ApTLmsHinESQ2dRPTth\nGfnO1Rb2EbugBwYFK4EEACKhZANiAAQyl72ZXxhHyE5Y2x+z81xDB+IUEhuwFmjn\ndHq6/WrhXfjlKd6Ks0wdZXme+9BFw3AwRqtomB6BdOOExc+jdu2/BSdnJ7vFdwkh\nsrPC+RdBREAtvRyx2BI6hXLBqf5r0PQ=\n-----END EC PRIVATE KEY-----\n",
            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIB4zCCAWigAwIBAgIRALVNKEFH51ZVa/WgO+4cUIgwCgYIKoZIzj0EAwMwHzEd\nMBsGA1UEAxMUa3ViZXJuZXRlcy1jbGllbnQtY2EwIBcNMjQxMjA3MDAyOTUwWhgP\nMjEyNDEyMDgwMDI5NTBaMC8xFzAVBgNVBAoTDnN5c3RlbTptYXN0ZXJzMRQwEgYD\nVQQDEwttYXN0ZXItdXNlcjB2MBAGByqGSM49AgEGBSuBBAAiA2IABMpuV/tkTl4r\nSIW/Kw4jmx5vAmRSRVzJwGOOkiAHeusTfPeD968CFhC71vJQhqDl8GeTgCK1ETqC\nfNa1tpJxrj50LbjnA4MXYJxhyMf9QOXtJB2ubEUwOcbYLUizeIHvD6NWMFQwDgYD\nVR0PAQH/BAQDAgWgMBMGA1UdJQQMMAoGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAw\nHwYDVR0jBBgwFoAUM19K8SHUoBVg3nF+CLz6AQb3SKMwCgYIKoZIzj0EAwMDaQAw\nZgIxAIXoWQx9vn935C8vt4Ay88yjYOdprmK9+Qu0/S2POUdcm8CGfvgh/mPEO0Rg\nOvfbbwIxAN+tmRgWFAv4aSfY7UjTGo7JrTQvi/uSp5HaFWPFGFrtErwBpWVi6hgZ\n8iQ4aegOzQ==\n-----END CERTIFICATE-----\n",
            "cert_request_pem": "-----BEGIN CERTIFICATE REQUEST-----\nMIIBJzCBrgIBADAvMRcwFQYDVQQKEw5zeXN0ZW06bWFzdGVyczEUMBIGA1UEAxML\nbWFzdGVyLXVzZXIwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAATKblf7ZE5eK0iFvysO\nI5sebwJkUkVcycBjjpIgB3rrE3z3g/evAhYQu9byUIag5fBnk4AitRE6gnzWtbaS\nca4+dC245wODF2CcYcjH/UDl7SQdrmxFMDnG2C1Is3iB7w+gADAKBggqhkjOPQQD\nAwNoADBlAjEAoJOqjYv80CbBjtjjlq263C1Q+2eoKGwJHnaE6/SY7oPgya47ThIt\nFOn9J8LzTrjeAjBfbSSgsq4JqE+0Smmte7W2zsrPShYqnq4GeyIlbt+hR3ym1ZbM\nUk7K2zROquJXCoc=\n-----END CERTIFICATE REQUEST-----\n",
            "early_renewal_hours": 0,
            "id": "240990890563644769477901379982728122504",
            "is_ca_certificate": false,
            "ready_for_renewal": false,
            "set_subject_key_id": false,
            "validity_end_time": "2124-12-08T08:29:50.345837126+08:00",
            "validity_period_hours": 876600,
            "validity_start_time": "2024-12-07T08:29:50.345837126+08:00"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "ca_private_key_pem"
              }
            ]
          ],
          "dependencies": [
            "module.cvm1.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm1.data.tencentcloud_images.default",
            "module.cvm1.data.tencentcloud_instance_types.default",
            "module.cvm1.tencentcloud_instance.ubuntu",
            "module.k3s1.module.k3s.tls_cert_request.master_user",
            "module.k3s1.module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s1.module.k3s.tls_private_key.master_user",
            "module.k3s1.module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "module": "module.k3s1.module.k3s",
      "mode": "managed",
      "type": "tls_private_key",
      "name": "kubernetes_ca",
      "provider": "provider[\"registry.terraform.io/hashicorp/tls\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "algorithm": "ECDSA",
            "ecdsa_curve": "P384",
            "id": "354a95574790bd4e05b77566e40b2b0ff8ca963d",
            "private_key_openssh": "-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAiAAAABNl\nY2RzYS1zaGEyLW5pc3RwMzg0AAAACG5pc3RwMzg0AAAAYQQyl72ZXxhHyE5Y2x+z\n81xDB+IUEhuwFmjndHq6/WrhXfjlKd6Ks0wdZXme+9BFw3AwRqtomB6BdOOExc+j\ndu2/BSdnJ7vFdwkhsrPC+RdBREAtvRyx2BI6hXLBqf5r0PQAAADQ/DKx/fwysf0A\nAAATZWNkc2Etc2hhMi1uaXN0cDM4NAAAAAhuaXN0cDM4NAAAAGEEMpe9mV8YR8hO\nWNsfs/NcQwfiFBIbsBZo53R6uv1q4V345SneirNMHWV5nvvQRcNwMEaraJgegXTj\nhMXPo3btvwUnZye7xXcJIbKzwvkXQURALb0csdgSOoVywan+a9D0AAAAMQDyVzz5\neDg/t+gUw+ANJRtbEcRWb6GGM1+z0ApTLmsHinESQ2dRPTthGfnO1Rb2EbsAAAAA\nAQIDBAUGBw==\n-----END OPENSSH PRIVATE KEY-----\n",
            "private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDDyVzz5eDg/t+gUw+ANJRtbEcRWb6GGM1+z0ApTLmsHinESQ2dRPTth\nGfnO1Rb2EbugBwYFK4EEACKhZANiAAQyl72ZXxhHyE5Y2x+z81xDB+IUEhuwFmjn\ndHq6/WrhXfjlKd6Ks0wdZXme+9BFw3AwRqtomB6BdOOExc+jdu2/BSdnJ7vFdwkh\nsrPC+RdBREAtvRyx2BI6hXLBqf5r0PQ=\n-----END EC PRIVATE KEY-----\n",
            "private_key_pem_pkcs8": "-----BEGIN PRIVATE KEY-----\nMIG2AgEAMBAGByqGSM49AgEGBSuBBAAiBIGeMIGbAgEBBDDyVzz5eDg/t+gUw+AN\nJRtbEcRWb6GGM1+z0ApTLmsHinESQ2dRPTthGfnO1Rb2EbuhZANiAAQyl72ZXxhH\nyE5Y2x+z81xDB+IUEhuwFmjndHq6/WrhXfjlKd6Ks0wdZXme+9BFw3AwRqtomB6B\ndOOExc+jdu2/BSdnJ7vFdwkhsrPC+RdBREAtvRyx2BI6hXLBqf5r0PQ=\n-----END PRIVATE KEY-----\n",
            "public_key_fingerprint_md5": "83:ba:66:bb:f1:b4:56:5d:b2:ac:0e:13:70:30:c7:57",
            "public_key_fingerprint_sha256": "SHA256:MmIYp24WGcdhMqclDFitNxQ3kOfYX+x478I3kysSrIM",
            "public_key_openssh": "ecdsa-sha2-nistp384 AAAAE2VjZHNhLXNoYTItbmlzdHAzODQAAAAIbmlzdHAzODQAAABhBDKXvZlfGEfITljbH7PzXEMH4hQSG7AWaOd0err9auFd+OUp3oqzTB1leZ770EXDcDBGq2iYHoF044TFz6N27b8FJ2cnu8V3CSGys8L5F0FEQC29HLHYEjqFcsGp/mvQ9A==\n",
            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEMpe9mV8YR8hOWNsfs/NcQwfiFBIbsBZo\n53R6uv1q4V345SneirNMHWV5nvvQRcNwMEaraJgegXTjhMXPo3btvwUnZye7xXcJ\nIbKzwvkXQURALb0csdgSOoVywan+a9D0\n-----END PUBLIC KEY-----\n",
            "rsa_bits": 2048
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "private_key_pem_pkcs8"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "private_key_openssh"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "private_key_pem"
              }
            ]
          ],
          "dependencies": [
            "module.cvm1.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm1.data.tencentcloud_images.default",
            "module.cvm1.data.tencentcloud_instance_types.default",
            "module.cvm1.tencentcloud_instance.ubuntu",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 1,
          "attributes": {
            "algorithm": "ECDSA",
            "ecdsa_curve": "P384",
            "id": "42e85659f4f6681da9069dd6c07ee249bf545069",
            "private_key_openssh": "-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAiAAAABNl\nY2RzYS1zaGEyLW5pc3RwMzg0AAAACG5pc3RwMzg0AAAAYQQv7s38x81hATIJBpo4\nuNJmSvD/WW4BODQkF30R0uHXuknzvRpky68VirdVjP59iyRhPfmGXK7WzXdEqnjn\nXXMFAb0hbgpO4P+MlwhvLsgUvXw8cYBaRh9f+qkvS2vnPIkAAADQSO92fkjvdn4A\nAAATZWNkc2Etc2hhMi1uaXN0cDM4NAAAAAhuaXN0cDM4NAAAAGEEL+7N/MfNYQEy\nCQaaOLjSZkrw/1luATg0JBd9EdLh17pJ870aZMuvFYq3VYz+fYskYT35hlyu1s13\nRKp4511zBQG9IW4KTuD/jJcIby7IFL18PHGAWkYfX/qpL0tr5zyJAAAAMQDM3Tzy\nmILrdpQhSWBVqHgb5ytKz7Q13VhyNFkIz9fVW2M/FIuif2pCoGMfYjriDsoAAAAA\nAQIDBAUGBw==\n-----END OPENSSH PRIVATE KEY-----\n",
            "private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDDM3TzymILrdpQhSWBVqHgb5ytKz7Q13VhyNFkIz9fVW2M/FIuif2pC\noGMfYjriDsqgBwYFK4EEACKhZANiAAQv7s38x81hATIJBpo4uNJmSvD/WW4BODQk\nF30R0uHXuknzvRpky68VirdVjP59iyRhPfmGXK7WzXdEqnjnXXMFAb0hbgpO4P+M\nlwhvLsgUvXw8cYBaRh9f+qkvS2vnPIk=\n-----END EC PRIVATE KEY-----\n",
            "private_key_pem_pkcs8": "-----BEGIN PRIVATE KEY-----\nMIG2AgEAMBAGByqGSM49AgEGBSuBBAAiBIGeMIGbAgEBBDDM3TzymILrdpQhSWBV\nqHgb5ytKz7Q13VhyNFkIz9fVW2M/FIuif2pCoGMfYjriDsqhZANiAAQv7s38x81h\nATIJBpo4uNJmSvD/WW4BODQkF30R0uHXuknzvRpky68VirdVjP59iyRhPfmGXK7W\nzXdEqnjnXXMFAb0hbgpO4P+MlwhvLsgUvXw8cYBaRh9f+qkvS2vnPIk=\n-----END PRIVATE KEY-----\n",
            "public_key_fingerprint_md5": "48:3f:50:6d:f4:86:fb:15:94:64:ed:14:9c:a9:47:41",
            "public_key_fingerprint_sha256": "SHA256:5qOT5RwCXyjH+pH3SP+F/p4fIU4x+B/6UFm5D7TS81M",
            "public_key_openssh": "ecdsa-sha2-nistp384 AAAAE2VjZHNhLXNoYTItbmlzdHAzODQAAAAIbmlzdHAzODQAAABhBC/uzfzHzWEBMgkGmji40mZK8P9ZbgE4NCQXfRHS4de6SfO9GmTLrxWKt1WM/n2LJGE9+YZcrtbNd0SqeOddcwUBvSFuCk7g/4yXCG8uyBS9fDxxgFpGH1/6qS9La+c8iQ==\n",
            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEL+7N/MfNYQEyCQaaOLjSZkrw/1luATg0\nJBd9EdLh17pJ870aZMuvFYq3VYz+fYskYT35hlyu1s13RKp4511zBQG9IW4KTuD/\njJcIby7IFL18PHGAWkYfX/qpL0tr5zyJ\n-----END PUBLIC KEY-----\n",
            "rsa_bits": 2048
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "private_key_openssh"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "private_key_pem_pkcs8"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "private_key_pem"
              }
            ]
          ],
          "dependencies": [
            "module.cvm1.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm1.data.tencentcloud_images.default",
            "module.cvm1.data.tencentcloud_instance_types.default",
            "module.cvm1.tencentcloud_instance.ubuntu",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 1,
          "attributes": {
            "algorithm": "ECDSA",
            "ecdsa_curve": "P384",
            "id": "b47f18c49272b0a17fd82055c33eae7ea21796a2",
            "private_key_openssh": "-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAiAAAABNl\nY2RzYS1zaGEyLW5pc3RwMzg0AAAACG5pc3RwMzg0AAAAYQRxKS2Zc5aKGL7yDoUK\nDGs53WyHSJqSgssoUpK/6Kez0qNU7nS1/GLdn0iHgZmcPZhABG9E5REG0saQ6LQ/\n/o5LH1bT8F8GnoRtefwoDSuVF+r1x7OLkV2jR42Y4uyqe1YAAADI2Nrktdja5LUA\nAAATZWNkc2Etc2hhMi1uaXN0cDM4NAAAAAhuaXN0cDM4NAAAAGEEcSktmXOWihi+\n8g6FCgxrOd1sh0iakoLLKFKSv+ins9KjVO50tfxi3Z9Ih4GZnD2YQARvROURBtLG\nkOi0P/6OSx9W0/BfBp6EbXn8KA0rlRfq9cezi5Fdo0eNmOLsqntWAAAAMDl+QTre\nL67bJIkgIJf8IgFWLTdKw3drqRCx1mnvEmbSS6iLWbur3hKgcrO1XZ8r9AAAAAA=\n-----END OPENSSH PRIVATE KEY-----\n",
            "private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDA5fkE63i+u2ySJICCX/CIBVi03SsN3a6kQsdZp7xJm0kuoi1m7q94S\noHKztV2fK/SgBwYFK4EEACKhZANiAARxKS2Zc5aKGL7yDoUKDGs53WyHSJqSgsso\nUpK/6Kez0qNU7nS1/GLdn0iHgZmcPZhABG9E5REG0saQ6LQ//o5LH1bT8F8GnoRt\nefwoDSuVF+r1x7OLkV2jR42Y4uyqe1Y=\n-----END EC PRIVATE KEY-----\n",
            "private_key_pem_pkcs8": "-----BEGIN PRIVATE KEY-----\nMIG2AgEAMBAGByqGSM49AgEGBSuBBAAiBIGeMIGbAgEBBDA5fkE63i+u2ySJICCX\n/CIBVi03SsN3a6kQsdZp7xJm0kuoi1m7q94SoHKztV2fK/ShZANiAARxKS2Zc5aK\nGL7yDoUKDGs53WyHSJqSgssoUpK/6Kez0qNU7nS1/GLdn0iHgZmcPZhABG9E5REG\n0saQ6LQ//o5LH1bT8F8GnoRtefwoDSuVF+r1x7OLkV2jR42Y4uyqe1Y=\n-----END PRIVATE KEY-----\n",
            "public_key_fingerprint_md5": "61:68:9b:00:bf:f2:2d:79:2b:64:30:64:db:af:2c:25",
            "public_key_fingerprint_sha256": "SHA256:LEDuLgLtim8BmK1USVgEK2Ajaws5A2IadWXjxqlje6g",
            "public_key_openssh": "ecdsa-sha2-nistp384 AAAAE2VjZHNhLXNoYTItbmlzdHAzODQAAAAIbmlzdHAzODQAAABhBHEpLZlzlooYvvIOhQoMazndbIdImpKCyyhSkr/op7PSo1TudLX8Yt2fSIeBmZw9mEAEb0TlEQbSxpDotD/+jksfVtPwXwaehG15/CgNK5UX6vXHs4uRXaNHjZji7Kp7Vg==\n",
            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEcSktmXOWihi+8g6FCgxrOd1sh0iakoLL\nKFKSv+ins9KjVO50tfxi3Z9Ih4GZnD2YQARvROURBtLGkOi0P/6OSx9W0/BfBp6E\nbXn8KA0rlRfq9cezi5Fdo0eNmOLsqntW\n-----END PUBLIC KEY-----\n",
            "rsa_bits": 2048
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "private_key_pem_pkcs8"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "private_key_openssh"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "private_key_pem"
              }
            ]
          ],
          "dependencies": [
            "module.cvm1.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm1.data.tencentcloud_images.default",
            "module.cvm1.data.tencentcloud_instance_types.default",
            "module.cvm1.tencentcloud_instance.ubuntu",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "module": "module.k3s1.module.k3s",
      "mode": "managed",
      "type": "tls_private_key",
      "name": "master_user",
      "provider": "provider[\"registry.terraform.io/hashicorp/tls\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "algorithm": "ECDSA",
            "ecdsa_curve": "P384",
            "id": "4473a81037aeae1f8a2ca507b2ac24a22db409b3",
            "private_key_openssh": "-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAiAAAABNl\nY2RzYS1zaGEyLW5pc3RwMzg0AAAACG5pc3RwMzg0AAAAYQTKblf7ZE5eK0iFvysO\nI5sebwJkUkVcycBjjpIgB3rrE3z3g/evAhYQu9byUIag5fBnk4AitRE6gnzWtbaS\nca4+dC245wODF2CcYcjH/UDl7SQdrmxFMDnG2C1Is3iB7w8AAADQF5qt5heareYA\nAAATZWNkc2Etc2hhMi1uaXN0cDM4NAAAAAhuaXN0cDM4NAAAAGEEym5X+2ROXitI\nhb8rDiObHm8CZFJFXMnAY46SIAd66xN894P3rwIWELvW8lCGoOXwZ5OAIrUROoJ8\n1rW2knGuPnQtuOcDgxdgnGHIx/1A5e0kHa5sRTA5xtgtSLN4ge8PAAAAMQDqfZyM\nLPWo2JS5QDGHubvbNGuCQheGUNe/b9VOIRdjB9l29KC4W5fFTn/e5aFxtA8AAAAA\nAQIDBAUGBw==\n-----END OPENSSH PRIVATE KEY-----\n",
            "private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDDqfZyMLPWo2JS5QDGHubvbNGuCQheGUNe/b9VOIRdjB9l29KC4W5fF\nTn/e5aFxtA+gBwYFK4EEACKhZANiAATKblf7ZE5eK0iFvysOI5sebwJkUkVcycBj\njpIgB3rrE3z3g/evAhYQu9byUIag5fBnk4AitRE6gnzWtbaSca4+dC245wODF2Cc\nYcjH/UDl7SQdrmxFMDnG2C1Is3iB7w8=\n-----END EC PRIVATE KEY-----\n",
            "private_key_pem_pkcs8": "-----BEGIN PRIVATE KEY-----\nMIG2AgEAMBAGByqGSM49AgEGBSuBBAAiBIGeMIGbAgEBBDDqfZyMLPWo2JS5QDGH\nubvbNGuCQheGUNe/b9VOIRdjB9l29KC4W5fFTn/e5aFxtA+hZANiAATKblf7ZE5e\nK0iFvysOI5sebwJkUkVcycBjjpIgB3rrE3z3g/evAhYQu9byUIag5fBnk4AitRE6\ngnzWtbaSca4+dC245wODF2CcYcjH/UDl7SQdrmxFMDnG2C1Is3iB7w8=\n-----END PRIVATE KEY-----\n",
            "public_key_fingerprint_md5": "a1:ca:72:eb:e2:09:9a:86:53:55:e3:44:54:f2:1b:e5",
            "public_key_fingerprint_sha256": "SHA256:4EG0KZMpBxSOmw4JcQhOY3rJxx1rAZAe5UVVEO8pDTw",
            "public_key_openssh": "ecdsa-sha2-nistp384 AAAAE2VjZHNhLXNoYTItbmlzdHAzODQAAAAIbmlzdHAzODQAAABhBMpuV/tkTl4rSIW/Kw4jmx5vAmRSRVzJwGOOkiAHeusTfPeD968CFhC71vJQhqDl8GeTgCK1ETqCfNa1tpJxrj50LbjnA4MXYJxhyMf9QOXtJB2ubEUwOcbYLUizeIHvDw==\n",
            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEym5X+2ROXitIhb8rDiObHm8CZFJFXMnA\nY46SIAd66xN894P3rwIWELvW8lCGoOXwZ5OAIrUROoJ81rW2knGuPnQtuOcDgxdg\nnGHIx/1A5e0kHa5sRTA5xtgtSLN4ge8P\n-----END PUBLIC KEY-----\n",
            "rsa_bits": 2048
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "private_key_pem"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "private_key_openssh"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "private_key_pem_pkcs8"
              }
            ]
          ],
          "dependencies": [
            "module.cvm1.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm1.data.tencentcloud_images.default",
            "module.cvm1.data.tencentcloud_instance_types.default",
            "module.cvm1.tencentcloud_instance.ubuntu",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "module": "module.k3s1.module.k3s",
      "mode": "managed",
      "type": "tls_self_signed_cert",
      "name": "kubernetes_ca_certs",
      "provider": "provider[\"registry.terraform.io/hashicorp/tls\"]",
      "instances": [
        {
          "index_key": "0",
          "schema_version": 0,
          "attributes": {
            "allowed_uses": [
              "digital_signature",
              "key_encipherment",
              "cert_signing"
            ],
            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIBvjCCAUSgAwIBAgIRAI8X98BnO/EUwx71/2U8m4QwCgYIKoZIzj0EAwMwHzEd\nMBsGA1UEAxMUa3ViZXJuZXRlcy1jbGllbnQtY2EwIBcNMjQxMjA3MDAyOTQwWhgP\nMjEyNDEyMDgwMDI5NDBaMB8xHTAbBgNVBAMTFGt1YmVybmV0ZXMtY2xpZW50LWNh\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEMpe9mV8YR8hOWNsfs/NcQwfiFBIbsBZo\n53R6uv1q4V345SneirNMHWV5nvvQRcNwMEaraJgegXTjhMXPo3btvwUnZye7xXcJ\nIbKzwvkXQURALb0csdgSOoVywan+a9D0o0IwQDAOBgNVHQ8BAf8EBAMCAqQwDwYD\nVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUM19K8SHUoBVg3nF+CLz6AQb3SKMwCgYI\nKoZIzj0EAwMDaAAwZQIxAPgiQnDEuvpJIXTfdPCSGflQ4cznNbkVt/MOCzRa5kya\nWPh885/+EN5Ri3MtXRb3TgIwaoZJQubdGC9fpAlGtNaobWZcwsVSHj1WhIEUS3mJ\npPoHHwXFdhQ+0gOzPxKSly9D\n-----END CERTIFICATE-----\n",
            "dns_names": null,
            "early_renewal_hours": 0,
            "id": "190204051223917996670321147789776296836",
            "ip_addresses": null,
            "is_ca_certificate": true,
            "key_algorithm": "ECDSA",
            "private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDDyVzz5eDg/t+gUw+ANJRtbEcRWb6GGM1+z0ApTLmsHinESQ2dRPTth\nGfnO1Rb2EbugBwYFK4EEACKhZANiAAQyl72ZXxhHyE5Y2x+z81xDB+IUEhuwFmjn\ndHq6/WrhXfjlKd6Ks0wdZXme+9BFw3AwRqtomB6BdOOExc+jdu2/BSdnJ7vFdwkh\nsrPC+RdBREAtvRyx2BI6hXLBqf5r0PQ=\n-----END EC PRIVATE KEY-----\n",
            "ready_for_renewal": false,
            "set_authority_key_id": false,
            "set_subject_key_id": false,
            "subject": [
              {
                "common_name": "kubernetes-client-ca",
                "country": null,
                "locality": null,
                "organization": null,
                "organizational_unit": null,
                "postal_code": null,
                "province": null,
                "serial_number": null,
                "street_address": null
              }
            ],
            "uris": null,
            "validity_end_time": "2124-12-08T08:29:40.665696211+08:00",
            "validity_period_hours": 876600,
            "validity_start_time": "2024-12-07T08:29:40.665696211+08:00"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "private_key_pem"
              }
            ]
          ],
          "dependencies": [
            "module.cvm1.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm1.data.tencentcloud_images.default",
            "module.cvm1.data.tencentcloud_instance_types.default",
            "module.cvm1.tencentcloud_instance.ubuntu",
            "module.k3s1.module.k3s.tls_private_key.kubernetes_ca",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        },
        {
          "index_key": "1",
          "schema_version": 0,
          "attributes": {
            "allowed_uses": [
              "digital_signature",
              "key_encipherment",
              "cert_signing"
            ],
            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIBvTCCAUSgAwIBAgIRAORE01kFnImaH+NFeDpPx1AwCgYIKoZIzj0EAwMwHzEd\nMBsGA1UEAxMUa3ViZXJuZXRlcy1zZXJ2ZXItY2EwIBcNMjQxMjA3MDAyOTQwWhgP\nMjEyNDEyMDgwMDI5NDBaMB8xHTAbBgNVBAMTFGt1YmVybmV0ZXMtc2VydmVyLWNh\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEL+7N/MfNYQEyCQaaOLjSZkrw/1luATg0\nJBd9EdLh17pJ870aZMuvFYq3VYz+fYskYT35hlyu1s13RKp4511zBQG9IW4KTuD/\njJcIby7IFL18PHGAWkYfX/qpL0tr5zyJo0IwQDAOBgNVHQ8BAf8EBAMCAqQwDwYD\nVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUWIy7+2nNSSaIgY/FqkIEri3z5pgwCgYI\nKoZIzj0EAwMDZwAwZAIwe7J/En3mzJMxdbRoC8wFSJfkmAe5BqixRNoQ3ijxdinv\nlrqnFXqMJtxFBQla9T8XAjASsRFi3PJ4PcG0Wg0M44OoolTgiasGmz/gkQ7iIalE\n3UFC+BMYqLC9hepKUlhCW2Q=\n-----END CERTIFICATE-----\n",
            "dns_names": null,
            "early_renewal_hours": 0,
            "id": "303421345866810688857064686794847536976",
            "ip_addresses": null,
            "is_ca_certificate": true,
            "key_algorithm": "ECDSA",
            "private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDDM3TzymILrdpQhSWBVqHgb5ytKz7Q13VhyNFkIz9fVW2M/FIuif2pC\noGMfYjriDsqgBwYFK4EEACKhZANiAAQv7s38x81hATIJBpo4uNJmSvD/WW4BODQk\nF30R0uHXuknzvRpky68VirdVjP59iyRhPfmGXK7WzXdEqnjnXXMFAb0hbgpO4P+M\nlwhvLsgUvXw8cYBaRh9f+qkvS2vnPIk=\n-----END EC PRIVATE KEY-----\n",
            "ready_for_renewal": false,
            "set_authority_key_id": false,
            "set_subject_key_id": false,
            "subject": [
              {
                "common_name": "kubernetes-server-ca",
                "country": null,
                "locality": null,
                "organization": null,
                "organizational_unit": null,
                "postal_code": null,
                "province": null,
                "serial_number": null,
                "street_address": null
              }
            ],
            "uris": null,
            "validity_end_time": "2124-12-08T08:29:40.68983603+08:00",
            "validity_period_hours": 876600,
            "validity_start_time": "2024-12-07T08:29:40.68983603+08:00"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "private_key_pem"
              }
            ]
          ],
          "dependencies": [
            "module.cvm1.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm1.data.tencentcloud_images.default",
            "module.cvm1.data.tencentcloud_instance_types.default",
            "module.cvm1.tencentcloud_instance.ubuntu",
            "module.k3s1.module.k3s.tls_private_key.kubernetes_ca",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        },
        {
          "index_key": "2",
          "schema_version": 0,
          "attributes": {
            "allowed_uses": [
              "digital_signature",
              "key_encipherment",
              "cert_signing"
            ],
            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIB1TCCAVugAwIBAgIQbsaTtDiUggENdspuHPi0QzAKBggqhkjOPQQDAzArMSkw\nJwYDVQQDEyBrdWJlcm5ldGVzLXJlcXVlc3QtaGVhZGVyLWtleS1jYTAgFw0yNDEy\nMDcwMDI5NDBaGA8yMTI0MTIwODAwMjk0MFowKzEpMCcGA1UEAxMga3ViZXJuZXRl\ncy1yZXF1ZXN0LWhlYWRlci1rZXktY2EwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAARx\nKS2Zc5aKGL7yDoUKDGs53WyHSJqSgssoUpK/6Kez0qNU7nS1/GLdn0iHgZmcPZhA\nBG9E5REG0saQ6LQ//o5LH1bT8F8GnoRtefwoDSuVF+r1x7OLkV2jR42Y4uyqe1aj\nQjBAMA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBTj\njvB09Ph5iOp6xgCPc7G2aMj2xDAKBggqhkjOPQQDAwNoADBlAjEA5T1ebvgQPe7q\nP+G4cpu147+LGbWXVZ+9xdpGYzvMg1gmsZ5h6ImNMjYkp7ZSTFg3AjBdkUeMPfZV\nIFiMQTeOLgwD0xMGuAfPVlXP9rOrnCQsthjllcqVrO1RPgch4EZrrhM=\n-----END CERTIFICATE-----\n",
            "dns_names": null,
            "early_renewal_hours": 0,
            "id": "147246150107122326751358893425931367491",
            "ip_addresses": null,
            "is_ca_certificate": true,
            "key_algorithm": "ECDSA",
            "private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDA5fkE63i+u2ySJICCX/CIBVi03SsN3a6kQsdZp7xJm0kuoi1m7q94S\noHKztV2fK/SgBwYFK4EEACKhZANiAARxKS2Zc5aKGL7yDoUKDGs53WyHSJqSgsso\nUpK/6Kez0qNU7nS1/GLdn0iHgZmcPZhABG9E5REG0saQ6LQ//o5LH1bT8F8GnoRt\nefwoDSuVF+r1x7OLkV2jR42Y4uyqe1Y=\n-----END EC PRIVATE KEY-----\n",
            "ready_for_renewal": false,
            "set_authority_key_id": false,
            "set_subject_key_id": false,
            "subject": [
              {
                "common_name": "kubernetes-request-header-key-ca",
                "country": null,
                "locality": null,
                "organization": null,
                "organizational_unit": null,
                "postal_code": null,
                "province": null,
                "serial_number": null,
                "street_address": null
              }
            ],
            "uris": null,
            "validity_end_time": "2124-12-08T08:29:40.689811795+08:00",
            "validity_period_hours": 876600,
            "validity_start_time": "2024-12-07T08:29:40.689811795+08:00"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "private_key_pem"
              }
            ]
          ],
          "dependencies": [
            "module.cvm1.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm1.data.tencentcloud_images.default",
            "module.cvm1.data.tencentcloud_instance_types.default",
            "module.cvm1.tencentcloud_instance.ubuntu",
            "module.k3s1.module.k3s.tls_private_key.kubernetes_ca",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "module": "module.k3s2.module.k3s",
      "mode": "data",
      "type": "http",
      "name": "k3s_installer",
      "provider": "provider[\"registry.terraform.io/hashicorp/http\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "body": "#!/bin/sh\nset -e\nset -o noglob\n\n# Usage:\n#   curl ... | ENV_VAR=... sh -\n#       or\n#   ENV_VAR=... ./install.sh\n#\n# Example:\n#   Installing a server without traefik:\n#     curl ... | INSTALL_K3S_EXEC=\"--disable=traefik\" sh -\n#   Installing an agent to point at a server:\n#     curl ... | K3S_TOKEN=xxx K3S_URL=https://server-url:6443 sh -\n#\n# Environment variables:\n#   - K3S_*\n#     Environment variables which begin with K3S_ will be preserved for the\n#     systemd service to use. Setting K3S_URL without explicitly setting\n#     a systemd exec command will default the command to \"agent\", and we\n#     enforce that K3S_TOKEN is also set.\n#\n#   - INSTALL_K3S_SKIP_DOWNLOAD\n#     If set to true will not download k3s hash or binary.\n#\n#   - INSTALL_K3S_FORCE_RESTART\n#     If set to true will always restart the K3s service\n#\n#   - INSTALL_K3S_SYMLINK\n#     If set to 'skip' will not create symlinks, 'force' will overwrite,\n#     default will symlink if command does not exist in path.\n#\n#   - INSTALL_K3S_SKIP_ENABLE\n#     If set to true will not enable or start k3s service.\n#\n#   - INSTALL_K3S_SKIP_START\n#     If set to true will not start k3s service.\n#\n#   - INSTALL_K3S_VERSION\n#     Version of k3s to download from github. Will attempt to download from the\n#     stable channel if not specified.\n#\n#   - INSTALL_K3S_COMMIT\n#     Commit of k3s to download from temporary cloud storage.\n#     * (for developer \u0026 QA use)\n#\n#   - INSTALL_K3S_PR\n#     PR build of k3s to download from Github Artifacts.\n#     * (for developer \u0026 QA use)\n#\n#   - INSTALL_K3S_BIN_DIR\n#     Directory to install k3s binary, links, and uninstall script to, or use\n#     /usr/local/bin as the default\n#\n#   - INSTALL_K3S_BIN_DIR_READ_ONLY\n#     If set to true will not write files to INSTALL_K3S_BIN_DIR, forces\n#     setting INSTALL_K3S_SKIP_DOWNLOAD=true\n#\n#   - INSTALL_K3S_SYSTEMD_DIR\n#     Directory to install systemd service and environment files to, or use\n#     /etc/systemd/system as the default\n#\n#   - INSTALL_K3S_EXEC or script arguments\n#     Command with flags to use for launching k3s in the systemd service, if\n#     the command is not specified will default to \"agent\" if K3S_URL is set\n#     or \"server\" if not. The final systemd command resolves to a combination\n#     of EXEC and script args ($@).\n#\n#     The following commands result in the same behavior:\n#       curl ... | INSTALL_K3S_EXEC=\"--disable=traefik\" sh -s -\n#       curl ... | INSTALL_K3S_EXEC=\"server --disable=traefik\" sh -s -\n#       curl ... | INSTALL_K3S_EXEC=\"server\" sh -s - --disable=traefik\n#       curl ... | sh -s - server --disable=traefik\n#       curl ... | sh -s - --disable=traefik\n#\n#   - INSTALL_K3S_NAME\n#     Name of systemd service to create, will default from the k3s exec command\n#     if not specified. If specified the name will be prefixed with 'k3s-'.\n#\n#   - INSTALL_K3S_TYPE\n#     Type of systemd service to create, will default from the k3s exec command\n#     if not specified.\n#\n#   - INSTALL_K3S_SELINUX_WARN\n#     If set to true will continue if k3s-selinux policy is not found.\n#\n#   - INSTALL_K3S_SKIP_SELINUX_RPM\n#     If set to true will skip automatic installation of the k3s RPM.\n#\n#   - INSTALL_K3S_CHANNEL_URL\n#     Channel URL for fetching k3s download URL.\n#     Defaults to 'https://update.k3s.io/v1-release/channels'.\n#\n#   - INSTALL_K3S_CHANNEL\n#     Channel to use for fetching k3s download URL.\n#     Defaults to 'stable'.\n\nGITHUB_URL=https://github.com/k3s-io/k3s/releases\nGITHUB_PR_URL=\"\"\nSTORAGE_URL=https://k3s-ci-builds.s3.amazonaws.com\nDOWNLOADER=\n\n# --- helper functions for logs ---\ninfo()\n{\n    echo '[INFO] ' \"$@\"\n}\nwarn()\n{\n    echo '[WARN] ' \"$@\" \u003e\u00262\n}\nfatal()\n{\n    echo '[ERROR] ' \"$@\" \u003e\u00262\n    exit 1\n}\n\n# --- fatal if no systemd or openrc ---\nverify_system() {\n    if [ -x /sbin/openrc-run ]; then\n        HAS_OPENRC=true\n        return\n    fi\n    if [ -x /bin/systemctl ] || type systemctl \u003e /dev/null 2\u003e\u00261; then\n        HAS_SYSTEMD=true\n        return\n    fi\n    fatal 'Can not find systemd or openrc to use as a process supervisor for k3s'\n}\n\n# --- add quotes to command arguments ---\nquote() {\n    for arg in \"$@\"; do\n        printf '%s\\n' \"$arg\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/'/\"\n    done\n}\n\n# --- add indentation and trailing slash to quoted args ---\nquote_indent() {\n    printf ' \\\\\\n'\n    for arg in \"$@\"; do\n        printf '\\t%s \\\\\\n' \"$(quote \"$arg\")\"\n    done\n}\n\n# --- escape most punctuation characters, except quotes, forward slash, and space ---\nescape() {\n    printf '%s' \"$@\" | sed -e 's/\\([][!#$%\u0026()*;\u003c=\u003e?\\_`{|}]\\)/\\\\\\1/g;'\n}\n\n# --- escape double quotes ---\nescape_dq() {\n    printf '%s' \"$@\" | sed -e 's/\"/\\\\\"/g'\n}\n\n# --- ensures $K3S_URL is empty or begins with https://, exiting fatally otherwise ---\nverify_k3s_url() {\n    case \"${K3S_URL}\" in\n        \"\")\n            ;;\n        https://*)\n            ;;\n        *)\n            fatal \"Only https:// URLs are supported for K3S_URL (have ${K3S_URL})\"\n            ;;\n    esac\n}\n\n# --- define needed environment variables ---\nsetup_env() {\n    # --- use command args if passed or create default ---\n    case \"$1\" in\n        # --- if we only have flags discover if command should be server or agent ---\n        (-*|\"\")\n            if [ -z \"${K3S_URL}\" ]; then\n                CMD_K3S=server\n            else\n                if [ -z \"${K3S_TOKEN}\" ] \u0026\u0026 [ -z \"${K3S_TOKEN_FILE}\" ]; then\n                    fatal \"Defaulted k3s exec command to 'agent' because K3S_URL is defined, but K3S_TOKEN or K3S_TOKEN_FILE is not defined.\"\n                fi\n                CMD_K3S=agent\n            fi\n        ;;\n        # --- command is provided ---\n        (*)\n            CMD_K3S=$1\n            shift\n        ;;\n    esac\n\n    verify_k3s_url\n\n    CMD_K3S_EXEC=\"${CMD_K3S}$(quote_indent \"$@\")\"\n\n    # --- use systemd name if defined or create default ---\n    if [ -n \"${INSTALL_K3S_NAME}\" ]; then\n        SYSTEM_NAME=k3s-${INSTALL_K3S_NAME}\n    else\n        if [ \"${CMD_K3S}\" = server ]; then\n            SYSTEM_NAME=k3s\n        else\n            SYSTEM_NAME=k3s-${CMD_K3S}\n        fi\n    fi\n\n    # --- check for invalid characters in system name ---\n    valid_chars=$(printf '%s' \"${SYSTEM_NAME}\" | sed -e 's/[][!#$%\u0026()*;\u003c=\u003e?\\_`{|}/[:space:]]/^/g;' )\n    if [ \"${SYSTEM_NAME}\" != \"${valid_chars}\"  ]; then\n        invalid_chars=$(printf '%s' \"${valid_chars}\" | sed -e 's/[^^]/ /g')\n        fatal \"Invalid characters for system name:\n            ${SYSTEM_NAME}\n            ${invalid_chars}\"\n    fi\n\n    # --- use sudo if we are not already root ---\n    SUDO=sudo\n    if [ $(id -u) -eq 0 ]; then\n        SUDO=\n    fi\n\n    # --- use systemd type if defined or create default ---\n    if [ -n \"${INSTALL_K3S_TYPE}\" ]; then\n        SYSTEMD_TYPE=${INSTALL_K3S_TYPE}\n    else\n        SYSTEMD_TYPE=notify\n    fi\n\n    # --- use binary install directory if defined or create default ---\n    if [ -n \"${INSTALL_K3S_BIN_DIR}\" ]; then\n        BIN_DIR=${INSTALL_K3S_BIN_DIR}\n    else\n        # --- use /usr/local/bin if root can write to it, otherwise use /opt/bin if it exists\n        BIN_DIR=/usr/local/bin\n        if ! $SUDO sh -c \"touch ${BIN_DIR}/k3s-ro-test \u0026\u0026 rm -rf ${BIN_DIR}/k3s-ro-test\"; then\n            if [ -d /opt/bin ]; then\n                BIN_DIR=/opt/bin\n            fi\n        fi\n    fi\n\n    # --- use systemd directory if defined or create default ---\n    if [ -n \"${INSTALL_K3S_SYSTEMD_DIR}\" ]; then\n        SYSTEMD_DIR=\"${INSTALL_K3S_SYSTEMD_DIR}\"\n    else\n        SYSTEMD_DIR=/etc/systemd/system\n    fi\n\n    # --- set related files from system name ---\n    SERVICE_K3S=${SYSTEM_NAME}.service\n    UNINSTALL_K3S_SH=${UNINSTALL_K3S_SH:-${BIN_DIR}/${SYSTEM_NAME}-uninstall.sh}\n    KILLALL_K3S_SH=${KILLALL_K3S_SH:-${BIN_DIR}/k3s-killall.sh}\n\n    # --- use service or environment location depending on systemd/openrc ---\n    if [ \"${HAS_SYSTEMD}\" = true ]; then\n        FILE_K3S_SERVICE=${SYSTEMD_DIR}/${SERVICE_K3S}\n        FILE_K3S_ENV=${SYSTEMD_DIR}/${SERVICE_K3S}.env\n    elif [ \"${HAS_OPENRC}\" = true ]; then\n        $SUDO mkdir -p /etc/rancher/k3s\n        FILE_K3S_SERVICE=/etc/init.d/${SYSTEM_NAME}\n        FILE_K3S_ENV=/etc/rancher/k3s/${SYSTEM_NAME}.env\n    fi\n\n    # --- get hash of config \u0026 exec for currently installed k3s ---\n    PRE_INSTALL_HASHES=$(get_installed_hashes)\n\n    # --- if bin directory is read only skip download ---\n    if [ \"${INSTALL_K3S_BIN_DIR_READ_ONLY}\" = true ]; then\n        INSTALL_K3S_SKIP_DOWNLOAD=true\n    fi\n\n    # --- setup channel values\n    INSTALL_K3S_CHANNEL_URL=${INSTALL_K3S_CHANNEL_URL:-'https://update.k3s.io/v1-release/channels'}\n    INSTALL_K3S_CHANNEL=${INSTALL_K3S_CHANNEL:-'stable'}\n}\n\n# --- check if skip download environment variable set ---\ncan_skip_download_binary() {\n    if [ \"${INSTALL_K3S_SKIP_DOWNLOAD}\" != true ] \u0026\u0026 [ \"${INSTALL_K3S_SKIP_DOWNLOAD}\" != binary ]; then\n        return 1\n    fi\n}\n\ncan_skip_download_selinux() {                                                        \n    if [ \"${INSTALL_K3S_SKIP_DOWNLOAD}\" != true ] \u0026\u0026 [ \"${INSTALL_K3S_SKIP_DOWNLOAD}\" != selinux ]; then \n        return 1                                                                     \n    fi                                                                               \n}  \n\n# --- verify an executable k3s binary is installed ---\nverify_k3s_is_executable() {\n    if [ ! -x ${BIN_DIR}/k3s ]; then\n        fatal \"Executable k3s binary not found at ${BIN_DIR}/k3s\"\n    fi\n}\n\n# --- set arch and suffix, fatal if architecture not supported ---\nsetup_verify_arch() {\n    if [ -z \"$ARCH\" ]; then\n        ARCH=$(uname -m)\n    fi\n    case $ARCH in\n        amd64)\n            ARCH=amd64\n            SUFFIX=\n            ;;\n        x86_64)\n            ARCH=amd64\n            SUFFIX=\n            ;;\n        arm64)\n            ARCH=arm64\n            SUFFIX=-${ARCH}\n            ;;\n        s390x)\n            ARCH=s390x\n            SUFFIX=-${ARCH}\n            ;;\n        aarch64)\n            ARCH=arm64\n            SUFFIX=-${ARCH}\n            ;;\n        arm*)\n            ARCH=arm\n            SUFFIX=-${ARCH}hf\n            ;;\n        *)\n            fatal \"Unsupported architecture $ARCH\"\n    esac\n}\n\n# --- verify existence of network downloader executable ---\nverify_downloader() {\n    # Return failure if it doesn't exist or is no executable\n    [ -x \"$(command -v $1)\" ] || return 1\n\n    # Set verified executable as our downloader program and return success\n    DOWNLOADER=$1\n    return 0\n}\n\n# --- create temporary directory and cleanup when done ---\nsetup_tmp() {\n    TMP_DIR=$(mktemp -d -t k3s-install.XXXXXXXXXX)\n    TMP_HASH=${TMP_DIR}/k3s.hash\n    TMP_ZIP=${TMP_DIR}/k3s.zip\n    TMP_BIN=${TMP_DIR}/k3s.bin\n    cleanup() {\n        code=$?\n        set +e\n        trap - EXIT\n        rm -rf ${TMP_DIR}\n        exit $code\n    }\n    trap cleanup INT EXIT\n}\n\n# --- use desired k3s version if defined or find version from channel ---\nget_release_version() {\n    if [ -n \"${INSTALL_K3S_PR}\" ]; then\n        VERSION_K3S=\"PR ${INSTALL_K3S_PR}\"\n        get_pr_artifact_url\n    elif [ -n \"${INSTALL_K3S_COMMIT}\" ]; then\n        VERSION_K3S=\"commit ${INSTALL_K3S_COMMIT}\"\n    elif [ -n \"${INSTALL_K3S_VERSION}\" ]; then\n        VERSION_K3S=${INSTALL_K3S_VERSION}\n    else\n        info \"Finding release for channel ${INSTALL_K3S_CHANNEL}\"\n        version_url=\"${INSTALL_K3S_CHANNEL_URL}/${INSTALL_K3S_CHANNEL}\"\n        case $DOWNLOADER in\n            curl)\n                VERSION_K3S=$(curl -w '%{url_effective}' -L -s -S ${version_url} -o /dev/null | sed -e 's|.*/||')\n                ;;\n            wget)\n                VERSION_K3S=$(wget -SqO /dev/null ${version_url} 2\u003e\u00261 | grep -i Location | sed -e 's|.*/||')\n                ;;\n            *)\n                fatal \"Incorrect downloader executable '$DOWNLOADER'\"\n                ;;\n        esac\n    fi\n    info \"Using ${VERSION_K3S} as release\"\n}\n\n# --- get k3s-selinux version ---\nget_k3s_selinux_version() {\n    available_version=\"k3s-selinux-1.2-2.${rpm_target}.noarch.rpm\"\n    info \"Finding available k3s-selinux versions\"\n    \n    # run verify_downloader in case it binary installation was skipped\n    verify_downloader curl || verify_downloader wget || fatal 'Can not find curl or wget for downloading files'\n\n    case $DOWNLOADER in\n        curl)\n            DOWNLOADER_OPTS=\"-s\"\n            ;;\n        wget)\n            DOWNLOADER_OPTS=\"-q -O -\"\n            ;;\n        *)\n            fatal \"Incorrect downloader executable '$DOWNLOADER'\"\n            ;;\n    esac\n    for i in {1..3}; do\n        set +e\n        if [ \"${rpm_channel}\" = \"testing\" ]; then\n            version=$(timeout 5 ${DOWNLOADER} ${DOWNLOADER_OPTS} https://api.github.com/repos/k3s-io/k3s-selinux/releases |  grep browser_download_url | awk '{ print $2 }' | grep -oE \"[^\\/]+${rpm_target}\\.noarch\\.rpm\" | head -n 1)\n        else\n            version=$(timeout 5 ${DOWNLOADER} ${DOWNLOADER_OPTS} https://api.github.com/repos/k3s-io/k3s-selinux/releases/latest |  grep browser_download_url | awk '{ print $2 }' | grep -oE \"[^\\/]+${rpm_target}\\.noarch\\.rpm\")\n        fi\n        set -e\n        if [ \"${version}\" != \"\" ]; then\n            break\n        fi\n        sleep 1\n    done\n    if [ \"${version}\" == \"\" ]; then\n        warn \"Failed to get available versions of k3s-selinux..defaulting to ${available_version}\"\n        return\n    fi\n    available_version=${version}\n}\n\n# --- download from github url ---\ndownload() {\n    [ $# -eq 2 ] || fatal 'download needs exactly 2 arguments'\n    set +e\n    case $DOWNLOADER in\n        curl)\n            curl -o $1 -sfL $2\n            ;;\n        wget)\n            wget -qO $1 $2\n            ;;\n        *)\n            fatal \"Incorrect executable '$DOWNLOADER'\"\n            ;;\n    esac\n\n    # Abort if download command failed\n    [ $? -eq 0 ] || fatal 'Download failed'\n    set -e\n}\n\n# --- download hash from github url ---\ndownload_hash() {\n    if [ -n \"${INSTALL_K3S_PR}\" ]; then\n        info \"Downloading hash ${GITHUB_PR_URL}\"\n        curl -s -o ${TMP_ZIP} -H \"Authorization: Bearer $GITHUB_TOKEN\" -L ${GITHUB_PR_URL}\n        unzip -p ${TMP_ZIP} k3s.sha256sum \u003e ${TMP_HASH}\n    else\n        if [ -n \"${INSTALL_K3S_COMMIT}\" ]; then\n            HASH_URL=${STORAGE_URL}/k3s${SUFFIX}-${INSTALL_K3S_COMMIT}.sha256sum\n        else\n            HASH_URL=${GITHUB_URL}/download/${VERSION_K3S}/sha256sum-${ARCH}.txt\n        fi\n        info \"Downloading hash ${HASH_URL}\"\n        download ${TMP_HASH} ${HASH_URL}\n    fi\n    HASH_EXPECTED=$(grep \" k3s${SUFFIX}$\" ${TMP_HASH})\n    HASH_EXPECTED=${HASH_EXPECTED%%[[:blank:]]*}\n}\n\n# --- check hash against installed version ---\ninstalled_hash_matches() {\n    if [ -x ${BIN_DIR}/k3s ]; then\n        HASH_INSTALLED=$(sha256sum ${BIN_DIR}/k3s)\n        HASH_INSTALLED=${HASH_INSTALLED%%[[:blank:]]*}\n        if [ \"${HASH_EXPECTED}\" = \"${HASH_INSTALLED}\" ]; then\n            return\n        fi\n    fi\n    return 1\n}\n\n# Use the GitHub API to identify the artifact associated with a given PR\nget_pr_artifact_url() {\n    github_api_url=https://api.github.com/repos/k3s-io/k3s\n\n    # Check if jq is installed\n    if ! [ -x \"$(command -v jq)\" ]; then\n        fatal \"Installing PR builds requires jq\"\n    fi\n\n    # Check if unzip is installed\n    if ! [ -x \"$(command -v unzip)\" ]; then\n        fatal \"Installing PR builds requires unzip\"\n    fi\n\n    if [ -z \"${GITHUB_TOKEN}\" ]; then\n        fatal \"Installing PR builds requires GITHUB_TOKEN with k3s-io/k3s repo permissions\"\n    fi\n\n    # GET request to the GitHub API to retrieve the latest commit SHA from the pull request\n    set +e\n    commit_id=$(curl -f -s -H \"Authorization: Bearer ${GITHUB_TOKEN}\" \"${github_api_url}/pulls/${INSTALL_K3S_PR}\" | jq -r '.head.sha')\n    set -e\n\n    if [ -z \"${commit_id}\" ]; then\n        fatal \"Installing PR builds requires GITHUB_TOKEN with k3s-io/k3s repo permissions\"\n    fi\n    \n    # GET request to the GitHub API to retrieve the Build workflow associated with the commit\n    wf_raw=$(curl -s -H \"Authorization: Bearer ${GITHUB_TOKEN}\" \"${github_api_url}/commits/${commit_id}/check-runs\")\n    build_workflow=$(printf \"%s\" \"${wf_raw}\" | jq -r '.check_runs[] |  select(.name == \"build / Build\")')\n    \n    # Extract the Run ID from the build workflow and lookup artifacts associated with the run\n    run_id=$(echo \"${build_workflow}\" | jq -r ' .details_url' | awk -F'/' '{print $(NF-2)}' | sort -rn | head -1)\n\n    # Extract the artifact ID for the \"k3s\" artifact    \n    artifacts=$(curl -s -H \"Authorization: Bearer ${GITHUB_TOKEN}\" \"${github_api_url}/actions/runs/${run_id}/artifacts\")\n    artifacts_url=$(echo \"${artifacts}\" | jq -r '.artifacts[] | select(.name == \"k3s\") | .archive_download_url')\n    GITHUB_PR_URL=\"${artifacts_url}\"\n}\n\n# --- download binary from github url ---\ndownload_binary() {\n    if [ -n \"${INSTALL_K3S_PR}\" ]; then\n        # Since Binary and Hash are zipped together, check if TMP_ZIP already exists\n        if ! [ -f ${TMP_ZIP} ]; then\n            info \"Downloading K3s artifact ${GITHUB_PR_URL}\"\n            curl -s -f -o ${TMP_ZIP} -H \"Authorization: Bearer $GITHUB_TOKEN\" -L ${GITHUB_PR_URL}\n        fi\n        # extract k3s binary from zip\n        unzip -p ${TMP_ZIP} k3s \u003e ${TMP_BIN}\n        return\n    elif [ -n \"${INSTALL_K3S_COMMIT}\" ]; then\n        BIN_URL=${STORAGE_URL}/k3s${SUFFIX}-${INSTALL_K3S_COMMIT}\n    else\n        BIN_URL=${GITHUB_URL}/download/${VERSION_K3S}/k3s${SUFFIX}\n    fi\n    info \"Downloading binary ${BIN_URL}\"\n    download ${TMP_BIN} ${BIN_URL}\n}\n\n# --- verify downloaded binary hash ---\nverify_binary() {\n    info \"Verifying binary download\"\n    HASH_BIN=$(sha256sum ${TMP_BIN})\n    HASH_BIN=${HASH_BIN%%[[:blank:]]*}\n    if [ \"${HASH_EXPECTED}\" != \"${HASH_BIN}\" ]; then\n        fatal \"Download sha256 does not match ${HASH_EXPECTED}, got ${HASH_BIN}\"\n    fi\n}\n\n# --- setup permissions and move binary to system directory ---\nsetup_binary() {\n    chmod 755 ${TMP_BIN}\n    info \"Installing k3s to ${BIN_DIR}/k3s\"\n    $SUDO chown root:root ${TMP_BIN}\n    $SUDO mv -f ${TMP_BIN} ${BIN_DIR}/k3s\n}\n\n# --- setup selinux policy ---\nsetup_selinux() {\n    case ${INSTALL_K3S_CHANNEL} in \n        *testing)\n            rpm_channel=testing\n            ;;\n        *latest)\n            rpm_channel=latest\n            ;;\n        *)\n            rpm_channel=stable\n            ;;\n    esac\n\n    rpm_site=\"rpm.rancher.io\"\n    if [ \"${rpm_channel}\" = \"testing\" ]; then\n        rpm_site=\"rpm-testing.rancher.io\"\n    fi\n\n    [ -r /etc/os-release ] \u0026\u0026 . /etc/os-release\n    if [ `expr \"${ID_LIKE}\" : \".*suse.*\"` != 0 ]; then\n        rpm_target=sle\n        rpm_site_infix=microos\n        package_installer=zypper\n        if [ \"${ID_LIKE:-}\" = suse ] \u0026\u0026 ( [ \"${VARIANT_ID:-}\" = sle-micro ] || [ \"${ID:-}\" = sle-micro ] ); then\n            rpm_target=sle\n            rpm_site_infix=slemicro\n            package_installer=zypper\n        fi\n    elif [ \"${ID_LIKE:-}\" = coreos ] || [ \"${VARIANT_ID:-}\" = coreos ] || [ \"${VARIANT_ID:-}\" = \"iot\" ]; then\n        rpm_target=coreos\n        rpm_site_infix=coreos\n        package_installer=rpm-ostree\n    elif [ \"${VERSION_ID%%.*}\" = \"7\" ] || ( [ \"${ID:-}\" = amzn ] \u0026\u0026 [ \"${VERSION_ID%%.*}\" = \"2\" ] ); then\n        rpm_target=el7\n        rpm_site_infix=centos/7\n        package_installer=yum\n    elif [ \"${VERSION_ID%%.*}\" = \"8\" ] || [ \"${VERSION_ID%%.*}\" = \"V10\" ] || [ \"${VERSION_ID%%.*}\" -gt \"36\" ]; then\n        rpm_target=el8\n        rpm_site_infix=centos/8\n        package_installer=yum\n    else\n        rpm_target=el9\n        rpm_site_infix=centos/9\n        package_installer=yum\n    fi\n\n    if [ \"${package_installer}\" = \"rpm-ostree\" ] \u0026\u0026 [ -x /bin/yum ]; then\n        package_installer=yum\n    fi\n\n    if [ \"${package_installer}\" = \"yum\" ] \u0026\u0026 [ -x /usr/bin/dnf ]; then\n        package_installer=dnf\n    fi\n\n    policy_hint=\"please install:\n    ${package_installer} install -y container-selinux\n    ${package_installer} install -y https://${rpm_site}/k3s/${rpm_channel}/common/${rpm_site_infix}/noarch/${available_version}\n\"\n\n    if [ \"$INSTALL_K3S_SKIP_SELINUX_RPM\" = true ] || can_skip_download_selinux || [ ! -d /usr/share/selinux ]; then\n        info \"Skipping installation of SELinux RPM\"\n        return\n    fi\n    \n    get_k3s_selinux_version\n    install_selinux_rpm ${rpm_site} ${rpm_channel} ${rpm_target} ${rpm_site_infix}\n\n    policy_error=fatal\n    if [ \"$INSTALL_K3S_SELINUX_WARN\" = true ] || [ \"${ID_LIKE:-}\" = coreos ] || \n       [ \"${VARIANT_ID:-}\" = coreos ] || [ \"${VARIANT_ID:-}\" = iot ]; then\n        policy_error=warn\n    fi\n\n    if ! $SUDO chcon -u system_u -r object_r -t container_runtime_exec_t ${BIN_DIR}/k3s \u003e/dev/null 2\u003e\u00261; then\n        if $SUDO grep '^\\s*SELINUX=enforcing' /etc/selinux/config \u003e/dev/null 2\u003e\u00261; then\n            $policy_error \"Failed to apply container_runtime_exec_t to ${BIN_DIR}/k3s, ${policy_hint}\"\n        fi\n    elif [ ! -f /usr/share/selinux/packages/k3s.pp ]; then\n        if [ -x /usr/sbin/transactional-update ] || [ \"${ID_LIKE:-}\" = coreos ] || [ \"${VARIANT_ID:-}\" = coreos ] || [ \"${VARIANT_ID:-}\" = iot ]; then\n            warn \"Please reboot your machine to activate the changes and avoid data loss.\"\n        else\n            $policy_error \"Failed to find the k3s-selinux policy, ${policy_hint}\"\n        fi\n    fi\n}\n\ninstall_selinux_rpm() {\n    if [ -r /etc/redhat-release ] || [ -r /etc/centos-release ] || [ -r /etc/oracle-release ] || \n       [ -r /etc/fedora-release ] || [ -r /etc/system-release ] || [ \"${ID_LIKE%%[ ]*}\" = \"suse\" ]; then\n        repodir=/etc/yum.repos.d\n        if [ -d /etc/zypp/repos.d ]; then\n            repodir=/etc/zypp/repos.d\n        fi\n        set +o noglob\n        $SUDO rm -f ${repodir}/rancher-k3s-common*.repo\n        set -o noglob\n        if [ -r /etc/redhat-release ] \u0026\u0026 [ \"${3}\" = \"el7\" ]; then\n            $SUDO yum install -y yum-utils\n            $SUDO yum-config-manager --enable rhel-7-server-extras-rpms\n        fi\n        $SUDO tee ${repodir}/rancher-k3s-common.repo \u003e/dev/null \u003c\u003c EOF\n[rancher-k3s-common-${2}]\nname=Rancher K3s Common (${2})\nbaseurl=https://${1}/k3s/${2}/common/${4}/noarch\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=0\ngpgkey=https://${1}/public.key\nEOF\n        case ${3} in\n        sle)\n            rpm_installer=\"zypper --gpg-auto-import-keys\"\n            if [ \"${TRANSACTIONAL_UPDATE=false}\" != \"true\" ] \u0026\u0026 [ -x /usr/sbin/transactional-update ]; then\n                transactional_update_run=\"transactional-update --no-selfupdate -d run\"\n                rpm_installer=\"transactional-update --no-selfupdate -d run ${rpm_installer}\"\n                : \"${INSTALL_K3S_SKIP_START:=true}\"\n            fi\n            # create the /var/lib/rpm-state in SLE systems to fix the prein selinux macro\n            $SUDO ${transactional_update_run} mkdir -p /var/lib/rpm-state\n            ;;\n        coreos)\n            rpm_installer=\"rpm-ostree --idempotent\"\n            # rpm_install_extra_args=\"--apply-live\"\n            : \"${INSTALL_K3S_SKIP_START:=true}\"\n            ;;\n        *)\n            rpm_installer=\"yum\"\n            ;;\n        esac\n        if [ \"${rpm_installer}\" = \"yum\" ] \u0026\u0026 [ -x /usr/bin/dnf ]; then\n            rpm_installer=dnf\n        fi\n\t    if rpm -q --quiet k3s-selinux; then \n            # remove k3s-selinux module before upgrade to allow container-selinux to upgrade safely\n            if check_available_upgrades container-selinux ${3} \u0026\u0026 check_available_upgrades k3s-selinux ${3}; then\n                MODULE_PRIORITY=$($SUDO semodule --list=full | grep k3s | cut -f1 -d\" \")\n                if [ -n \"${MODULE_PRIORITY}\" ]; then\n                    $SUDO semodule -X $MODULE_PRIORITY -r k3s || true\n                fi\n            fi\n        fi\n        # shellcheck disable=SC2086\n        $SUDO ${rpm_installer} install -y \"k3s-selinux\"\n    fi\n    return\n}\n\ncheck_available_upgrades() {\n    set +e\n    case ${2} in\n        sle)\n            available_upgrades=$($SUDO zypper -q -t -s 11 se -s -u --type package $1 | tail -n 1 | grep -v \"No matching\" | awk '{print $3}')\n            ;;\n        coreos)\n            # currently rpm-ostree does not support search functionality https://github.com/coreos/rpm-ostree/issues/1877\n            ;;\n        *)\n            available_upgrades=$($SUDO yum -q --refresh list $1 --upgrades | tail -n 1 | awk '{print $2}')\n            ;;\n    esac\n    set -e\n    if [ -n \"${available_upgrades}\" ]; then\n        return 0\n    fi\n    return 1\n}\n# --- download and verify k3s ---\ndownload_and_verify() {\n    if can_skip_download_binary; then\n       info 'Skipping k3s download and verify'\n       verify_k3s_is_executable\n       return\n    fi\n\n    setup_verify_arch\n    verify_downloader curl || verify_downloader wget || fatal 'Can not find curl or wget for downloading files'\n    setup_tmp\n    get_release_version\n    download_hash\n\n    if installed_hash_matches; then\n        info 'Skipping binary downloaded, installed k3s matches hash'\n        return\n    fi\n\n    download_binary\n    verify_binary\n    setup_binary\n}\n\n# --- add additional utility links ---\ncreate_symlinks() {\n    [ \"${INSTALL_K3S_BIN_DIR_READ_ONLY}\" = true ] \u0026\u0026 return\n    [ \"${INSTALL_K3S_SYMLINK}\" = skip ] \u0026\u0026 return\n\n    for cmd in kubectl crictl ctr; do\n        if [ ! -e ${BIN_DIR}/${cmd} ] || [ \"${INSTALL_K3S_SYMLINK}\" = force ]; then\n            which_cmd=$(command -v ${cmd} 2\u003e/dev/null || true)\n            if [ -z \"${which_cmd}\" ] || [ \"${INSTALL_K3S_SYMLINK}\" = force ]; then\n                info \"Creating ${BIN_DIR}/${cmd} symlink to k3s\"\n                $SUDO ln -sf k3s ${BIN_DIR}/${cmd}\n            else\n                info \"Skipping ${BIN_DIR}/${cmd} symlink to k3s, command exists in PATH at ${which_cmd}\"\n            fi\n        else\n            info \"Skipping ${BIN_DIR}/${cmd} symlink to k3s, already exists\"\n        fi\n    done\n}\n\n# --- create killall script ---\ncreate_killall() {\n    [ \"${INSTALL_K3S_BIN_DIR_READ_ONLY}\" = true ] \u0026\u0026 return\n    info \"Creating killall script ${KILLALL_K3S_SH}\"\n    $SUDO tee ${KILLALL_K3S_SH} \u003e/dev/null \u003c\u003c \\EOF\n#!/bin/sh\n[ $(id -u) -eq 0 ] || exec sudo $0 $@\n\nK3S_DATA_DIR=${K3S_DATA_DIR:-/var/lib/rancher/k3s}\n\nfor bin in ${K3S_DATA_DIR}/data/**/bin/; do\n    [ -d $bin ] \u0026\u0026 export PATH=$PATH:$bin:$bin/aux\ndone\n\nset -x\n\nfor service in /etc/systemd/system/k3s*.service; do\n    [ -s $service ] \u0026\u0026 systemctl stop $(basename $service)\ndone\n\nfor service in /etc/init.d/k3s*; do\n    [ -x $service ] \u0026\u0026 $service stop\ndone\n\npschildren() {\n    ps -e -o ppid= -o pid= | \\\n    sed -e 's/^\\s*//g; s/\\s\\s*/\\t/g;' | \\\n    grep -w \"^$1\" | \\\n    cut -f2\n}\n\npstree() {\n    for pid in $@; do\n        echo $pid\n        for child in $(pschildren $pid); do\n            pstree $child\n        done\n    done\n}\n\nkilltree() {\n    kill -9 $(\n        { set +x; } 2\u003e/dev/null;\n        pstree $@;\n        set -x;\n    ) 2\u003e/dev/null\n}\n\nremove_interfaces() {\n    # Delete network interface(s) that match 'master cni0'\n    ip link show 2\u003e/dev/null | grep 'master cni0' | while read ignore iface ignore; do\n        iface=${iface%%@*}\n        [ -z \"$iface\" ] || ip link delete $iface\n    done\n\n    # Delete cni related interfaces\n    ip link delete cni0\n    ip link delete flannel.1\n    ip link delete flannel-v6.1\n    ip link delete kube-ipvs0\n    ip link delete flannel-wg\n    ip link delete flannel-wg-v6\n\n    # Restart tailscale\n    if [ -n \"$(command -v tailscale)\" ]; then\n        tailscale set --advertise-routes=\n    fi\n}\n\ngetshims() {\n    ps -e -o pid= -o args= | sed -e 's/^ *//; s/\\s\\s*/\\t/;' | grep -w \"${K3S_DATA_DIR}\"'/data/[^/]*/bin/containerd-shim' | cut -f1\n}\n\nkilltree $({ set +x; } 2\u003e/dev/null; getshims; set -x)\n\ndo_unmount_and_remove() {\n    set +x\n    while read -r _ path _; do\n        case \"$path\" in $1*) echo \"$path\" ;; esac\n    done \u003c /proc/self/mounts | sort -r | xargs -r -t -n 1 sh -c 'umount -f \"$0\" \u0026\u0026 rm -rf \"$0\"'\n    set -x\n}\n\ndo_unmount_and_remove '/run/k3s'\ndo_unmount_and_remove '/var/lib/kubelet/pods'\ndo_unmount_and_remove '/var/lib/kubelet/plugins'\ndo_unmount_and_remove '/run/netns/cni-'\n\n# Remove CNI namespaces\nip netns show 2\u003e/dev/null | grep cni- | xargs -r -t -n 1 ip netns delete\n\nremove_interfaces\n\nrm -rf /var/lib/cni/\niptables-save | grep -v KUBE- | grep -v CNI- | grep -iv flannel | iptables-restore\nip6tables-save | grep -v KUBE- | grep -v CNI- | grep -iv flannel | ip6tables-restore\nEOF\n    $SUDO chmod 755 ${KILLALL_K3S_SH}\n    $SUDO chown root:root ${KILLALL_K3S_SH}\n}\n\n# --- create uninstall script ---\ncreate_uninstall() {\n    [ \"${INSTALL_K3S_BIN_DIR_READ_ONLY}\" = true ] \u0026\u0026 return\n    info \"Creating uninstall script ${UNINSTALL_K3S_SH}\"\n    $SUDO tee ${UNINSTALL_K3S_SH} \u003e/dev/null \u003c\u003c EOF\n#!/bin/sh\nset -x\n[ \\$(id -u) -eq 0 ] || exec sudo \\$0 \\$@\n\nK3S_DATA_DIR=\\${K3S_DATA_DIR:-/var/lib/rancher/k3s}\n\n${KILLALL_K3S_SH}\n\nif command -v systemctl; then\n    systemctl disable ${SYSTEM_NAME}\n    systemctl reset-failed ${SYSTEM_NAME}\n    systemctl daemon-reload\nfi\nif command -v rc-update; then\n    rc-update delete ${SYSTEM_NAME} default\nfi\n\nrm -f ${FILE_K3S_SERVICE}\nrm -f ${FILE_K3S_ENV}\n\nremove_uninstall() {\n    rm -f ${UNINSTALL_K3S_SH}\n}\ntrap remove_uninstall EXIT\n\nif (ls ${SYSTEMD_DIR}/k3s*.service || ls /etc/init.d/k3s*) \u003e/dev/null 2\u003e\u00261; then\n    set +x; echo 'Additional k3s services installed, skipping uninstall of k3s'; set -x\n    exit\nfi\n\nfor cmd in kubectl crictl ctr; do\n    if [ -L ${BIN_DIR}/\\$cmd ]; then\n        rm -f ${BIN_DIR}/\\$cmd\n    fi\ndone\n\nclean_mounted_directory() {\n    if ! grep -q \" \\$1\" /proc/mounts; then\n        rm -rf \"\\$1\"\n\treturn 0\n    fi\n\n    for path in \"\\$1\"/*; do\n        if [ -d \"\\$path\" ]; then\n            if grep -q \" \\$path\" /proc/mounts; then\n                clean_mounted_directory \"\\$path\"\n            else\n                rm -rf \"\\$path\"\n            fi\n        else\n            rm \"\\$path\"\n        fi\n     done\n}\n\nrm -rf /etc/rancher/k3s\nrm -rf /run/k3s\nrm -rf /run/flannel\nclean_mounted_directory \\${K3S_DATA_DIR}\nrm -rf /var/lib/kubelet\nrm -f ${BIN_DIR}/k3s\nrm -f ${KILLALL_K3S_SH}\n\nif type yum \u003e/dev/null 2\u003e\u00261; then\n    yum remove -y k3s-selinux\n    rm -f /etc/yum.repos.d/rancher-k3s-common*.repo\nelif type rpm-ostree \u003e/dev/null 2\u003e\u00261; then\n    rpm-ostree uninstall k3s-selinux\n    rm -f /etc/yum.repos.d/rancher-k3s-common*.repo\nelif type zypper \u003e/dev/null 2\u003e\u00261; then\n    uninstall_cmd=\"zypper remove -y k3s-selinux\"\n    if [ \"\\${TRANSACTIONAL_UPDATE=false}\" != \"true\" ] \u0026\u0026 [ -x /usr/sbin/transactional-update ]; then\n        uninstall_cmd=\"transactional-update --no-selfupdate -d run \\$uninstall_cmd\"\n    fi\n    $SUDO \\$uninstall_cmd\n    rm -f /etc/zypp/repos.d/rancher-k3s-common*.repo\nfi\nEOF\n    $SUDO chmod 755 ${UNINSTALL_K3S_SH}\n    $SUDO chown root:root ${UNINSTALL_K3S_SH}\n}\n\n# --- disable current service if loaded --\nsystemd_disable() {\n    $SUDO systemctl disable ${SYSTEM_NAME} \u003e/dev/null 2\u003e\u00261 || true\n    $SUDO rm -f /etc/systemd/system/${SERVICE_K3S} || true\n    $SUDO rm -f /etc/systemd/system/${SERVICE_K3S}.env || true\n}\n\n# --- capture current env and create file containing k3s_ variables ---\ncreate_env_file() {\n    info \"env: Creating environment file ${FILE_K3S_ENV}\"\n    $SUDO touch ${FILE_K3S_ENV}\n    $SUDO chmod 0600 ${FILE_K3S_ENV}\n    sh -c export | while read x v; do echo $v; done | grep -E '^(K3S|CONTAINERD)_' | $SUDO tee ${FILE_K3S_ENV} \u003e/dev/null\n    sh -c export | while read x v; do echo $v; done | grep -Ei '^(NO|HTTP|HTTPS)_PROXY' | $SUDO tee -a ${FILE_K3S_ENV} \u003e/dev/null\n}\n\n# --- write systemd service file ---\ncreate_systemd_service_file() {\n    info \"systemd: Creating service file ${FILE_K3S_SERVICE}\"\n    $SUDO tee ${FILE_K3S_SERVICE} \u003e/dev/null \u003c\u003c EOF\n[Unit]\nDescription=Lightweight Kubernetes\nDocumentation=https://k3s.io\nWants=network-online.target\nAfter=network-online.target\n\n[Install]\nWantedBy=multi-user.target\n\n[Service]\nType=${SYSTEMD_TYPE}\nEnvironmentFile=-/etc/default/%N\nEnvironmentFile=-/etc/sysconfig/%N\nEnvironmentFile=-${FILE_K3S_ENV}\nKillMode=process\nDelegate=yes\n# Having non-zero Limit*s causes performance problems due to accounting overhead\n# in the kernel. We recommend using cgroups to do container-local accounting.\nLimitNOFILE=1048576\nLimitNPROC=infinity\nLimitCORE=infinity\nTasksMax=infinity\nTimeoutStartSec=0\nRestart=always\nRestartSec=5s\nExecStartPre=/bin/sh -xc '! /usr/bin/systemctl is-enabled --quiet nm-cloud-setup.service 2\u003e/dev/null'\nExecStartPre=-/sbin/modprobe br_netfilter\nExecStartPre=-/sbin/modprobe overlay\nExecStart=${BIN_DIR}/k3s \\\\\n    ${CMD_K3S_EXEC}\n\nEOF\n}\n\n# --- write openrc service file ---\ncreate_openrc_service_file() {\n    LOG_FILE=/var/log/${SYSTEM_NAME}.log\n\n    info \"openrc: Creating service file ${FILE_K3S_SERVICE}\"\n    $SUDO tee ${FILE_K3S_SERVICE} \u003e/dev/null \u003c\u003c EOF\n#!/sbin/openrc-run\n\ndepend() {\n    after network-online\n    want cgroups\n}\n\nstart_pre() {\n    rm -f /tmp/k3s.*\n}\n\nsupervisor=supervise-daemon\nname=${SYSTEM_NAME}\ncommand=\"${BIN_DIR}/k3s\"\ncommand_args=\"$(escape_dq \"${CMD_K3S_EXEC}\")\n    \u003e\u003e${LOG_FILE} 2\u003e\u00261\"\n\noutput_log=${LOG_FILE}\nerror_log=${LOG_FILE}\n\npidfile=\"/var/run/${SYSTEM_NAME}.pid\"\nrespawn_delay=5\nrespawn_max=0\n\nset -o allexport\nif [ -f /etc/environment ]; then . /etc/environment; fi\nif [ -f ${FILE_K3S_ENV} ]; then . ${FILE_K3S_ENV}; fi\nset +o allexport\nEOF\n    $SUDO chmod 0755 ${FILE_K3S_SERVICE}\n\n    $SUDO tee /etc/logrotate.d/${SYSTEM_NAME} \u003e/dev/null \u003c\u003c EOF\n${LOG_FILE} {\n\tmissingok\n\tnotifempty\n\tcopytruncate\n}\nEOF\n}\n\n# --- write systemd or openrc service file ---\ncreate_service_file() {\n    [ \"${HAS_SYSTEMD}\" = true ] \u0026\u0026 create_systemd_service_file \u0026\u0026 restore_systemd_service_file_context\n    [ \"${HAS_OPENRC}\" = true ] \u0026\u0026 create_openrc_service_file\n    return 0\n}\n\nrestore_systemd_service_file_context() {\n    $SUDO restorecon -R -i ${FILE_K3S_SERVICE} 2\u003e/dev/null || true\n    $SUDO restorecon -R -i ${FILE_K3S_ENV} 2\u003e/dev/null || true\n}\n\n# --- get hashes of the current k3s bin and service files\nget_installed_hashes() {\n    $SUDO sha256sum ${BIN_DIR}/k3s ${FILE_K3S_SERVICE} ${FILE_K3S_ENV} 2\u003e\u00261 || true\n}\n\n# --- enable and start systemd service ---\nsystemd_enable() {\n    info \"systemd: Enabling ${SYSTEM_NAME} unit\"\n    $SUDO systemctl enable ${FILE_K3S_SERVICE} \u003e/dev/null\n    $SUDO systemctl daemon-reload \u003e/dev/null\n}\n\nsystemd_start() {\n    info \"systemd: Starting ${SYSTEM_NAME}\"\n    $SUDO systemctl restart ${SYSTEM_NAME}\n}\n\n# --- enable and start openrc service ---\nopenrc_enable() {\n    info \"openrc: Enabling ${SYSTEM_NAME} service for default runlevel\"\n    $SUDO rc-update add ${SYSTEM_NAME} default \u003e/dev/null\n}\n\nopenrc_start() {\n    info \"openrc: Starting ${SYSTEM_NAME}\"\n    $SUDO ${FILE_K3S_SERVICE} restart\n}\n\nhas_working_xtables() {\n    if $SUDO sh -c \"command -v \\\"$1-save\\\"\" 1\u003e /dev/null \u0026\u0026 $SUDO sh -c \"command -v \\\"$1-restore\\\"\" 1\u003e /dev/null; then\n        if $SUDO $1-save 2\u003e/dev/null | grep -q '^-A CNI-HOSTPORT-MASQ -j MASQUERADE$'; then\n            warn \"Host $1-save/$1-restore tools are incompatible with existing rules\"\n        else\n            return 0\n        fi\n    else\n        info \"Host $1-save/$1-restore tools not found\"\n    fi\n    return 1\n}\n\n# --- startup systemd or openrc service ---\nservice_enable_and_start() {\n    if [ -f \"/proc/cgroups\" ] \u0026\u0026 [ \"$(grep memory /proc/cgroups | while read -r n n n enabled; do echo $enabled; done)\" -eq 0 ];\n    then\n        info 'Failed to find memory cgroup, you may need to add \"cgroup_memory=1 cgroup_enable=memory\" to your linux cmdline (/boot/cmdline.txt on a Raspberry Pi)'\n    fi\n\n    [ \"${INSTALL_K3S_SKIP_ENABLE}\" = true ] \u0026\u0026 return\n\n    [ \"${HAS_SYSTEMD}\" = true ] \u0026\u0026 systemd_enable\n    [ \"${HAS_OPENRC}\" = true ] \u0026\u0026 openrc_enable\n\n    [ \"${INSTALL_K3S_SKIP_START}\" = true ] \u0026\u0026 return\n\n    POST_INSTALL_HASHES=$(get_installed_hashes)\n    if [ \"${PRE_INSTALL_HASHES}\" = \"${POST_INSTALL_HASHES}\" ] \u0026\u0026 [ \"${INSTALL_K3S_FORCE_RESTART}\" != true ]; then\n        info 'No change detected so skipping service start'\n        return\n    fi\n\n    for XTABLES in iptables ip6tables; do\n        if has_working_xtables ${XTABLES}; then\n            $SUDO ${XTABLES}-save 2\u003e/dev/null | grep -v KUBE- | grep -iv flannel | $SUDO ${XTABLES}-restore\n        fi\n    done\n\n    [ \"${HAS_SYSTEMD}\" = true ] \u0026\u0026 systemd_start\n    [ \"${HAS_OPENRC}\" = true ] \u0026\u0026 openrc_start\n    return 0\n}\n\n# --- re-evaluate args to include env command ---\neval set -- $(escape \"${INSTALL_K3S_EXEC}\") $(quote \"$@\")\n\n# --- run the install process --\n{\n    verify_system\n    setup_env \"$@\"\n    download_and_verify\n    setup_selinux\n    create_symlinks\n    create_killall\n    create_uninstall\n    systemd_disable\n    create_env_file\n    create_service_file\n    service_enable_and_start\n}\n\n",
            "ca_cert_pem": null,
            "id": "https://raw.githubusercontent.com/rancher/k3s/v1.31.2+k3s1/install.sh",
            "insecure": null,
            "method": null,
            "request_body": null,
            "request_headers": null,
            "request_timeout_ms": null,
            "response_body": "#!/bin/sh\nset -e\nset -o noglob\n\n# Usage:\n#   curl ... | ENV_VAR=... sh -\n#       or\n#   ENV_VAR=... ./install.sh\n#\n# Example:\n#   Installing a server without traefik:\n#     curl ... | INSTALL_K3S_EXEC=\"--disable=traefik\" sh -\n#   Installing an agent to point at a server:\n#     curl ... | K3S_TOKEN=xxx K3S_URL=https://server-url:6443 sh -\n#\n# Environment variables:\n#   - K3S_*\n#     Environment variables which begin with K3S_ will be preserved for the\n#     systemd service to use. Setting K3S_URL without explicitly setting\n#     a systemd exec command will default the command to \"agent\", and we\n#     enforce that K3S_TOKEN is also set.\n#\n#   - INSTALL_K3S_SKIP_DOWNLOAD\n#     If set to true will not download k3s hash or binary.\n#\n#   - INSTALL_K3S_FORCE_RESTART\n#     If set to true will always restart the K3s service\n#\n#   - INSTALL_K3S_SYMLINK\n#     If set to 'skip' will not create symlinks, 'force' will overwrite,\n#     default will symlink if command does not exist in path.\n#\n#   - INSTALL_K3S_SKIP_ENABLE\n#     If set to true will not enable or start k3s service.\n#\n#   - INSTALL_K3S_SKIP_START\n#     If set to true will not start k3s service.\n#\n#   - INSTALL_K3S_VERSION\n#     Version of k3s to download from github. Will attempt to download from the\n#     stable channel if not specified.\n#\n#   - INSTALL_K3S_COMMIT\n#     Commit of k3s to download from temporary cloud storage.\n#     * (for developer \u0026 QA use)\n#\n#   - INSTALL_K3S_PR\n#     PR build of k3s to download from Github Artifacts.\n#     * (for developer \u0026 QA use)\n#\n#   - INSTALL_K3S_BIN_DIR\n#     Directory to install k3s binary, links, and uninstall script to, or use\n#     /usr/local/bin as the default\n#\n#   - INSTALL_K3S_BIN_DIR_READ_ONLY\n#     If set to true will not write files to INSTALL_K3S_BIN_DIR, forces\n#     setting INSTALL_K3S_SKIP_DOWNLOAD=true\n#\n#   - INSTALL_K3S_SYSTEMD_DIR\n#     Directory to install systemd service and environment files to, or use\n#     /etc/systemd/system as the default\n#\n#   - INSTALL_K3S_EXEC or script arguments\n#     Command with flags to use for launching k3s in the systemd service, if\n#     the command is not specified will default to \"agent\" if K3S_URL is set\n#     or \"server\" if not. The final systemd command resolves to a combination\n#     of EXEC and script args ($@).\n#\n#     The following commands result in the same behavior:\n#       curl ... | INSTALL_K3S_EXEC=\"--disable=traefik\" sh -s -\n#       curl ... | INSTALL_K3S_EXEC=\"server --disable=traefik\" sh -s -\n#       curl ... | INSTALL_K3S_EXEC=\"server\" sh -s - --disable=traefik\n#       curl ... | sh -s - server --disable=traefik\n#       curl ... | sh -s - --disable=traefik\n#\n#   - INSTALL_K3S_NAME\n#     Name of systemd service to create, will default from the k3s exec command\n#     if not specified. If specified the name will be prefixed with 'k3s-'.\n#\n#   - INSTALL_K3S_TYPE\n#     Type of systemd service to create, will default from the k3s exec command\n#     if not specified.\n#\n#   - INSTALL_K3S_SELINUX_WARN\n#     If set to true will continue if k3s-selinux policy is not found.\n#\n#   - INSTALL_K3S_SKIP_SELINUX_RPM\n#     If set to true will skip automatic installation of the k3s RPM.\n#\n#   - INSTALL_K3S_CHANNEL_URL\n#     Channel URL for fetching k3s download URL.\n#     Defaults to 'https://update.k3s.io/v1-release/channels'.\n#\n#   - INSTALL_K3S_CHANNEL\n#     Channel to use for fetching k3s download URL.\n#     Defaults to 'stable'.\n\nGITHUB_URL=https://github.com/k3s-io/k3s/releases\nGITHUB_PR_URL=\"\"\nSTORAGE_URL=https://k3s-ci-builds.s3.amazonaws.com\nDOWNLOADER=\n\n# --- helper functions for logs ---\ninfo()\n{\n    echo '[INFO] ' \"$@\"\n}\nwarn()\n{\n    echo '[WARN] ' \"$@\" \u003e\u00262\n}\nfatal()\n{\n    echo '[ERROR] ' \"$@\" \u003e\u00262\n    exit 1\n}\n\n# --- fatal if no systemd or openrc ---\nverify_system() {\n    if [ -x /sbin/openrc-run ]; then\n        HAS_OPENRC=true\n        return\n    fi\n    if [ -x /bin/systemctl ] || type systemctl \u003e /dev/null 2\u003e\u00261; then\n        HAS_SYSTEMD=true\n        return\n    fi\n    fatal 'Can not find systemd or openrc to use as a process supervisor for k3s'\n}\n\n# --- add quotes to command arguments ---\nquote() {\n    for arg in \"$@\"; do\n        printf '%s\\n' \"$arg\" | sed \"s/'/'\\\\\\\\''/g;1s/^/'/;\\$s/\\$/'/\"\n    done\n}\n\n# --- add indentation and trailing slash to quoted args ---\nquote_indent() {\n    printf ' \\\\\\n'\n    for arg in \"$@\"; do\n        printf '\\t%s \\\\\\n' \"$(quote \"$arg\")\"\n    done\n}\n\n# --- escape most punctuation characters, except quotes, forward slash, and space ---\nescape() {\n    printf '%s' \"$@\" | sed -e 's/\\([][!#$%\u0026()*;\u003c=\u003e?\\_`{|}]\\)/\\\\\\1/g;'\n}\n\n# --- escape double quotes ---\nescape_dq() {\n    printf '%s' \"$@\" | sed -e 's/\"/\\\\\"/g'\n}\n\n# --- ensures $K3S_URL is empty or begins with https://, exiting fatally otherwise ---\nverify_k3s_url() {\n    case \"${K3S_URL}\" in\n        \"\")\n            ;;\n        https://*)\n            ;;\n        *)\n            fatal \"Only https:// URLs are supported for K3S_URL (have ${K3S_URL})\"\n            ;;\n    esac\n}\n\n# --- define needed environment variables ---\nsetup_env() {\n    # --- use command args if passed or create default ---\n    case \"$1\" in\n        # --- if we only have flags discover if command should be server or agent ---\n        (-*|\"\")\n            if [ -z \"${K3S_URL}\" ]; then\n                CMD_K3S=server\n            else\n                if [ -z \"${K3S_TOKEN}\" ] \u0026\u0026 [ -z \"${K3S_TOKEN_FILE}\" ]; then\n                    fatal \"Defaulted k3s exec command to 'agent' because K3S_URL is defined, but K3S_TOKEN or K3S_TOKEN_FILE is not defined.\"\n                fi\n                CMD_K3S=agent\n            fi\n        ;;\n        # --- command is provided ---\n        (*)\n            CMD_K3S=$1\n            shift\n        ;;\n    esac\n\n    verify_k3s_url\n\n    CMD_K3S_EXEC=\"${CMD_K3S}$(quote_indent \"$@\")\"\n\n    # --- use systemd name if defined or create default ---\n    if [ -n \"${INSTALL_K3S_NAME}\" ]; then\n        SYSTEM_NAME=k3s-${INSTALL_K3S_NAME}\n    else\n        if [ \"${CMD_K3S}\" = server ]; then\n            SYSTEM_NAME=k3s\n        else\n            SYSTEM_NAME=k3s-${CMD_K3S}\n        fi\n    fi\n\n    # --- check for invalid characters in system name ---\n    valid_chars=$(printf '%s' \"${SYSTEM_NAME}\" | sed -e 's/[][!#$%\u0026()*;\u003c=\u003e?\\_`{|}/[:space:]]/^/g;' )\n    if [ \"${SYSTEM_NAME}\" != \"${valid_chars}\"  ]; then\n        invalid_chars=$(printf '%s' \"${valid_chars}\" | sed -e 's/[^^]/ /g')\n        fatal \"Invalid characters for system name:\n            ${SYSTEM_NAME}\n            ${invalid_chars}\"\n    fi\n\n    # --- use sudo if we are not already root ---\n    SUDO=sudo\n    if [ $(id -u) -eq 0 ]; then\n        SUDO=\n    fi\n\n    # --- use systemd type if defined or create default ---\n    if [ -n \"${INSTALL_K3S_TYPE}\" ]; then\n        SYSTEMD_TYPE=${INSTALL_K3S_TYPE}\n    else\n        SYSTEMD_TYPE=notify\n    fi\n\n    # --- use binary install directory if defined or create default ---\n    if [ -n \"${INSTALL_K3S_BIN_DIR}\" ]; then\n        BIN_DIR=${INSTALL_K3S_BIN_DIR}\n    else\n        # --- use /usr/local/bin if root can write to it, otherwise use /opt/bin if it exists\n        BIN_DIR=/usr/local/bin\n        if ! $SUDO sh -c \"touch ${BIN_DIR}/k3s-ro-test \u0026\u0026 rm -rf ${BIN_DIR}/k3s-ro-test\"; then\n            if [ -d /opt/bin ]; then\n                BIN_DIR=/opt/bin\n            fi\n        fi\n    fi\n\n    # --- use systemd directory if defined or create default ---\n    if [ -n \"${INSTALL_K3S_SYSTEMD_DIR}\" ]; then\n        SYSTEMD_DIR=\"${INSTALL_K3S_SYSTEMD_DIR}\"\n    else\n        SYSTEMD_DIR=/etc/systemd/system\n    fi\n\n    # --- set related files from system name ---\n    SERVICE_K3S=${SYSTEM_NAME}.service\n    UNINSTALL_K3S_SH=${UNINSTALL_K3S_SH:-${BIN_DIR}/${SYSTEM_NAME}-uninstall.sh}\n    KILLALL_K3S_SH=${KILLALL_K3S_SH:-${BIN_DIR}/k3s-killall.sh}\n\n    # --- use service or environment location depending on systemd/openrc ---\n    if [ \"${HAS_SYSTEMD}\" = true ]; then\n        FILE_K3S_SERVICE=${SYSTEMD_DIR}/${SERVICE_K3S}\n        FILE_K3S_ENV=${SYSTEMD_DIR}/${SERVICE_K3S}.env\n    elif [ \"${HAS_OPENRC}\" = true ]; then\n        $SUDO mkdir -p /etc/rancher/k3s\n        FILE_K3S_SERVICE=/etc/init.d/${SYSTEM_NAME}\n        FILE_K3S_ENV=/etc/rancher/k3s/${SYSTEM_NAME}.env\n    fi\n\n    # --- get hash of config \u0026 exec for currently installed k3s ---\n    PRE_INSTALL_HASHES=$(get_installed_hashes)\n\n    # --- if bin directory is read only skip download ---\n    if [ \"${INSTALL_K3S_BIN_DIR_READ_ONLY}\" = true ]; then\n        INSTALL_K3S_SKIP_DOWNLOAD=true\n    fi\n\n    # --- setup channel values\n    INSTALL_K3S_CHANNEL_URL=${INSTALL_K3S_CHANNEL_URL:-'https://update.k3s.io/v1-release/channels'}\n    INSTALL_K3S_CHANNEL=${INSTALL_K3S_CHANNEL:-'stable'}\n}\n\n# --- check if skip download environment variable set ---\ncan_skip_download_binary() {\n    if [ \"${INSTALL_K3S_SKIP_DOWNLOAD}\" != true ] \u0026\u0026 [ \"${INSTALL_K3S_SKIP_DOWNLOAD}\" != binary ]; then\n        return 1\n    fi\n}\n\ncan_skip_download_selinux() {                                                        \n    if [ \"${INSTALL_K3S_SKIP_DOWNLOAD}\" != true ] \u0026\u0026 [ \"${INSTALL_K3S_SKIP_DOWNLOAD}\" != selinux ]; then \n        return 1                                                                     \n    fi                                                                               \n}  \n\n# --- verify an executable k3s binary is installed ---\nverify_k3s_is_executable() {\n    if [ ! -x ${BIN_DIR}/k3s ]; then\n        fatal \"Executable k3s binary not found at ${BIN_DIR}/k3s\"\n    fi\n}\n\n# --- set arch and suffix, fatal if architecture not supported ---\nsetup_verify_arch() {\n    if [ -z \"$ARCH\" ]; then\n        ARCH=$(uname -m)\n    fi\n    case $ARCH in\n        amd64)\n            ARCH=amd64\n            SUFFIX=\n            ;;\n        x86_64)\n            ARCH=amd64\n            SUFFIX=\n            ;;\n        arm64)\n            ARCH=arm64\n            SUFFIX=-${ARCH}\n            ;;\n        s390x)\n            ARCH=s390x\n            SUFFIX=-${ARCH}\n            ;;\n        aarch64)\n            ARCH=arm64\n            SUFFIX=-${ARCH}\n            ;;\n        arm*)\n            ARCH=arm\n            SUFFIX=-${ARCH}hf\n            ;;\n        *)\n            fatal \"Unsupported architecture $ARCH\"\n    esac\n}\n\n# --- verify existence of network downloader executable ---\nverify_downloader() {\n    # Return failure if it doesn't exist or is no executable\n    [ -x \"$(command -v $1)\" ] || return 1\n\n    # Set verified executable as our downloader program and return success\n    DOWNLOADER=$1\n    return 0\n}\n\n# --- create temporary directory and cleanup when done ---\nsetup_tmp() {\n    TMP_DIR=$(mktemp -d -t k3s-install.XXXXXXXXXX)\n    TMP_HASH=${TMP_DIR}/k3s.hash\n    TMP_ZIP=${TMP_DIR}/k3s.zip\n    TMP_BIN=${TMP_DIR}/k3s.bin\n    cleanup() {\n        code=$?\n        set +e\n        trap - EXIT\n        rm -rf ${TMP_DIR}\n        exit $code\n    }\n    trap cleanup INT EXIT\n}\n\n# --- use desired k3s version if defined or find version from channel ---\nget_release_version() {\n    if [ -n \"${INSTALL_K3S_PR}\" ]; then\n        VERSION_K3S=\"PR ${INSTALL_K3S_PR}\"\n        get_pr_artifact_url\n    elif [ -n \"${INSTALL_K3S_COMMIT}\" ]; then\n        VERSION_K3S=\"commit ${INSTALL_K3S_COMMIT}\"\n    elif [ -n \"${INSTALL_K3S_VERSION}\" ]; then\n        VERSION_K3S=${INSTALL_K3S_VERSION}\n    else\n        info \"Finding release for channel ${INSTALL_K3S_CHANNEL}\"\n        version_url=\"${INSTALL_K3S_CHANNEL_URL}/${INSTALL_K3S_CHANNEL}\"\n        case $DOWNLOADER in\n            curl)\n                VERSION_K3S=$(curl -w '%{url_effective}' -L -s -S ${version_url} -o /dev/null | sed -e 's|.*/||')\n                ;;\n            wget)\n                VERSION_K3S=$(wget -SqO /dev/null ${version_url} 2\u003e\u00261 | grep -i Location | sed -e 's|.*/||')\n                ;;\n            *)\n                fatal \"Incorrect downloader executable '$DOWNLOADER'\"\n                ;;\n        esac\n    fi\n    info \"Using ${VERSION_K3S} as release\"\n}\n\n# --- get k3s-selinux version ---\nget_k3s_selinux_version() {\n    available_version=\"k3s-selinux-1.2-2.${rpm_target}.noarch.rpm\"\n    info \"Finding available k3s-selinux versions\"\n    \n    # run verify_downloader in case it binary installation was skipped\n    verify_downloader curl || verify_downloader wget || fatal 'Can not find curl or wget for downloading files'\n\n    case $DOWNLOADER in\n        curl)\n            DOWNLOADER_OPTS=\"-s\"\n            ;;\n        wget)\n            DOWNLOADER_OPTS=\"-q -O -\"\n            ;;\n        *)\n            fatal \"Incorrect downloader executable '$DOWNLOADER'\"\n            ;;\n    esac\n    for i in {1..3}; do\n        set +e\n        if [ \"${rpm_channel}\" = \"testing\" ]; then\n            version=$(timeout 5 ${DOWNLOADER} ${DOWNLOADER_OPTS} https://api.github.com/repos/k3s-io/k3s-selinux/releases |  grep browser_download_url | awk '{ print $2 }' | grep -oE \"[^\\/]+${rpm_target}\\.noarch\\.rpm\" | head -n 1)\n        else\n            version=$(timeout 5 ${DOWNLOADER} ${DOWNLOADER_OPTS} https://api.github.com/repos/k3s-io/k3s-selinux/releases/latest |  grep browser_download_url | awk '{ print $2 }' | grep -oE \"[^\\/]+${rpm_target}\\.noarch\\.rpm\")\n        fi\n        set -e\n        if [ \"${version}\" != \"\" ]; then\n            break\n        fi\n        sleep 1\n    done\n    if [ \"${version}\" == \"\" ]; then\n        warn \"Failed to get available versions of k3s-selinux..defaulting to ${available_version}\"\n        return\n    fi\n    available_version=${version}\n}\n\n# --- download from github url ---\ndownload() {\n    [ $# -eq 2 ] || fatal 'download needs exactly 2 arguments'\n    set +e\n    case $DOWNLOADER in\n        curl)\n            curl -o $1 -sfL $2\n            ;;\n        wget)\n            wget -qO $1 $2\n            ;;\n        *)\n            fatal \"Incorrect executable '$DOWNLOADER'\"\n            ;;\n    esac\n\n    # Abort if download command failed\n    [ $? -eq 0 ] || fatal 'Download failed'\n    set -e\n}\n\n# --- download hash from github url ---\ndownload_hash() {\n    if [ -n \"${INSTALL_K3S_PR}\" ]; then\n        info \"Downloading hash ${GITHUB_PR_URL}\"\n        curl -s -o ${TMP_ZIP} -H \"Authorization: Bearer $GITHUB_TOKEN\" -L ${GITHUB_PR_URL}\n        unzip -p ${TMP_ZIP} k3s.sha256sum \u003e ${TMP_HASH}\n    else\n        if [ -n \"${INSTALL_K3S_COMMIT}\" ]; then\n            HASH_URL=${STORAGE_URL}/k3s${SUFFIX}-${INSTALL_K3S_COMMIT}.sha256sum\n        else\n            HASH_URL=${GITHUB_URL}/download/${VERSION_K3S}/sha256sum-${ARCH}.txt\n        fi\n        info \"Downloading hash ${HASH_URL}\"\n        download ${TMP_HASH} ${HASH_URL}\n    fi\n    HASH_EXPECTED=$(grep \" k3s${SUFFIX}$\" ${TMP_HASH})\n    HASH_EXPECTED=${HASH_EXPECTED%%[[:blank:]]*}\n}\n\n# --- check hash against installed version ---\ninstalled_hash_matches() {\n    if [ -x ${BIN_DIR}/k3s ]; then\n        HASH_INSTALLED=$(sha256sum ${BIN_DIR}/k3s)\n        HASH_INSTALLED=${HASH_INSTALLED%%[[:blank:]]*}\n        if [ \"${HASH_EXPECTED}\" = \"${HASH_INSTALLED}\" ]; then\n            return\n        fi\n    fi\n    return 1\n}\n\n# Use the GitHub API to identify the artifact associated with a given PR\nget_pr_artifact_url() {\n    github_api_url=https://api.github.com/repos/k3s-io/k3s\n\n    # Check if jq is installed\n    if ! [ -x \"$(command -v jq)\" ]; then\n        fatal \"Installing PR builds requires jq\"\n    fi\n\n    # Check if unzip is installed\n    if ! [ -x \"$(command -v unzip)\" ]; then\n        fatal \"Installing PR builds requires unzip\"\n    fi\n\n    if [ -z \"${GITHUB_TOKEN}\" ]; then\n        fatal \"Installing PR builds requires GITHUB_TOKEN with k3s-io/k3s repo permissions\"\n    fi\n\n    # GET request to the GitHub API to retrieve the latest commit SHA from the pull request\n    set +e\n    commit_id=$(curl -f -s -H \"Authorization: Bearer ${GITHUB_TOKEN}\" \"${github_api_url}/pulls/${INSTALL_K3S_PR}\" | jq -r '.head.sha')\n    set -e\n\n    if [ -z \"${commit_id}\" ]; then\n        fatal \"Installing PR builds requires GITHUB_TOKEN with k3s-io/k3s repo permissions\"\n    fi\n    \n    # GET request to the GitHub API to retrieve the Build workflow associated with the commit\n    wf_raw=$(curl -s -H \"Authorization: Bearer ${GITHUB_TOKEN}\" \"${github_api_url}/commits/${commit_id}/check-runs\")\n    build_workflow=$(printf \"%s\" \"${wf_raw}\" | jq -r '.check_runs[] |  select(.name == \"build / Build\")')\n    \n    # Extract the Run ID from the build workflow and lookup artifacts associated with the run\n    run_id=$(echo \"${build_workflow}\" | jq -r ' .details_url' | awk -F'/' '{print $(NF-2)}' | sort -rn | head -1)\n\n    # Extract the artifact ID for the \"k3s\" artifact    \n    artifacts=$(curl -s -H \"Authorization: Bearer ${GITHUB_TOKEN}\" \"${github_api_url}/actions/runs/${run_id}/artifacts\")\n    artifacts_url=$(echo \"${artifacts}\" | jq -r '.artifacts[] | select(.name == \"k3s\") | .archive_download_url')\n    GITHUB_PR_URL=\"${artifacts_url}\"\n}\n\n# --- download binary from github url ---\ndownload_binary() {\n    if [ -n \"${INSTALL_K3S_PR}\" ]; then\n        # Since Binary and Hash are zipped together, check if TMP_ZIP already exists\n        if ! [ -f ${TMP_ZIP} ]; then\n            info \"Downloading K3s artifact ${GITHUB_PR_URL}\"\n            curl -s -f -o ${TMP_ZIP} -H \"Authorization: Bearer $GITHUB_TOKEN\" -L ${GITHUB_PR_URL}\n        fi\n        # extract k3s binary from zip\n        unzip -p ${TMP_ZIP} k3s \u003e ${TMP_BIN}\n        return\n    elif [ -n \"${INSTALL_K3S_COMMIT}\" ]; then\n        BIN_URL=${STORAGE_URL}/k3s${SUFFIX}-${INSTALL_K3S_COMMIT}\n    else\n        BIN_URL=${GITHUB_URL}/download/${VERSION_K3S}/k3s${SUFFIX}\n    fi\n    info \"Downloading binary ${BIN_URL}\"\n    download ${TMP_BIN} ${BIN_URL}\n}\n\n# --- verify downloaded binary hash ---\nverify_binary() {\n    info \"Verifying binary download\"\n    HASH_BIN=$(sha256sum ${TMP_BIN})\n    HASH_BIN=${HASH_BIN%%[[:blank:]]*}\n    if [ \"${HASH_EXPECTED}\" != \"${HASH_BIN}\" ]; then\n        fatal \"Download sha256 does not match ${HASH_EXPECTED}, got ${HASH_BIN}\"\n    fi\n}\n\n# --- setup permissions and move binary to system directory ---\nsetup_binary() {\n    chmod 755 ${TMP_BIN}\n    info \"Installing k3s to ${BIN_DIR}/k3s\"\n    $SUDO chown root:root ${TMP_BIN}\n    $SUDO mv -f ${TMP_BIN} ${BIN_DIR}/k3s\n}\n\n# --- setup selinux policy ---\nsetup_selinux() {\n    case ${INSTALL_K3S_CHANNEL} in \n        *testing)\n            rpm_channel=testing\n            ;;\n        *latest)\n            rpm_channel=latest\n            ;;\n        *)\n            rpm_channel=stable\n            ;;\n    esac\n\n    rpm_site=\"rpm.rancher.io\"\n    if [ \"${rpm_channel}\" = \"testing\" ]; then\n        rpm_site=\"rpm-testing.rancher.io\"\n    fi\n\n    [ -r /etc/os-release ] \u0026\u0026 . /etc/os-release\n    if [ `expr \"${ID_LIKE}\" : \".*suse.*\"` != 0 ]; then\n        rpm_target=sle\n        rpm_site_infix=microos\n        package_installer=zypper\n        if [ \"${ID_LIKE:-}\" = suse ] \u0026\u0026 ( [ \"${VARIANT_ID:-}\" = sle-micro ] || [ \"${ID:-}\" = sle-micro ] ); then\n            rpm_target=sle\n            rpm_site_infix=slemicro\n            package_installer=zypper\n        fi\n    elif [ \"${ID_LIKE:-}\" = coreos ] || [ \"${VARIANT_ID:-}\" = coreos ] || [ \"${VARIANT_ID:-}\" = \"iot\" ]; then\n        rpm_target=coreos\n        rpm_site_infix=coreos\n        package_installer=rpm-ostree\n    elif [ \"${VERSION_ID%%.*}\" = \"7\" ] || ( [ \"${ID:-}\" = amzn ] \u0026\u0026 [ \"${VERSION_ID%%.*}\" = \"2\" ] ); then\n        rpm_target=el7\n        rpm_site_infix=centos/7\n        package_installer=yum\n    elif [ \"${VERSION_ID%%.*}\" = \"8\" ] || [ \"${VERSION_ID%%.*}\" = \"V10\" ] || [ \"${VERSION_ID%%.*}\" -gt \"36\" ]; then\n        rpm_target=el8\n        rpm_site_infix=centos/8\n        package_installer=yum\n    else\n        rpm_target=el9\n        rpm_site_infix=centos/9\n        package_installer=yum\n    fi\n\n    if [ \"${package_installer}\" = \"rpm-ostree\" ] \u0026\u0026 [ -x /bin/yum ]; then\n        package_installer=yum\n    fi\n\n    if [ \"${package_installer}\" = \"yum\" ] \u0026\u0026 [ -x /usr/bin/dnf ]; then\n        package_installer=dnf\n    fi\n\n    policy_hint=\"please install:\n    ${package_installer} install -y container-selinux\n    ${package_installer} install -y https://${rpm_site}/k3s/${rpm_channel}/common/${rpm_site_infix}/noarch/${available_version}\n\"\n\n    if [ \"$INSTALL_K3S_SKIP_SELINUX_RPM\" = true ] || can_skip_download_selinux || [ ! -d /usr/share/selinux ]; then\n        info \"Skipping installation of SELinux RPM\"\n        return\n    fi\n    \n    get_k3s_selinux_version\n    install_selinux_rpm ${rpm_site} ${rpm_channel} ${rpm_target} ${rpm_site_infix}\n\n    policy_error=fatal\n    if [ \"$INSTALL_K3S_SELINUX_WARN\" = true ] || [ \"${ID_LIKE:-}\" = coreos ] || \n       [ \"${VARIANT_ID:-}\" = coreos ] || [ \"${VARIANT_ID:-}\" = iot ]; then\n        policy_error=warn\n    fi\n\n    if ! $SUDO chcon -u system_u -r object_r -t container_runtime_exec_t ${BIN_DIR}/k3s \u003e/dev/null 2\u003e\u00261; then\n        if $SUDO grep '^\\s*SELINUX=enforcing' /etc/selinux/config \u003e/dev/null 2\u003e\u00261; then\n            $policy_error \"Failed to apply container_runtime_exec_t to ${BIN_DIR}/k3s, ${policy_hint}\"\n        fi\n    elif [ ! -f /usr/share/selinux/packages/k3s.pp ]; then\n        if [ -x /usr/sbin/transactional-update ] || [ \"${ID_LIKE:-}\" = coreos ] || [ \"${VARIANT_ID:-}\" = coreos ] || [ \"${VARIANT_ID:-}\" = iot ]; then\n            warn \"Please reboot your machine to activate the changes and avoid data loss.\"\n        else\n            $policy_error \"Failed to find the k3s-selinux policy, ${policy_hint}\"\n        fi\n    fi\n}\n\ninstall_selinux_rpm() {\n    if [ -r /etc/redhat-release ] || [ -r /etc/centos-release ] || [ -r /etc/oracle-release ] || \n       [ -r /etc/fedora-release ] || [ -r /etc/system-release ] || [ \"${ID_LIKE%%[ ]*}\" = \"suse\" ]; then\n        repodir=/etc/yum.repos.d\n        if [ -d /etc/zypp/repos.d ]; then\n            repodir=/etc/zypp/repos.d\n        fi\n        set +o noglob\n        $SUDO rm -f ${repodir}/rancher-k3s-common*.repo\n        set -o noglob\n        if [ -r /etc/redhat-release ] \u0026\u0026 [ \"${3}\" = \"el7\" ]; then\n            $SUDO yum install -y yum-utils\n            $SUDO yum-config-manager --enable rhel-7-server-extras-rpms\n        fi\n        $SUDO tee ${repodir}/rancher-k3s-common.repo \u003e/dev/null \u003c\u003c EOF\n[rancher-k3s-common-${2}]\nname=Rancher K3s Common (${2})\nbaseurl=https://${1}/k3s/${2}/common/${4}/noarch\nenabled=1\ngpgcheck=1\nrepo_gpgcheck=0\ngpgkey=https://${1}/public.key\nEOF\n        case ${3} in\n        sle)\n            rpm_installer=\"zypper --gpg-auto-import-keys\"\n            if [ \"${TRANSACTIONAL_UPDATE=false}\" != \"true\" ] \u0026\u0026 [ -x /usr/sbin/transactional-update ]; then\n                transactional_update_run=\"transactional-update --no-selfupdate -d run\"\n                rpm_installer=\"transactional-update --no-selfupdate -d run ${rpm_installer}\"\n                : \"${INSTALL_K3S_SKIP_START:=true}\"\n            fi\n            # create the /var/lib/rpm-state in SLE systems to fix the prein selinux macro\n            $SUDO ${transactional_update_run} mkdir -p /var/lib/rpm-state\n            ;;\n        coreos)\n            rpm_installer=\"rpm-ostree --idempotent\"\n            # rpm_install_extra_args=\"--apply-live\"\n            : \"${INSTALL_K3S_SKIP_START:=true}\"\n            ;;\n        *)\n            rpm_installer=\"yum\"\n            ;;\n        esac\n        if [ \"${rpm_installer}\" = \"yum\" ] \u0026\u0026 [ -x /usr/bin/dnf ]; then\n            rpm_installer=dnf\n        fi\n\t    if rpm -q --quiet k3s-selinux; then \n            # remove k3s-selinux module before upgrade to allow container-selinux to upgrade safely\n            if check_available_upgrades container-selinux ${3} \u0026\u0026 check_available_upgrades k3s-selinux ${3}; then\n                MODULE_PRIORITY=$($SUDO semodule --list=full | grep k3s | cut -f1 -d\" \")\n                if [ -n \"${MODULE_PRIORITY}\" ]; then\n                    $SUDO semodule -X $MODULE_PRIORITY -r k3s || true\n                fi\n            fi\n        fi\n        # shellcheck disable=SC2086\n        $SUDO ${rpm_installer} install -y \"k3s-selinux\"\n    fi\n    return\n}\n\ncheck_available_upgrades() {\n    set +e\n    case ${2} in\n        sle)\n            available_upgrades=$($SUDO zypper -q -t -s 11 se -s -u --type package $1 | tail -n 1 | grep -v \"No matching\" | awk '{print $3}')\n            ;;\n        coreos)\n            # currently rpm-ostree does not support search functionality https://github.com/coreos/rpm-ostree/issues/1877\n            ;;\n        *)\n            available_upgrades=$($SUDO yum -q --refresh list $1 --upgrades | tail -n 1 | awk '{print $2}')\n            ;;\n    esac\n    set -e\n    if [ -n \"${available_upgrades}\" ]; then\n        return 0\n    fi\n    return 1\n}\n# --- download and verify k3s ---\ndownload_and_verify() {\n    if can_skip_download_binary; then\n       info 'Skipping k3s download and verify'\n       verify_k3s_is_executable\n       return\n    fi\n\n    setup_verify_arch\n    verify_downloader curl || verify_downloader wget || fatal 'Can not find curl or wget for downloading files'\n    setup_tmp\n    get_release_version\n    download_hash\n\n    if installed_hash_matches; then\n        info 'Skipping binary downloaded, installed k3s matches hash'\n        return\n    fi\n\n    download_binary\n    verify_binary\n    setup_binary\n}\n\n# --- add additional utility links ---\ncreate_symlinks() {\n    [ \"${INSTALL_K3S_BIN_DIR_READ_ONLY}\" = true ] \u0026\u0026 return\n    [ \"${INSTALL_K3S_SYMLINK}\" = skip ] \u0026\u0026 return\n\n    for cmd in kubectl crictl ctr; do\n        if [ ! -e ${BIN_DIR}/${cmd} ] || [ \"${INSTALL_K3S_SYMLINK}\" = force ]; then\n            which_cmd=$(command -v ${cmd} 2\u003e/dev/null || true)\n            if [ -z \"${which_cmd}\" ] || [ \"${INSTALL_K3S_SYMLINK}\" = force ]; then\n                info \"Creating ${BIN_DIR}/${cmd} symlink to k3s\"\n                $SUDO ln -sf k3s ${BIN_DIR}/${cmd}\n            else\n                info \"Skipping ${BIN_DIR}/${cmd} symlink to k3s, command exists in PATH at ${which_cmd}\"\n            fi\n        else\n            info \"Skipping ${BIN_DIR}/${cmd} symlink to k3s, already exists\"\n        fi\n    done\n}\n\n# --- create killall script ---\ncreate_killall() {\n    [ \"${INSTALL_K3S_BIN_DIR_READ_ONLY}\" = true ] \u0026\u0026 return\n    info \"Creating killall script ${KILLALL_K3S_SH}\"\n    $SUDO tee ${KILLALL_K3S_SH} \u003e/dev/null \u003c\u003c \\EOF\n#!/bin/sh\n[ $(id -u) -eq 0 ] || exec sudo $0 $@\n\nK3S_DATA_DIR=${K3S_DATA_DIR:-/var/lib/rancher/k3s}\n\nfor bin in ${K3S_DATA_DIR}/data/**/bin/; do\n    [ -d $bin ] \u0026\u0026 export PATH=$PATH:$bin:$bin/aux\ndone\n\nset -x\n\nfor service in /etc/systemd/system/k3s*.service; do\n    [ -s $service ] \u0026\u0026 systemctl stop $(basename $service)\ndone\n\nfor service in /etc/init.d/k3s*; do\n    [ -x $service ] \u0026\u0026 $service stop\ndone\n\npschildren() {\n    ps -e -o ppid= -o pid= | \\\n    sed -e 's/^\\s*//g; s/\\s\\s*/\\t/g;' | \\\n    grep -w \"^$1\" | \\\n    cut -f2\n}\n\npstree() {\n    for pid in $@; do\n        echo $pid\n        for child in $(pschildren $pid); do\n            pstree $child\n        done\n    done\n}\n\nkilltree() {\n    kill -9 $(\n        { set +x; } 2\u003e/dev/null;\n        pstree $@;\n        set -x;\n    ) 2\u003e/dev/null\n}\n\nremove_interfaces() {\n    # Delete network interface(s) that match 'master cni0'\n    ip link show 2\u003e/dev/null | grep 'master cni0' | while read ignore iface ignore; do\n        iface=${iface%%@*}\n        [ -z \"$iface\" ] || ip link delete $iface\n    done\n\n    # Delete cni related interfaces\n    ip link delete cni0\n    ip link delete flannel.1\n    ip link delete flannel-v6.1\n    ip link delete kube-ipvs0\n    ip link delete flannel-wg\n    ip link delete flannel-wg-v6\n\n    # Restart tailscale\n    if [ -n \"$(command -v tailscale)\" ]; then\n        tailscale set --advertise-routes=\n    fi\n}\n\ngetshims() {\n    ps -e -o pid= -o args= | sed -e 's/^ *//; s/\\s\\s*/\\t/;' | grep -w \"${K3S_DATA_DIR}\"'/data/[^/]*/bin/containerd-shim' | cut -f1\n}\n\nkilltree $({ set +x; } 2\u003e/dev/null; getshims; set -x)\n\ndo_unmount_and_remove() {\n    set +x\n    while read -r _ path _; do\n        case \"$path\" in $1*) echo \"$path\" ;; esac\n    done \u003c /proc/self/mounts | sort -r | xargs -r -t -n 1 sh -c 'umount -f \"$0\" \u0026\u0026 rm -rf \"$0\"'\n    set -x\n}\n\ndo_unmount_and_remove '/run/k3s'\ndo_unmount_and_remove '/var/lib/kubelet/pods'\ndo_unmount_and_remove '/var/lib/kubelet/plugins'\ndo_unmount_and_remove '/run/netns/cni-'\n\n# Remove CNI namespaces\nip netns show 2\u003e/dev/null | grep cni- | xargs -r -t -n 1 ip netns delete\n\nremove_interfaces\n\nrm -rf /var/lib/cni/\niptables-save | grep -v KUBE- | grep -v CNI- | grep -iv flannel | iptables-restore\nip6tables-save | grep -v KUBE- | grep -v CNI- | grep -iv flannel | ip6tables-restore\nEOF\n    $SUDO chmod 755 ${KILLALL_K3S_SH}\n    $SUDO chown root:root ${KILLALL_K3S_SH}\n}\n\n# --- create uninstall script ---\ncreate_uninstall() {\n    [ \"${INSTALL_K3S_BIN_DIR_READ_ONLY}\" = true ] \u0026\u0026 return\n    info \"Creating uninstall script ${UNINSTALL_K3S_SH}\"\n    $SUDO tee ${UNINSTALL_K3S_SH} \u003e/dev/null \u003c\u003c EOF\n#!/bin/sh\nset -x\n[ \\$(id -u) -eq 0 ] || exec sudo \\$0 \\$@\n\nK3S_DATA_DIR=\\${K3S_DATA_DIR:-/var/lib/rancher/k3s}\n\n${KILLALL_K3S_SH}\n\nif command -v systemctl; then\n    systemctl disable ${SYSTEM_NAME}\n    systemctl reset-failed ${SYSTEM_NAME}\n    systemctl daemon-reload\nfi\nif command -v rc-update; then\n    rc-update delete ${SYSTEM_NAME} default\nfi\n\nrm -f ${FILE_K3S_SERVICE}\nrm -f ${FILE_K3S_ENV}\n\nremove_uninstall() {\n    rm -f ${UNINSTALL_K3S_SH}\n}\ntrap remove_uninstall EXIT\n\nif (ls ${SYSTEMD_DIR}/k3s*.service || ls /etc/init.d/k3s*) \u003e/dev/null 2\u003e\u00261; then\n    set +x; echo 'Additional k3s services installed, skipping uninstall of k3s'; set -x\n    exit\nfi\n\nfor cmd in kubectl crictl ctr; do\n    if [ -L ${BIN_DIR}/\\$cmd ]; then\n        rm -f ${BIN_DIR}/\\$cmd\n    fi\ndone\n\nclean_mounted_directory() {\n    if ! grep -q \" \\$1\" /proc/mounts; then\n        rm -rf \"\\$1\"\n\treturn 0\n    fi\n\n    for path in \"\\$1\"/*; do\n        if [ -d \"\\$path\" ]; then\n            if grep -q \" \\$path\" /proc/mounts; then\n                clean_mounted_directory \"\\$path\"\n            else\n                rm -rf \"\\$path\"\n            fi\n        else\n            rm \"\\$path\"\n        fi\n     done\n}\n\nrm -rf /etc/rancher/k3s\nrm -rf /run/k3s\nrm -rf /run/flannel\nclean_mounted_directory \\${K3S_DATA_DIR}\nrm -rf /var/lib/kubelet\nrm -f ${BIN_DIR}/k3s\nrm -f ${KILLALL_K3S_SH}\n\nif type yum \u003e/dev/null 2\u003e\u00261; then\n    yum remove -y k3s-selinux\n    rm -f /etc/yum.repos.d/rancher-k3s-common*.repo\nelif type rpm-ostree \u003e/dev/null 2\u003e\u00261; then\n    rpm-ostree uninstall k3s-selinux\n    rm -f /etc/yum.repos.d/rancher-k3s-common*.repo\nelif type zypper \u003e/dev/null 2\u003e\u00261; then\n    uninstall_cmd=\"zypper remove -y k3s-selinux\"\n    if [ \"\\${TRANSACTIONAL_UPDATE=false}\" != \"true\" ] \u0026\u0026 [ -x /usr/sbin/transactional-update ]; then\n        uninstall_cmd=\"transactional-update --no-selfupdate -d run \\$uninstall_cmd\"\n    fi\n    $SUDO \\$uninstall_cmd\n    rm -f /etc/zypp/repos.d/rancher-k3s-common*.repo\nfi\nEOF\n    $SUDO chmod 755 ${UNINSTALL_K3S_SH}\n    $SUDO chown root:root ${UNINSTALL_K3S_SH}\n}\n\n# --- disable current service if loaded --\nsystemd_disable() {\n    $SUDO systemctl disable ${SYSTEM_NAME} \u003e/dev/null 2\u003e\u00261 || true\n    $SUDO rm -f /etc/systemd/system/${SERVICE_K3S} || true\n    $SUDO rm -f /etc/systemd/system/${SERVICE_K3S}.env || true\n}\n\n# --- capture current env and create file containing k3s_ variables ---\ncreate_env_file() {\n    info \"env: Creating environment file ${FILE_K3S_ENV}\"\n    $SUDO touch ${FILE_K3S_ENV}\n    $SUDO chmod 0600 ${FILE_K3S_ENV}\n    sh -c export | while read x v; do echo $v; done | grep -E '^(K3S|CONTAINERD)_' | $SUDO tee ${FILE_K3S_ENV} \u003e/dev/null\n    sh -c export | while read x v; do echo $v; done | grep -Ei '^(NO|HTTP|HTTPS)_PROXY' | $SUDO tee -a ${FILE_K3S_ENV} \u003e/dev/null\n}\n\n# --- write systemd service file ---\ncreate_systemd_service_file() {\n    info \"systemd: Creating service file ${FILE_K3S_SERVICE}\"\n    $SUDO tee ${FILE_K3S_SERVICE} \u003e/dev/null \u003c\u003c EOF\n[Unit]\nDescription=Lightweight Kubernetes\nDocumentation=https://k3s.io\nWants=network-online.target\nAfter=network-online.target\n\n[Install]\nWantedBy=multi-user.target\n\n[Service]\nType=${SYSTEMD_TYPE}\nEnvironmentFile=-/etc/default/%N\nEnvironmentFile=-/etc/sysconfig/%N\nEnvironmentFile=-${FILE_K3S_ENV}\nKillMode=process\nDelegate=yes\n# Having non-zero Limit*s causes performance problems due to accounting overhead\n# in the kernel. We recommend using cgroups to do container-local accounting.\nLimitNOFILE=1048576\nLimitNPROC=infinity\nLimitCORE=infinity\nTasksMax=infinity\nTimeoutStartSec=0\nRestart=always\nRestartSec=5s\nExecStartPre=/bin/sh -xc '! /usr/bin/systemctl is-enabled --quiet nm-cloud-setup.service 2\u003e/dev/null'\nExecStartPre=-/sbin/modprobe br_netfilter\nExecStartPre=-/sbin/modprobe overlay\nExecStart=${BIN_DIR}/k3s \\\\\n    ${CMD_K3S_EXEC}\n\nEOF\n}\n\n# --- write openrc service file ---\ncreate_openrc_service_file() {\n    LOG_FILE=/var/log/${SYSTEM_NAME}.log\n\n    info \"openrc: Creating service file ${FILE_K3S_SERVICE}\"\n    $SUDO tee ${FILE_K3S_SERVICE} \u003e/dev/null \u003c\u003c EOF\n#!/sbin/openrc-run\n\ndepend() {\n    after network-online\n    want cgroups\n}\n\nstart_pre() {\n    rm -f /tmp/k3s.*\n}\n\nsupervisor=supervise-daemon\nname=${SYSTEM_NAME}\ncommand=\"${BIN_DIR}/k3s\"\ncommand_args=\"$(escape_dq \"${CMD_K3S_EXEC}\")\n    \u003e\u003e${LOG_FILE} 2\u003e\u00261\"\n\noutput_log=${LOG_FILE}\nerror_log=${LOG_FILE}\n\npidfile=\"/var/run/${SYSTEM_NAME}.pid\"\nrespawn_delay=5\nrespawn_max=0\n\nset -o allexport\nif [ -f /etc/environment ]; then . /etc/environment; fi\nif [ -f ${FILE_K3S_ENV} ]; then . ${FILE_K3S_ENV}; fi\nset +o allexport\nEOF\n    $SUDO chmod 0755 ${FILE_K3S_SERVICE}\n\n    $SUDO tee /etc/logrotate.d/${SYSTEM_NAME} \u003e/dev/null \u003c\u003c EOF\n${LOG_FILE} {\n\tmissingok\n\tnotifempty\n\tcopytruncate\n}\nEOF\n}\n\n# --- write systemd or openrc service file ---\ncreate_service_file() {\n    [ \"${HAS_SYSTEMD}\" = true ] \u0026\u0026 create_systemd_service_file \u0026\u0026 restore_systemd_service_file_context\n    [ \"${HAS_OPENRC}\" = true ] \u0026\u0026 create_openrc_service_file\n    return 0\n}\n\nrestore_systemd_service_file_context() {\n    $SUDO restorecon -R -i ${FILE_K3S_SERVICE} 2\u003e/dev/null || true\n    $SUDO restorecon -R -i ${FILE_K3S_ENV} 2\u003e/dev/null || true\n}\n\n# --- get hashes of the current k3s bin and service files\nget_installed_hashes() {\n    $SUDO sha256sum ${BIN_DIR}/k3s ${FILE_K3S_SERVICE} ${FILE_K3S_ENV} 2\u003e\u00261 || true\n}\n\n# --- enable and start systemd service ---\nsystemd_enable() {\n    info \"systemd: Enabling ${SYSTEM_NAME} unit\"\n    $SUDO systemctl enable ${FILE_K3S_SERVICE} \u003e/dev/null\n    $SUDO systemctl daemon-reload \u003e/dev/null\n}\n\nsystemd_start() {\n    info \"systemd: Starting ${SYSTEM_NAME}\"\n    $SUDO systemctl restart ${SYSTEM_NAME}\n}\n\n# --- enable and start openrc service ---\nopenrc_enable() {\n    info \"openrc: Enabling ${SYSTEM_NAME} service for default runlevel\"\n    $SUDO rc-update add ${SYSTEM_NAME} default \u003e/dev/null\n}\n\nopenrc_start() {\n    info \"openrc: Starting ${SYSTEM_NAME}\"\n    $SUDO ${FILE_K3S_SERVICE} restart\n}\n\nhas_working_xtables() {\n    if $SUDO sh -c \"command -v \\\"$1-save\\\"\" 1\u003e /dev/null \u0026\u0026 $SUDO sh -c \"command -v \\\"$1-restore\\\"\" 1\u003e /dev/null; then\n        if $SUDO $1-save 2\u003e/dev/null | grep -q '^-A CNI-HOSTPORT-MASQ -j MASQUERADE$'; then\n            warn \"Host $1-save/$1-restore tools are incompatible with existing rules\"\n        else\n            return 0\n        fi\n    else\n        info \"Host $1-save/$1-restore tools not found\"\n    fi\n    return 1\n}\n\n# --- startup systemd or openrc service ---\nservice_enable_and_start() {\n    if [ -f \"/proc/cgroups\" ] \u0026\u0026 [ \"$(grep memory /proc/cgroups | while read -r n n n enabled; do echo $enabled; done)\" -eq 0 ];\n    then\n        info 'Failed to find memory cgroup, you may need to add \"cgroup_memory=1 cgroup_enable=memory\" to your linux cmdline (/boot/cmdline.txt on a Raspberry Pi)'\n    fi\n\n    [ \"${INSTALL_K3S_SKIP_ENABLE}\" = true ] \u0026\u0026 return\n\n    [ \"${HAS_SYSTEMD}\" = true ] \u0026\u0026 systemd_enable\n    [ \"${HAS_OPENRC}\" = true ] \u0026\u0026 openrc_enable\n\n    [ \"${INSTALL_K3S_SKIP_START}\" = true ] \u0026\u0026 return\n\n    POST_INSTALL_HASHES=$(get_installed_hashes)\n    if [ \"${PRE_INSTALL_HASHES}\" = \"${POST_INSTALL_HASHES}\" ] \u0026\u0026 [ \"${INSTALL_K3S_FORCE_RESTART}\" != true ]; then\n        info 'No change detected so skipping service start'\n        return\n    fi\n\n    for XTABLES in iptables ip6tables; do\n        if has_working_xtables ${XTABLES}; then\n            $SUDO ${XTABLES}-save 2\u003e/dev/null | grep -v KUBE- | grep -iv flannel | $SUDO ${XTABLES}-restore\n        fi\n    done\n\n    [ \"${HAS_SYSTEMD}\" = true ] \u0026\u0026 systemd_start\n    [ \"${HAS_OPENRC}\" = true ] \u0026\u0026 openrc_start\n    return 0\n}\n\n# --- re-evaluate args to include env command ---\neval set -- $(escape \"${INSTALL_K3S_EXEC}\") $(quote \"$@\")\n\n# --- run the install process --\n{\n    verify_system\n    setup_env \"$@\"\n    download_and_verify\n    setup_selinux\n    create_symlinks\n    create_killall\n    create_uninstall\n    systemd_disable\n    create_env_file\n    create_service_file\n    service_enable_and_start\n}\n\n",
            "response_body_base64": "IyEvYmluL3NoCnNldCAtZQpzZXQgLW8gbm9nbG9iCgojIFVzYWdlOgojICAgY3VybCAuLi4gfCBFTlZfVkFSPS4uLiBzaCAtCiMgICAgICAgb3IKIyAgIEVOVl9WQVI9Li4uIC4vaW5zdGFsbC5zaAojCiMgRXhhbXBsZToKIyAgIEluc3RhbGxpbmcgYSBzZXJ2ZXIgd2l0aG91dCB0cmFlZmlrOgojICAgICBjdXJsIC4uLiB8IElOU1RBTExfSzNTX0VYRUM9Ii0tZGlzYWJsZT10cmFlZmlrIiBzaCAtCiMgICBJbnN0YWxsaW5nIGFuIGFnZW50IHRvIHBvaW50IGF0IGEgc2VydmVyOgojICAgICBjdXJsIC4uLiB8IEszU19UT0tFTj14eHggSzNTX1VSTD1odHRwczovL3NlcnZlci11cmw6NjQ0MyBzaCAtCiMKIyBFbnZpcm9ubWVudCB2YXJpYWJsZXM6CiMgICAtIEszU18qCiMgICAgIEVudmlyb25tZW50IHZhcmlhYmxlcyB3aGljaCBiZWdpbiB3aXRoIEszU18gd2lsbCBiZSBwcmVzZXJ2ZWQgZm9yIHRoZQojICAgICBzeXN0ZW1kIHNlcnZpY2UgdG8gdXNlLiBTZXR0aW5nIEszU19VUkwgd2l0aG91dCBleHBsaWNpdGx5IHNldHRpbmcKIyAgICAgYSBzeXN0ZW1kIGV4ZWMgY29tbWFuZCB3aWxsIGRlZmF1bHQgdGhlIGNvbW1hbmQgdG8gImFnZW50IiwgYW5kIHdlCiMgICAgIGVuZm9yY2UgdGhhdCBLM1NfVE9LRU4gaXMgYWxzbyBzZXQuCiMKIyAgIC0gSU5TVEFMTF9LM1NfU0tJUF9ET1dOTE9BRAojICAgICBJZiBzZXQgdG8gdHJ1ZSB3aWxsIG5vdCBkb3dubG9hZCBrM3MgaGFzaCBvciBiaW5hcnkuCiMKIyAgIC0gSU5TVEFMTF9LM1NfRk9SQ0VfUkVTVEFSVAojICAgICBJZiBzZXQgdG8gdHJ1ZSB3aWxsIGFsd2F5cyByZXN0YXJ0IHRoZSBLM3Mgc2VydmljZQojCiMgICAtIElOU1RBTExfSzNTX1NZTUxJTksKIyAgICAgSWYgc2V0IHRvICdza2lwJyB3aWxsIG5vdCBjcmVhdGUgc3ltbGlua3MsICdmb3JjZScgd2lsbCBvdmVyd3JpdGUsCiMgICAgIGRlZmF1bHQgd2lsbCBzeW1saW5rIGlmIGNvbW1hbmQgZG9lcyBub3QgZXhpc3QgaW4gcGF0aC4KIwojICAgLSBJTlNUQUxMX0szU19TS0lQX0VOQUJMRQojICAgICBJZiBzZXQgdG8gdHJ1ZSB3aWxsIG5vdCBlbmFibGUgb3Igc3RhcnQgazNzIHNlcnZpY2UuCiMKIyAgIC0gSU5TVEFMTF9LM1NfU0tJUF9TVEFSVAojICAgICBJZiBzZXQgdG8gdHJ1ZSB3aWxsIG5vdCBzdGFydCBrM3Mgc2VydmljZS4KIwojICAgLSBJTlNUQUxMX0szU19WRVJTSU9OCiMgICAgIFZlcnNpb24gb2YgazNzIHRvIGRvd25sb2FkIGZyb20gZ2l0aHViLiBXaWxsIGF0dGVtcHQgdG8gZG93bmxvYWQgZnJvbSB0aGUKIyAgICAgc3RhYmxlIGNoYW5uZWwgaWYgbm90IHNwZWNpZmllZC4KIwojICAgLSBJTlNUQUxMX0szU19DT01NSVQKIyAgICAgQ29tbWl0IG9mIGszcyB0byBkb3dubG9hZCBmcm9tIHRlbXBvcmFyeSBjbG91ZCBzdG9yYWdlLgojICAgICAqIChmb3IgZGV2ZWxvcGVyICYgUUEgdXNlKQojCiMgICAtIElOU1RBTExfSzNTX1BSCiMgICAgIFBSIGJ1aWxkIG9mIGszcyB0byBkb3dubG9hZCBmcm9tIEdpdGh1YiBBcnRpZmFjdHMuCiMgICAgICogKGZvciBkZXZlbG9wZXIgJiBRQSB1c2UpCiMKIyAgIC0gSU5TVEFMTF9LM1NfQklOX0RJUgojICAgICBEaXJlY3RvcnkgdG8gaW5zdGFsbCBrM3MgYmluYXJ5LCBsaW5rcywgYW5kIHVuaW5zdGFsbCBzY3JpcHQgdG8sIG9yIHVzZQojICAgICAvdXNyL2xvY2FsL2JpbiBhcyB0aGUgZGVmYXVsdAojCiMgICAtIElOU1RBTExfSzNTX0JJTl9ESVJfUkVBRF9PTkxZCiMgICAgIElmIHNldCB0byB0cnVlIHdpbGwgbm90IHdyaXRlIGZpbGVzIHRvIElOU1RBTExfSzNTX0JJTl9ESVIsIGZvcmNlcwojICAgICBzZXR0aW5nIElOU1RBTExfSzNTX1NLSVBfRE9XTkxPQUQ9dHJ1ZQojCiMgICAtIElOU1RBTExfSzNTX1NZU1RFTURfRElSCiMgICAgIERpcmVjdG9yeSB0byBpbnN0YWxsIHN5c3RlbWQgc2VydmljZSBhbmQgZW52aXJvbm1lbnQgZmlsZXMgdG8sIG9yIHVzZQojICAgICAvZXRjL3N5c3RlbWQvc3lzdGVtIGFzIHRoZSBkZWZhdWx0CiMKIyAgIC0gSU5TVEFMTF9LM1NfRVhFQyBvciBzY3JpcHQgYXJndW1lbnRzCiMgICAgIENvbW1hbmQgd2l0aCBmbGFncyB0byB1c2UgZm9yIGxhdW5jaGluZyBrM3MgaW4gdGhlIHN5c3RlbWQgc2VydmljZSwgaWYKIyAgICAgdGhlIGNvbW1hbmQgaXMgbm90IHNwZWNpZmllZCB3aWxsIGRlZmF1bHQgdG8gImFnZW50IiBpZiBLM1NfVVJMIGlzIHNldAojICAgICBvciAic2VydmVyIiBpZiBub3QuIFRoZSBmaW5hbCBzeXN0ZW1kIGNvbW1hbmQgcmVzb2x2ZXMgdG8gYSBjb21iaW5hdGlvbgojICAgICBvZiBFWEVDIGFuZCBzY3JpcHQgYXJncyAoJEApLgojCiMgICAgIFRoZSBmb2xsb3dpbmcgY29tbWFuZHMgcmVzdWx0IGluIHRoZSBzYW1lIGJlaGF2aW9yOgojICAgICAgIGN1cmwgLi4uIHwgSU5TVEFMTF9LM1NfRVhFQz0iLS1kaXNhYmxlPXRyYWVmaWsiIHNoIC1zIC0KIyAgICAgICBjdXJsIC4uLiB8IElOU1RBTExfSzNTX0VYRUM9InNlcnZlciAtLWRpc2FibGU9dHJhZWZpayIgc2ggLXMgLQojICAgICAgIGN1cmwgLi4uIHwgSU5TVEFMTF9LM1NfRVhFQz0ic2VydmVyIiBzaCAtcyAtIC0tZGlzYWJsZT10cmFlZmlrCiMgICAgICAgY3VybCAuLi4gfCBzaCAtcyAtIHNlcnZlciAtLWRpc2FibGU9dHJhZWZpawojICAgICAgIGN1cmwgLi4uIHwgc2ggLXMgLSAtLWRpc2FibGU9dHJhZWZpawojCiMgICAtIElOU1RBTExfSzNTX05BTUUKIyAgICAgTmFtZSBvZiBzeXN0ZW1kIHNlcnZpY2UgdG8gY3JlYXRlLCB3aWxsIGRlZmF1bHQgZnJvbSB0aGUgazNzIGV4ZWMgY29tbWFuZAojICAgICBpZiBub3Qgc3BlY2lmaWVkLiBJZiBzcGVjaWZpZWQgdGhlIG5hbWUgd2lsbCBiZSBwcmVmaXhlZCB3aXRoICdrM3MtJy4KIwojICAgLSBJTlNUQUxMX0szU19UWVBFCiMgICAgIFR5cGUgb2Ygc3lzdGVtZCBzZXJ2aWNlIHRvIGNyZWF0ZSwgd2lsbCBkZWZhdWx0IGZyb20gdGhlIGszcyBleGVjIGNvbW1hbmQKIyAgICAgaWYgbm90IHNwZWNpZmllZC4KIwojICAgLSBJTlNUQUxMX0szU19TRUxJTlVYX1dBUk4KIyAgICAgSWYgc2V0IHRvIHRydWUgd2lsbCBjb250aW51ZSBpZiBrM3Mtc2VsaW51eCBwb2xpY3kgaXMgbm90IGZvdW5kLgojCiMgICAtIElOU1RBTExfSzNTX1NLSVBfU0VMSU5VWF9SUE0KIyAgICAgSWYgc2V0IHRvIHRydWUgd2lsbCBza2lwIGF1dG9tYXRpYyBpbnN0YWxsYXRpb24gb2YgdGhlIGszcyBSUE0uCiMKIyAgIC0gSU5TVEFMTF9LM1NfQ0hBTk5FTF9VUkwKIyAgICAgQ2hhbm5lbCBVUkwgZm9yIGZldGNoaW5nIGszcyBkb3dubG9hZCBVUkwuCiMgICAgIERlZmF1bHRzIHRvICdodHRwczovL3VwZGF0ZS5rM3MuaW8vdjEtcmVsZWFzZS9jaGFubmVscycuCiMKIyAgIC0gSU5TVEFMTF9LM1NfQ0hBTk5FTAojICAgICBDaGFubmVsIHRvIHVzZSBmb3IgZmV0Y2hpbmcgazNzIGRvd25sb2FkIFVSTC4KIyAgICAgRGVmYXVsdHMgdG8gJ3N0YWJsZScuCgpHSVRIVUJfVVJMPWh0dHBzOi8vZ2l0aHViLmNvbS9rM3MtaW8vazNzL3JlbGVhc2VzCkdJVEhVQl9QUl9VUkw9IiIKU1RPUkFHRV9VUkw9aHR0cHM6Ly9rM3MtY2ktYnVpbGRzLnMzLmFtYXpvbmF3cy5jb20KRE9XTkxPQURFUj0KCiMgLS0tIGhlbHBlciBmdW5jdGlvbnMgZm9yIGxvZ3MgLS0tCmluZm8oKQp7CiAgICBlY2hvICdbSU5GT10gJyAiJEAiCn0Kd2FybigpCnsKICAgIGVjaG8gJ1tXQVJOXSAnICIkQCIgPiYyCn0KZmF0YWwoKQp7CiAgICBlY2hvICdbRVJST1JdICcgIiRAIiA+JjIKICAgIGV4aXQgMQp9CgojIC0tLSBmYXRhbCBpZiBubyBzeXN0ZW1kIG9yIG9wZW5yYyAtLS0KdmVyaWZ5X3N5c3RlbSgpIHsKICAgIGlmIFsgLXggL3NiaW4vb3BlbnJjLXJ1biBdOyB0aGVuCiAgICAgICAgSEFTX09QRU5SQz10cnVlCiAgICAgICAgcmV0dXJuCiAgICBmaQogICAgaWYgWyAteCAvYmluL3N5c3RlbWN0bCBdIHx8IHR5cGUgc3lzdGVtY3RsID4gL2Rldi9udWxsIDI+JjE7IHRoZW4KICAgICAgICBIQVNfU1lTVEVNRD10cnVlCiAgICAgICAgcmV0dXJuCiAgICBmaQogICAgZmF0YWwgJ0NhbiBub3QgZmluZCBzeXN0ZW1kIG9yIG9wZW5yYyB0byB1c2UgYXMgYSBwcm9jZXNzIHN1cGVydmlzb3IgZm9yIGszcycKfQoKIyAtLS0gYWRkIHF1b3RlcyB0byBjb21tYW5kIGFyZ3VtZW50cyAtLS0KcXVvdGUoKSB7CiAgICBmb3IgYXJnIGluICIkQCI7IGRvCiAgICAgICAgcHJpbnRmICclc1xuJyAiJGFyZyIgfCBzZWQgInMvJy8nXFxcXCcnL2c7MXMvXi8nLztcJHMvXCQvJy8iCiAgICBkb25lCn0KCiMgLS0tIGFkZCBpbmRlbnRhdGlvbiBhbmQgdHJhaWxpbmcgc2xhc2ggdG8gcXVvdGVkIGFyZ3MgLS0tCnF1b3RlX2luZGVudCgpIHsKICAgIHByaW50ZiAnIFxcXG4nCiAgICBmb3IgYXJnIGluICIkQCI7IGRvCiAgICAgICAgcHJpbnRmICdcdCVzIFxcXG4nICIkKHF1b3RlICIkYXJnIikiCiAgICBkb25lCn0KCiMgLS0tIGVzY2FwZSBtb3N0IHB1bmN0dWF0aW9uIGNoYXJhY3RlcnMsIGV4Y2VwdCBxdW90ZXMsIGZvcndhcmQgc2xhc2gsIGFuZCBzcGFjZSAtLS0KZXNjYXBlKCkgewogICAgcHJpbnRmICclcycgIiRAIiB8IHNlZCAtZSAncy9cKFtdWyEjJCUmKCkqOzw9Pj9cX2B7fH1dXCkvXFxcMS9nOycKfQoKIyAtLS0gZXNjYXBlIGRvdWJsZSBxdW90ZXMgLS0tCmVzY2FwZV9kcSgpIHsKICAgIHByaW50ZiAnJXMnICIkQCIgfCBzZWQgLWUgJ3MvIi9cXCIvZycKfQoKIyAtLS0gZW5zdXJlcyAkSzNTX1VSTCBpcyBlbXB0eSBvciBiZWdpbnMgd2l0aCBodHRwczovLywgZXhpdGluZyBmYXRhbGx5IG90aGVyd2lzZSAtLS0KdmVyaWZ5X2szc191cmwoKSB7CiAgICBjYXNlICIke0szU19VUkx9IiBpbgogICAgICAgICIiKQogICAgICAgICAgICA7OwogICAgICAgIGh0dHBzOi8vKikKICAgICAgICAgICAgOzsKICAgICAgICAqKQogICAgICAgICAgICBmYXRhbCAiT25seSBodHRwczovLyBVUkxzIGFyZSBzdXBwb3J0ZWQgZm9yIEszU19VUkwgKGhhdmUgJHtLM1NfVVJMfSkiCiAgICAgICAgICAgIDs7CiAgICBlc2FjCn0KCiMgLS0tIGRlZmluZSBuZWVkZWQgZW52aXJvbm1lbnQgdmFyaWFibGVzIC0tLQpzZXR1cF9lbnYoKSB7CiAgICAjIC0tLSB1c2UgY29tbWFuZCBhcmdzIGlmIHBhc3NlZCBvciBjcmVhdGUgZGVmYXVsdCAtLS0KICAgIGNhc2UgIiQxIiBpbgogICAgICAgICMgLS0tIGlmIHdlIG9ubHkgaGF2ZSBmbGFncyBkaXNjb3ZlciBpZiBjb21tYW5kIHNob3VsZCBiZSBzZXJ2ZXIgb3IgYWdlbnQgLS0tCiAgICAgICAgKC0qfCIiKQogICAgICAgICAgICBpZiBbIC16ICIke0szU19VUkx9IiBdOyB0aGVuCiAgICAgICAgICAgICAgICBDTURfSzNTPXNlcnZlcgogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBpZiBbIC16ICIke0szU19UT0tFTn0iIF0gJiYgWyAteiAiJHtLM1NfVE9LRU5fRklMRX0iIF07IHRoZW4KICAgICAgICAgICAgICAgICAgICBmYXRhbCAiRGVmYXVsdGVkIGszcyBleGVjIGNvbW1hbmQgdG8gJ2FnZW50JyBiZWNhdXNlIEszU19VUkwgaXMgZGVmaW5lZCwgYnV0IEszU19UT0tFTiBvciBLM1NfVE9LRU5fRklMRSBpcyBub3QgZGVmaW5lZC4iCiAgICAgICAgICAgICAgICBmaQogICAgICAgICAgICAgICAgQ01EX0szUz1hZ2VudAogICAgICAgICAgICBmaQogICAgICAgIDs7CiAgICAgICAgIyAtLS0gY29tbWFuZCBpcyBwcm92aWRlZCAtLS0KICAgICAgICAoKikKICAgICAgICAgICAgQ01EX0szUz0kMQogICAgICAgICAgICBzaGlmdAogICAgICAgIDs7CiAgICBlc2FjCgogICAgdmVyaWZ5X2szc191cmwKCiAgICBDTURfSzNTX0VYRUM9IiR7Q01EX0szU30kKHF1b3RlX2luZGVudCAiJEAiKSIKCiAgICAjIC0tLSB1c2Ugc3lzdGVtZCBuYW1lIGlmIGRlZmluZWQgb3IgY3JlYXRlIGRlZmF1bHQgLS0tCiAgICBpZiBbIC1uICIke0lOU1RBTExfSzNTX05BTUV9IiBdOyB0aGVuCiAgICAgICAgU1lTVEVNX05BTUU9azNzLSR7SU5TVEFMTF9LM1NfTkFNRX0KICAgIGVsc2UKICAgICAgICBpZiBbICIke0NNRF9LM1N9IiA9IHNlcnZlciBdOyB0aGVuCiAgICAgICAgICAgIFNZU1RFTV9OQU1FPWszcwogICAgICAgIGVsc2UKICAgICAgICAgICAgU1lTVEVNX05BTUU9azNzLSR7Q01EX0szU30KICAgICAgICBmaQogICAgZmkKCiAgICAjIC0tLSBjaGVjayBmb3IgaW52YWxpZCBjaGFyYWN0ZXJzIGluIHN5c3RlbSBuYW1lIC0tLQogICAgdmFsaWRfY2hhcnM9JChwcmludGYgJyVzJyAiJHtTWVNURU1fTkFNRX0iIHwgc2VkIC1lICdzL1tdWyEjJCUmKCkqOzw9Pj9cX2B7fH0vWzpzcGFjZTpdXS9eL2c7JyApCiAgICBpZiBbICIke1NZU1RFTV9OQU1FfSIgIT0gIiR7dmFsaWRfY2hhcnN9IiAgXTsgdGhlbgogICAgICAgIGludmFsaWRfY2hhcnM9JChwcmludGYgJyVzJyAiJHt2YWxpZF9jaGFyc30iIHwgc2VkIC1lICdzL1teXl0vIC9nJykKICAgICAgICBmYXRhbCAiSW52YWxpZCBjaGFyYWN0ZXJzIGZvciBzeXN0ZW0gbmFtZToKICAgICAgICAgICAgJHtTWVNURU1fTkFNRX0KICAgICAgICAgICAgJHtpbnZhbGlkX2NoYXJzfSIKICAgIGZpCgogICAgIyAtLS0gdXNlIHN1ZG8gaWYgd2UgYXJlIG5vdCBhbHJlYWR5IHJvb3QgLS0tCiAgICBTVURPPXN1ZG8KICAgIGlmIFsgJChpZCAtdSkgLWVxIDAgXTsgdGhlbgogICAgICAgIFNVRE89CiAgICBmaQoKICAgICMgLS0tIHVzZSBzeXN0ZW1kIHR5cGUgaWYgZGVmaW5lZCBvciBjcmVhdGUgZGVmYXVsdCAtLS0KICAgIGlmIFsgLW4gIiR7SU5TVEFMTF9LM1NfVFlQRX0iIF07IHRoZW4KICAgICAgICBTWVNURU1EX1RZUEU9JHtJTlNUQUxMX0szU19UWVBFfQogICAgZWxzZQogICAgICAgIFNZU1RFTURfVFlQRT1ub3RpZnkKICAgIGZpCgogICAgIyAtLS0gdXNlIGJpbmFyeSBpbnN0YWxsIGRpcmVjdG9yeSBpZiBkZWZpbmVkIG9yIGNyZWF0ZSBkZWZhdWx0IC0tLQogICAgaWYgWyAtbiAiJHtJTlNUQUxMX0szU19CSU5fRElSfSIgXTsgdGhlbgogICAgICAgIEJJTl9ESVI9JHtJTlNUQUxMX0szU19CSU5fRElSfQogICAgZWxzZQogICAgICAgICMgLS0tIHVzZSAvdXNyL2xvY2FsL2JpbiBpZiByb290IGNhbiB3cml0ZSB0byBpdCwgb3RoZXJ3aXNlIHVzZSAvb3B0L2JpbiBpZiBpdCBleGlzdHMKICAgICAgICBCSU5fRElSPS91c3IvbG9jYWwvYmluCiAgICAgICAgaWYgISAkU1VETyBzaCAtYyAidG91Y2ggJHtCSU5fRElSfS9rM3Mtcm8tdGVzdCAmJiBybSAtcmYgJHtCSU5fRElSfS9rM3Mtcm8tdGVzdCI7IHRoZW4KICAgICAgICAgICAgaWYgWyAtZCAvb3B0L2JpbiBdOyB0aGVuCiAgICAgICAgICAgICAgICBCSU5fRElSPS9vcHQvYmluCiAgICAgICAgICAgIGZpCiAgICAgICAgZmkKICAgIGZpCgogICAgIyAtLS0gdXNlIHN5c3RlbWQgZGlyZWN0b3J5IGlmIGRlZmluZWQgb3IgY3JlYXRlIGRlZmF1bHQgLS0tCiAgICBpZiBbIC1uICIke0lOU1RBTExfSzNTX1NZU1RFTURfRElSfSIgXTsgdGhlbgogICAgICAgIFNZU1RFTURfRElSPSIke0lOU1RBTExfSzNTX1NZU1RFTURfRElSfSIKICAgIGVsc2UKICAgICAgICBTWVNURU1EX0RJUj0vZXRjL3N5c3RlbWQvc3lzdGVtCiAgICBmaQoKICAgICMgLS0tIHNldCByZWxhdGVkIGZpbGVzIGZyb20gc3lzdGVtIG5hbWUgLS0tCiAgICBTRVJWSUNFX0szUz0ke1NZU1RFTV9OQU1FfS5zZXJ2aWNlCiAgICBVTklOU1RBTExfSzNTX1NIPSR7VU5JTlNUQUxMX0szU19TSDotJHtCSU5fRElSfS8ke1NZU1RFTV9OQU1FfS11bmluc3RhbGwuc2h9CiAgICBLSUxMQUxMX0szU19TSD0ke0tJTExBTExfSzNTX1NIOi0ke0JJTl9ESVJ9L2szcy1raWxsYWxsLnNofQoKICAgICMgLS0tIHVzZSBzZXJ2aWNlIG9yIGVudmlyb25tZW50IGxvY2F0aW9uIGRlcGVuZGluZyBvbiBzeXN0ZW1kL29wZW5yYyAtLS0KICAgIGlmIFsgIiR7SEFTX1NZU1RFTUR9IiA9IHRydWUgXTsgdGhlbgogICAgICAgIEZJTEVfSzNTX1NFUlZJQ0U9JHtTWVNURU1EX0RJUn0vJHtTRVJWSUNFX0szU30KICAgICAgICBGSUxFX0szU19FTlY9JHtTWVNURU1EX0RJUn0vJHtTRVJWSUNFX0szU30uZW52CiAgICBlbGlmIFsgIiR7SEFTX09QRU5SQ30iID0gdHJ1ZSBdOyB0aGVuCiAgICAgICAgJFNVRE8gbWtkaXIgLXAgL2V0Yy9yYW5jaGVyL2szcwogICAgICAgIEZJTEVfSzNTX1NFUlZJQ0U9L2V0Yy9pbml0LmQvJHtTWVNURU1fTkFNRX0KICAgICAgICBGSUxFX0szU19FTlY9L2V0Yy9yYW5jaGVyL2szcy8ke1NZU1RFTV9OQU1FfS5lbnYKICAgIGZpCgogICAgIyAtLS0gZ2V0IGhhc2ggb2YgY29uZmlnICYgZXhlYyBmb3IgY3VycmVudGx5IGluc3RhbGxlZCBrM3MgLS0tCiAgICBQUkVfSU5TVEFMTF9IQVNIRVM9JChnZXRfaW5zdGFsbGVkX2hhc2hlcykKCiAgICAjIC0tLSBpZiBiaW4gZGlyZWN0b3J5IGlzIHJlYWQgb25seSBza2lwIGRvd25sb2FkIC0tLQogICAgaWYgWyAiJHtJTlNUQUxMX0szU19CSU5fRElSX1JFQURfT05MWX0iID0gdHJ1ZSBdOyB0aGVuCiAgICAgICAgSU5TVEFMTF9LM1NfU0tJUF9ET1dOTE9BRD10cnVlCiAgICBmaQoKICAgICMgLS0tIHNldHVwIGNoYW5uZWwgdmFsdWVzCiAgICBJTlNUQUxMX0szU19DSEFOTkVMX1VSTD0ke0lOU1RBTExfSzNTX0NIQU5ORUxfVVJMOi0naHR0cHM6Ly91cGRhdGUuazNzLmlvL3YxLXJlbGVhc2UvY2hhbm5lbHMnfQogICAgSU5TVEFMTF9LM1NfQ0hBTk5FTD0ke0lOU1RBTExfSzNTX0NIQU5ORUw6LSdzdGFibGUnfQp9CgojIC0tLSBjaGVjayBpZiBza2lwIGRvd25sb2FkIGVudmlyb25tZW50IHZhcmlhYmxlIHNldCAtLS0KY2FuX3NraXBfZG93bmxvYWRfYmluYXJ5KCkgewogICAgaWYgWyAiJHtJTlNUQUxMX0szU19TS0lQX0RPV05MT0FEfSIgIT0gdHJ1ZSBdICYmIFsgIiR7SU5TVEFMTF9LM1NfU0tJUF9ET1dOTE9BRH0iICE9IGJpbmFyeSBdOyB0aGVuCiAgICAgICAgcmV0dXJuIDEKICAgIGZpCn0KCmNhbl9za2lwX2Rvd25sb2FkX3NlbGludXgoKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIGlmIFsgIiR7SU5TVEFMTF9LM1NfU0tJUF9ET1dOTE9BRH0iICE9IHRydWUgXSAmJiBbICIke0lOU1RBTExfSzNTX1NLSVBfRE9XTkxPQUR9IiAhPSBzZWxpbnV4IF07IHRoZW4gCiAgICAgICAgcmV0dXJuIDEgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgIGZpICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAp9ICAKCiMgLS0tIHZlcmlmeSBhbiBleGVjdXRhYmxlIGszcyBiaW5hcnkgaXMgaW5zdGFsbGVkIC0tLQp2ZXJpZnlfazNzX2lzX2V4ZWN1dGFibGUoKSB7CiAgICBpZiBbICEgLXggJHtCSU5fRElSfS9rM3MgXTsgdGhlbgogICAgICAgIGZhdGFsICJFeGVjdXRhYmxlIGszcyBiaW5hcnkgbm90IGZvdW5kIGF0ICR7QklOX0RJUn0vazNzIgogICAgZmkKfQoKIyAtLS0gc2V0IGFyY2ggYW5kIHN1ZmZpeCwgZmF0YWwgaWYgYXJjaGl0ZWN0dXJlIG5vdCBzdXBwb3J0ZWQgLS0tCnNldHVwX3ZlcmlmeV9hcmNoKCkgewogICAgaWYgWyAteiAiJEFSQ0giIF07IHRoZW4KICAgICAgICBBUkNIPSQodW5hbWUgLW0pCiAgICBmaQogICAgY2FzZSAkQVJDSCBpbgogICAgICAgIGFtZDY0KQogICAgICAgICAgICBBUkNIPWFtZDY0CiAgICAgICAgICAgIFNVRkZJWD0KICAgICAgICAgICAgOzsKICAgICAgICB4ODZfNjQpCiAgICAgICAgICAgIEFSQ0g9YW1kNjQKICAgICAgICAgICAgU1VGRklYPQogICAgICAgICAgICA7OwogICAgICAgIGFybTY0KQogICAgICAgICAgICBBUkNIPWFybTY0CiAgICAgICAgICAgIFNVRkZJWD0tJHtBUkNIfQogICAgICAgICAgICA7OwogICAgICAgIHMzOTB4KQogICAgICAgICAgICBBUkNIPXMzOTB4CiAgICAgICAgICAgIFNVRkZJWD0tJHtBUkNIfQogICAgICAgICAgICA7OwogICAgICAgIGFhcmNoNjQpCiAgICAgICAgICAgIEFSQ0g9YXJtNjQKICAgICAgICAgICAgU1VGRklYPS0ke0FSQ0h9CiAgICAgICAgICAgIDs7CiAgICAgICAgYXJtKikKICAgICAgICAgICAgQVJDSD1hcm0KICAgICAgICAgICAgU1VGRklYPS0ke0FSQ0h9aGYKICAgICAgICAgICAgOzsKICAgICAgICAqKQogICAgICAgICAgICBmYXRhbCAiVW5zdXBwb3J0ZWQgYXJjaGl0ZWN0dXJlICRBUkNIIgogICAgZXNhYwp9CgojIC0tLSB2ZXJpZnkgZXhpc3RlbmNlIG9mIG5ldHdvcmsgZG93bmxvYWRlciBleGVjdXRhYmxlIC0tLQp2ZXJpZnlfZG93bmxvYWRlcigpIHsKICAgICMgUmV0dXJuIGZhaWx1cmUgaWYgaXQgZG9lc24ndCBleGlzdCBvciBpcyBubyBleGVjdXRhYmxlCiAgICBbIC14ICIkKGNvbW1hbmQgLXYgJDEpIiBdIHx8IHJldHVybiAxCgogICAgIyBTZXQgdmVyaWZpZWQgZXhlY3V0YWJsZSBhcyBvdXIgZG93bmxvYWRlciBwcm9ncmFtIGFuZCByZXR1cm4gc3VjY2VzcwogICAgRE9XTkxPQURFUj0kMQogICAgcmV0dXJuIDAKfQoKIyAtLS0gY3JlYXRlIHRlbXBvcmFyeSBkaXJlY3RvcnkgYW5kIGNsZWFudXAgd2hlbiBkb25lIC0tLQpzZXR1cF90bXAoKSB7CiAgICBUTVBfRElSPSQobWt0ZW1wIC1kIC10IGszcy1pbnN0YWxsLlhYWFhYWFhYWFgpCiAgICBUTVBfSEFTSD0ke1RNUF9ESVJ9L2szcy5oYXNoCiAgICBUTVBfWklQPSR7VE1QX0RJUn0vazNzLnppcAogICAgVE1QX0JJTj0ke1RNUF9ESVJ9L2szcy5iaW4KICAgIGNsZWFudXAoKSB7CiAgICAgICAgY29kZT0kPwogICAgICAgIHNldCArZQogICAgICAgIHRyYXAgLSBFWElUCiAgICAgICAgcm0gLXJmICR7VE1QX0RJUn0KICAgICAgICBleGl0ICRjb2RlCiAgICB9CiAgICB0cmFwIGNsZWFudXAgSU5UIEVYSVQKfQoKIyAtLS0gdXNlIGRlc2lyZWQgazNzIHZlcnNpb24gaWYgZGVmaW5lZCBvciBmaW5kIHZlcnNpb24gZnJvbSBjaGFubmVsIC0tLQpnZXRfcmVsZWFzZV92ZXJzaW9uKCkgewogICAgaWYgWyAtbiAiJHtJTlNUQUxMX0szU19QUn0iIF07IHRoZW4KICAgICAgICBWRVJTSU9OX0szUz0iUFIgJHtJTlNUQUxMX0szU19QUn0iCiAgICAgICAgZ2V0X3ByX2FydGlmYWN0X3VybAogICAgZWxpZiBbIC1uICIke0lOU1RBTExfSzNTX0NPTU1JVH0iIF07IHRoZW4KICAgICAgICBWRVJTSU9OX0szUz0iY29tbWl0ICR7SU5TVEFMTF9LM1NfQ09NTUlUfSIKICAgIGVsaWYgWyAtbiAiJHtJTlNUQUxMX0szU19WRVJTSU9OfSIgXTsgdGhlbgogICAgICAgIFZFUlNJT05fSzNTPSR7SU5TVEFMTF9LM1NfVkVSU0lPTn0KICAgIGVsc2UKICAgICAgICBpbmZvICJGaW5kaW5nIHJlbGVhc2UgZm9yIGNoYW5uZWwgJHtJTlNUQUxMX0szU19DSEFOTkVMfSIKICAgICAgICB2ZXJzaW9uX3VybD0iJHtJTlNUQUxMX0szU19DSEFOTkVMX1VSTH0vJHtJTlNUQUxMX0szU19DSEFOTkVMfSIKICAgICAgICBjYXNlICRET1dOTE9BREVSIGluCiAgICAgICAgICAgIGN1cmwpCiAgICAgICAgICAgICAgICBWRVJTSU9OX0szUz0kKGN1cmwgLXcgJyV7dXJsX2VmZmVjdGl2ZX0nIC1MIC1zIC1TICR7dmVyc2lvbl91cmx9IC1vIC9kZXYvbnVsbCB8IHNlZCAtZSAnc3wuKi98fCcpCiAgICAgICAgICAgICAgICA7OwogICAgICAgICAgICB3Z2V0KQogICAgICAgICAgICAgICAgVkVSU0lPTl9LM1M9JCh3Z2V0IC1TcU8gL2Rldi9udWxsICR7dmVyc2lvbl91cmx9IDI+JjEgfCBncmVwIC1pIExvY2F0aW9uIHwgc2VkIC1lICdzfC4qL3x8JykKICAgICAgICAgICAgICAgIDs7CiAgICAgICAgICAgICopCiAgICAgICAgICAgICAgICBmYXRhbCAiSW5jb3JyZWN0IGRvd25sb2FkZXIgZXhlY3V0YWJsZSAnJERPV05MT0FERVInIgogICAgICAgICAgICAgICAgOzsKICAgICAgICBlc2FjCiAgICBmaQogICAgaW5mbyAiVXNpbmcgJHtWRVJTSU9OX0szU30gYXMgcmVsZWFzZSIKfQoKIyAtLS0gZ2V0IGszcy1zZWxpbnV4IHZlcnNpb24gLS0tCmdldF9rM3Nfc2VsaW51eF92ZXJzaW9uKCkgewogICAgYXZhaWxhYmxlX3ZlcnNpb249Imszcy1zZWxpbnV4LTEuMi0yLiR7cnBtX3RhcmdldH0ubm9hcmNoLnJwbSIKICAgIGluZm8gIkZpbmRpbmcgYXZhaWxhYmxlIGszcy1zZWxpbnV4IHZlcnNpb25zIgogICAgCiAgICAjIHJ1biB2ZXJpZnlfZG93bmxvYWRlciBpbiBjYXNlIGl0IGJpbmFyeSBpbnN0YWxsYXRpb24gd2FzIHNraXBwZWQKICAgIHZlcmlmeV9kb3dubG9hZGVyIGN1cmwgfHwgdmVyaWZ5X2Rvd25sb2FkZXIgd2dldCB8fCBmYXRhbCAnQ2FuIG5vdCBmaW5kIGN1cmwgb3Igd2dldCBmb3IgZG93bmxvYWRpbmcgZmlsZXMnCgogICAgY2FzZSAkRE9XTkxPQURFUiBpbgogICAgICAgIGN1cmwpCiAgICAgICAgICAgIERPV05MT0FERVJfT1BUUz0iLXMiCiAgICAgICAgICAgIDs7CiAgICAgICAgd2dldCkKICAgICAgICAgICAgRE9XTkxPQURFUl9PUFRTPSItcSAtTyAtIgogICAgICAgICAgICA7OwogICAgICAgICopCiAgICAgICAgICAgIGZhdGFsICJJbmNvcnJlY3QgZG93bmxvYWRlciBleGVjdXRhYmxlICckRE9XTkxPQURFUiciCiAgICAgICAgICAgIDs7CiAgICBlc2FjCiAgICBmb3IgaSBpbiB7MS4uM307IGRvCiAgICAgICAgc2V0ICtlCiAgICAgICAgaWYgWyAiJHtycG1fY2hhbm5lbH0iID0gInRlc3RpbmciIF07IHRoZW4KICAgICAgICAgICAgdmVyc2lvbj0kKHRpbWVvdXQgNSAke0RPV05MT0FERVJ9ICR7RE9XTkxPQURFUl9PUFRTfSBodHRwczovL2FwaS5naXRodWIuY29tL3JlcG9zL2szcy1pby9rM3Mtc2VsaW51eC9yZWxlYXNlcyB8ICBncmVwIGJyb3dzZXJfZG93bmxvYWRfdXJsIHwgYXdrICd7IHByaW50ICQyIH0nIHwgZ3JlcCAtb0UgIlteXC9dKyR7cnBtX3RhcmdldH1cLm5vYXJjaFwucnBtIiB8IGhlYWQgLW4gMSkKICAgICAgICBlbHNlCiAgICAgICAgICAgIHZlcnNpb249JCh0aW1lb3V0IDUgJHtET1dOTE9BREVSfSAke0RPV05MT0FERVJfT1BUU30gaHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9yZXBvcy9rM3MtaW8vazNzLXNlbGludXgvcmVsZWFzZXMvbGF0ZXN0IHwgIGdyZXAgYnJvd3Nlcl9kb3dubG9hZF91cmwgfCBhd2sgJ3sgcHJpbnQgJDIgfScgfCBncmVwIC1vRSAiW15cL10rJHtycG1fdGFyZ2V0fVwubm9hcmNoXC5ycG0iKQogICAgICAgIGZpCiAgICAgICAgc2V0IC1lCiAgICAgICAgaWYgWyAiJHt2ZXJzaW9ufSIgIT0gIiIgXTsgdGhlbgogICAgICAgICAgICBicmVhawogICAgICAgIGZpCiAgICAgICAgc2xlZXAgMQogICAgZG9uZQogICAgaWYgWyAiJHt2ZXJzaW9ufSIgPT0gIiIgXTsgdGhlbgogICAgICAgIHdhcm4gIkZhaWxlZCB0byBnZXQgYXZhaWxhYmxlIHZlcnNpb25zIG9mIGszcy1zZWxpbnV4Li5kZWZhdWx0aW5nIHRvICR7YXZhaWxhYmxlX3ZlcnNpb259IgogICAgICAgIHJldHVybgogICAgZmkKICAgIGF2YWlsYWJsZV92ZXJzaW9uPSR7dmVyc2lvbn0KfQoKIyAtLS0gZG93bmxvYWQgZnJvbSBnaXRodWIgdXJsIC0tLQpkb3dubG9hZCgpIHsKICAgIFsgJCMgLWVxIDIgXSB8fCBmYXRhbCAnZG93bmxvYWQgbmVlZHMgZXhhY3RseSAyIGFyZ3VtZW50cycKICAgIHNldCArZQogICAgY2FzZSAkRE9XTkxPQURFUiBpbgogICAgICAgIGN1cmwpCiAgICAgICAgICAgIGN1cmwgLW8gJDEgLXNmTCAkMgogICAgICAgICAgICA7OwogICAgICAgIHdnZXQpCiAgICAgICAgICAgIHdnZXQgLXFPICQxICQyCiAgICAgICAgICAgIDs7CiAgICAgICAgKikKICAgICAgICAgICAgZmF0YWwgIkluY29ycmVjdCBleGVjdXRhYmxlICckRE9XTkxPQURFUiciCiAgICAgICAgICAgIDs7CiAgICBlc2FjCgogICAgIyBBYm9ydCBpZiBkb3dubG9hZCBjb21tYW5kIGZhaWxlZAogICAgWyAkPyAtZXEgMCBdIHx8IGZhdGFsICdEb3dubG9hZCBmYWlsZWQnCiAgICBzZXQgLWUKfQoKIyAtLS0gZG93bmxvYWQgaGFzaCBmcm9tIGdpdGh1YiB1cmwgLS0tCmRvd25sb2FkX2hhc2goKSB7CiAgICBpZiBbIC1uICIke0lOU1RBTExfSzNTX1BSfSIgXTsgdGhlbgogICAgICAgIGluZm8gIkRvd25sb2FkaW5nIGhhc2ggJHtHSVRIVUJfUFJfVVJMfSIKICAgICAgICBjdXJsIC1zIC1vICR7VE1QX1pJUH0gLUggIkF1dGhvcml6YXRpb246IEJlYXJlciAkR0lUSFVCX1RPS0VOIiAtTCAke0dJVEhVQl9QUl9VUkx9CiAgICAgICAgdW56aXAgLXAgJHtUTVBfWklQfSBrM3Muc2hhMjU2c3VtID4gJHtUTVBfSEFTSH0KICAgIGVsc2UKICAgICAgICBpZiBbIC1uICIke0lOU1RBTExfSzNTX0NPTU1JVH0iIF07IHRoZW4KICAgICAgICAgICAgSEFTSF9VUkw9JHtTVE9SQUdFX1VSTH0vazNzJHtTVUZGSVh9LSR7SU5TVEFMTF9LM1NfQ09NTUlUfS5zaGEyNTZzdW0KICAgICAgICBlbHNlCiAgICAgICAgICAgIEhBU0hfVVJMPSR7R0lUSFVCX1VSTH0vZG93bmxvYWQvJHtWRVJTSU9OX0szU30vc2hhMjU2c3VtLSR7QVJDSH0udHh0CiAgICAgICAgZmkKICAgICAgICBpbmZvICJEb3dubG9hZGluZyBoYXNoICR7SEFTSF9VUkx9IgogICAgICAgIGRvd25sb2FkICR7VE1QX0hBU0h9ICR7SEFTSF9VUkx9CiAgICBmaQogICAgSEFTSF9FWFBFQ1RFRD0kKGdyZXAgIiBrM3Mke1NVRkZJWH0kIiAke1RNUF9IQVNIfSkKICAgIEhBU0hfRVhQRUNURUQ9JHtIQVNIX0VYUEVDVEVEJSVbWzpibGFuazpdXSp9Cn0KCiMgLS0tIGNoZWNrIGhhc2ggYWdhaW5zdCBpbnN0YWxsZWQgdmVyc2lvbiAtLS0KaW5zdGFsbGVkX2hhc2hfbWF0Y2hlcygpIHsKICAgIGlmIFsgLXggJHtCSU5fRElSfS9rM3MgXTsgdGhlbgogICAgICAgIEhBU0hfSU5TVEFMTEVEPSQoc2hhMjU2c3VtICR7QklOX0RJUn0vazNzKQogICAgICAgIEhBU0hfSU5TVEFMTEVEPSR7SEFTSF9JTlNUQUxMRUQlJVtbOmJsYW5rOl1dKn0KICAgICAgICBpZiBbICIke0hBU0hfRVhQRUNURUR9IiA9ICIke0hBU0hfSU5TVEFMTEVEfSIgXTsgdGhlbgogICAgICAgICAgICByZXR1cm4KICAgICAgICBmaQogICAgZmkKICAgIHJldHVybiAxCn0KCiMgVXNlIHRoZSBHaXRIdWIgQVBJIHRvIGlkZW50aWZ5IHRoZSBhcnRpZmFjdCBhc3NvY2lhdGVkIHdpdGggYSBnaXZlbiBQUgpnZXRfcHJfYXJ0aWZhY3RfdXJsKCkgewogICAgZ2l0aHViX2FwaV91cmw9aHR0cHM6Ly9hcGkuZ2l0aHViLmNvbS9yZXBvcy9rM3MtaW8vazNzCgogICAgIyBDaGVjayBpZiBqcSBpcyBpbnN0YWxsZWQKICAgIGlmICEgWyAteCAiJChjb21tYW5kIC12IGpxKSIgXTsgdGhlbgogICAgICAgIGZhdGFsICJJbnN0YWxsaW5nIFBSIGJ1aWxkcyByZXF1aXJlcyBqcSIKICAgIGZpCgogICAgIyBDaGVjayBpZiB1bnppcCBpcyBpbnN0YWxsZWQKICAgIGlmICEgWyAteCAiJChjb21tYW5kIC12IHVuemlwKSIgXTsgdGhlbgogICAgICAgIGZhdGFsICJJbnN0YWxsaW5nIFBSIGJ1aWxkcyByZXF1aXJlcyB1bnppcCIKICAgIGZpCgogICAgaWYgWyAteiAiJHtHSVRIVUJfVE9LRU59IiBdOyB0aGVuCiAgICAgICAgZmF0YWwgIkluc3RhbGxpbmcgUFIgYnVpbGRzIHJlcXVpcmVzIEdJVEhVQl9UT0tFTiB3aXRoIGszcy1pby9rM3MgcmVwbyBwZXJtaXNzaW9ucyIKICAgIGZpCgogICAgIyBHRVQgcmVxdWVzdCB0byB0aGUgR2l0SHViIEFQSSB0byByZXRyaWV2ZSB0aGUgbGF0ZXN0IGNvbW1pdCBTSEEgZnJvbSB0aGUgcHVsbCByZXF1ZXN0CiAgICBzZXQgK2UKICAgIGNvbW1pdF9pZD0kKGN1cmwgLWYgLXMgLUggIkF1dGhvcml6YXRpb246IEJlYXJlciAke0dJVEhVQl9UT0tFTn0iICIke2dpdGh1Yl9hcGlfdXJsfS9wdWxscy8ke0lOU1RBTExfSzNTX1BSfSIgfCBqcSAtciAnLmhlYWQuc2hhJykKICAgIHNldCAtZQoKICAgIGlmIFsgLXogIiR7Y29tbWl0X2lkfSIgXTsgdGhlbgogICAgICAgIGZhdGFsICJJbnN0YWxsaW5nIFBSIGJ1aWxkcyByZXF1aXJlcyBHSVRIVUJfVE9LRU4gd2l0aCBrM3MtaW8vazNzIHJlcG8gcGVybWlzc2lvbnMiCiAgICBmaQogICAgCiAgICAjIEdFVCByZXF1ZXN0IHRvIHRoZSBHaXRIdWIgQVBJIHRvIHJldHJpZXZlIHRoZSBCdWlsZCB3b3JrZmxvdyBhc3NvY2lhdGVkIHdpdGggdGhlIGNvbW1pdAogICAgd2ZfcmF3PSQoY3VybCAtcyAtSCAiQXV0aG9yaXphdGlvbjogQmVhcmVyICR7R0lUSFVCX1RPS0VOfSIgIiR7Z2l0aHViX2FwaV91cmx9L2NvbW1pdHMvJHtjb21taXRfaWR9L2NoZWNrLXJ1bnMiKQogICAgYnVpbGRfd29ya2Zsb3c9JChwcmludGYgIiVzIiAiJHt3Zl9yYXd9IiB8IGpxIC1yICcuY2hlY2tfcnVuc1tdIHwgIHNlbGVjdCgubmFtZSA9PSAiYnVpbGQgLyBCdWlsZCIpJykKICAgIAogICAgIyBFeHRyYWN0IHRoZSBSdW4gSUQgZnJvbSB0aGUgYnVpbGQgd29ya2Zsb3cgYW5kIGxvb2t1cCBhcnRpZmFjdHMgYXNzb2NpYXRlZCB3aXRoIHRoZSBydW4KICAgIHJ1bl9pZD0kKGVjaG8gIiR7YnVpbGRfd29ya2Zsb3d9IiB8IGpxIC1yICcgLmRldGFpbHNfdXJsJyB8IGF3ayAtRicvJyAne3ByaW50ICQoTkYtMil9JyB8IHNvcnQgLXJuIHwgaGVhZCAtMSkKCiAgICAjIEV4dHJhY3QgdGhlIGFydGlmYWN0IElEIGZvciB0aGUgImszcyIgYXJ0aWZhY3QgICAgCiAgICBhcnRpZmFjdHM9JChjdXJsIC1zIC1IICJBdXRob3JpemF0aW9uOiBCZWFyZXIgJHtHSVRIVUJfVE9LRU59IiAiJHtnaXRodWJfYXBpX3VybH0vYWN0aW9ucy9ydW5zLyR7cnVuX2lkfS9hcnRpZmFjdHMiKQogICAgYXJ0aWZhY3RzX3VybD0kKGVjaG8gIiR7YXJ0aWZhY3RzfSIgfCBqcSAtciAnLmFydGlmYWN0c1tdIHwgc2VsZWN0KC5uYW1lID09ICJrM3MiKSB8IC5hcmNoaXZlX2Rvd25sb2FkX3VybCcpCiAgICBHSVRIVUJfUFJfVVJMPSIke2FydGlmYWN0c191cmx9Igp9CgojIC0tLSBkb3dubG9hZCBiaW5hcnkgZnJvbSBnaXRodWIgdXJsIC0tLQpkb3dubG9hZF9iaW5hcnkoKSB7CiAgICBpZiBbIC1uICIke0lOU1RBTExfSzNTX1BSfSIgXTsgdGhlbgogICAgICAgICMgU2luY2UgQmluYXJ5IGFuZCBIYXNoIGFyZSB6aXBwZWQgdG9nZXRoZXIsIGNoZWNrIGlmIFRNUF9aSVAgYWxyZWFkeSBleGlzdHMKICAgICAgICBpZiAhIFsgLWYgJHtUTVBfWklQfSBdOyB0aGVuCiAgICAgICAgICAgIGluZm8gIkRvd25sb2FkaW5nIEszcyBhcnRpZmFjdCAke0dJVEhVQl9QUl9VUkx9IgogICAgICAgICAgICBjdXJsIC1zIC1mIC1vICR7VE1QX1pJUH0gLUggIkF1dGhvcml6YXRpb246IEJlYXJlciAkR0lUSFVCX1RPS0VOIiAtTCAke0dJVEhVQl9QUl9VUkx9CiAgICAgICAgZmkKICAgICAgICAjIGV4dHJhY3QgazNzIGJpbmFyeSBmcm9tIHppcAogICAgICAgIHVuemlwIC1wICR7VE1QX1pJUH0gazNzID4gJHtUTVBfQklOfQogICAgICAgIHJldHVybgogICAgZWxpZiBbIC1uICIke0lOU1RBTExfSzNTX0NPTU1JVH0iIF07IHRoZW4KICAgICAgICBCSU5fVVJMPSR7U1RPUkFHRV9VUkx9L2szcyR7U1VGRklYfS0ke0lOU1RBTExfSzNTX0NPTU1JVH0KICAgIGVsc2UKICAgICAgICBCSU5fVVJMPSR7R0lUSFVCX1VSTH0vZG93bmxvYWQvJHtWRVJTSU9OX0szU30vazNzJHtTVUZGSVh9CiAgICBmaQogICAgaW5mbyAiRG93bmxvYWRpbmcgYmluYXJ5ICR7QklOX1VSTH0iCiAgICBkb3dubG9hZCAke1RNUF9CSU59ICR7QklOX1VSTH0KfQoKIyAtLS0gdmVyaWZ5IGRvd25sb2FkZWQgYmluYXJ5IGhhc2ggLS0tCnZlcmlmeV9iaW5hcnkoKSB7CiAgICBpbmZvICJWZXJpZnlpbmcgYmluYXJ5IGRvd25sb2FkIgogICAgSEFTSF9CSU49JChzaGEyNTZzdW0gJHtUTVBfQklOfSkKICAgIEhBU0hfQklOPSR7SEFTSF9CSU4lJVtbOmJsYW5rOl1dKn0KICAgIGlmIFsgIiR7SEFTSF9FWFBFQ1RFRH0iICE9ICIke0hBU0hfQklOfSIgXTsgdGhlbgogICAgICAgIGZhdGFsICJEb3dubG9hZCBzaGEyNTYgZG9lcyBub3QgbWF0Y2ggJHtIQVNIX0VYUEVDVEVEfSwgZ290ICR7SEFTSF9CSU59IgogICAgZmkKfQoKIyAtLS0gc2V0dXAgcGVybWlzc2lvbnMgYW5kIG1vdmUgYmluYXJ5IHRvIHN5c3RlbSBkaXJlY3RvcnkgLS0tCnNldHVwX2JpbmFyeSgpIHsKICAgIGNobW9kIDc1NSAke1RNUF9CSU59CiAgICBpbmZvICJJbnN0YWxsaW5nIGszcyB0byAke0JJTl9ESVJ9L2szcyIKICAgICRTVURPIGNob3duIHJvb3Q6cm9vdCAke1RNUF9CSU59CiAgICAkU1VETyBtdiAtZiAke1RNUF9CSU59ICR7QklOX0RJUn0vazNzCn0KCiMgLS0tIHNldHVwIHNlbGludXggcG9saWN5IC0tLQpzZXR1cF9zZWxpbnV4KCkgewogICAgY2FzZSAke0lOU1RBTExfSzNTX0NIQU5ORUx9IGluIAogICAgICAgICp0ZXN0aW5nKQogICAgICAgICAgICBycG1fY2hhbm5lbD10ZXN0aW5nCiAgICAgICAgICAgIDs7CiAgICAgICAgKmxhdGVzdCkKICAgICAgICAgICAgcnBtX2NoYW5uZWw9bGF0ZXN0CiAgICAgICAgICAgIDs7CiAgICAgICAgKikKICAgICAgICAgICAgcnBtX2NoYW5uZWw9c3RhYmxlCiAgICAgICAgICAgIDs7CiAgICBlc2FjCgogICAgcnBtX3NpdGU9InJwbS5yYW5jaGVyLmlvIgogICAgaWYgWyAiJHtycG1fY2hhbm5lbH0iID0gInRlc3RpbmciIF07IHRoZW4KICAgICAgICBycG1fc2l0ZT0icnBtLXRlc3RpbmcucmFuY2hlci5pbyIKICAgIGZpCgogICAgWyAtciAvZXRjL29zLXJlbGVhc2UgXSAmJiAuIC9ldGMvb3MtcmVsZWFzZQogICAgaWYgWyBgZXhwciAiJHtJRF9MSUtFfSIgOiAiLipzdXNlLioiYCAhPSAwIF07IHRoZW4KICAgICAgICBycG1fdGFyZ2V0PXNsZQogICAgICAgIHJwbV9zaXRlX2luZml4PW1pY3Jvb3MKICAgICAgICBwYWNrYWdlX2luc3RhbGxlcj16eXBwZXIKICAgICAgICBpZiBbICIke0lEX0xJS0U6LX0iID0gc3VzZSBdICYmICggWyAiJHtWQVJJQU5UX0lEOi19IiA9IHNsZS1taWNybyBdIHx8IFsgIiR7SUQ6LX0iID0gc2xlLW1pY3JvIF0gKTsgdGhlbgogICAgICAgICAgICBycG1fdGFyZ2V0PXNsZQogICAgICAgICAgICBycG1fc2l0ZV9pbmZpeD1zbGVtaWNybwogICAgICAgICAgICBwYWNrYWdlX2luc3RhbGxlcj16eXBwZXIKICAgICAgICBmaQogICAgZWxpZiBbICIke0lEX0xJS0U6LX0iID0gY29yZW9zIF0gfHwgWyAiJHtWQVJJQU5UX0lEOi19IiA9IGNvcmVvcyBdIHx8IFsgIiR7VkFSSUFOVF9JRDotfSIgPSAiaW90IiBdOyB0aGVuCiAgICAgICAgcnBtX3RhcmdldD1jb3Jlb3MKICAgICAgICBycG1fc2l0ZV9pbmZpeD1jb3Jlb3MKICAgICAgICBwYWNrYWdlX2luc3RhbGxlcj1ycG0tb3N0cmVlCiAgICBlbGlmIFsgIiR7VkVSU0lPTl9JRCUlLip9IiA9ICI3IiBdIHx8ICggWyAiJHtJRDotfSIgPSBhbXpuIF0gJiYgWyAiJHtWRVJTSU9OX0lEJSUuKn0iID0gIjIiIF0gKTsgdGhlbgogICAgICAgIHJwbV90YXJnZXQ9ZWw3CiAgICAgICAgcnBtX3NpdGVfaW5maXg9Y2VudG9zLzcKICAgICAgICBwYWNrYWdlX2luc3RhbGxlcj15dW0KICAgIGVsaWYgWyAiJHtWRVJTSU9OX0lEJSUuKn0iID0gIjgiIF0gfHwgWyAiJHtWRVJTSU9OX0lEJSUuKn0iID0gIlYxMCIgXSB8fCBbICIke1ZFUlNJT05fSUQlJS4qfSIgLWd0ICIzNiIgXTsgdGhlbgogICAgICAgIHJwbV90YXJnZXQ9ZWw4CiAgICAgICAgcnBtX3NpdGVfaW5maXg9Y2VudG9zLzgKICAgICAgICBwYWNrYWdlX2luc3RhbGxlcj15dW0KICAgIGVsc2UKICAgICAgICBycG1fdGFyZ2V0PWVsOQogICAgICAgIHJwbV9zaXRlX2luZml4PWNlbnRvcy85CiAgICAgICAgcGFja2FnZV9pbnN0YWxsZXI9eXVtCiAgICBmaQoKICAgIGlmIFsgIiR7cGFja2FnZV9pbnN0YWxsZXJ9IiA9ICJycG0tb3N0cmVlIiBdICYmIFsgLXggL2Jpbi95dW0gXTsgdGhlbgogICAgICAgIHBhY2thZ2VfaW5zdGFsbGVyPXl1bQogICAgZmkKCiAgICBpZiBbICIke3BhY2thZ2VfaW5zdGFsbGVyfSIgPSAieXVtIiBdICYmIFsgLXggL3Vzci9iaW4vZG5mIF07IHRoZW4KICAgICAgICBwYWNrYWdlX2luc3RhbGxlcj1kbmYKICAgIGZpCgogICAgcG9saWN5X2hpbnQ9InBsZWFzZSBpbnN0YWxsOgogICAgJHtwYWNrYWdlX2luc3RhbGxlcn0gaW5zdGFsbCAteSBjb250YWluZXItc2VsaW51eAogICAgJHtwYWNrYWdlX2luc3RhbGxlcn0gaW5zdGFsbCAteSBodHRwczovLyR7cnBtX3NpdGV9L2szcy8ke3JwbV9jaGFubmVsfS9jb21tb24vJHtycG1fc2l0ZV9pbmZpeH0vbm9hcmNoLyR7YXZhaWxhYmxlX3ZlcnNpb259CiIKCiAgICBpZiBbICIkSU5TVEFMTF9LM1NfU0tJUF9TRUxJTlVYX1JQTSIgPSB0cnVlIF0gfHwgY2FuX3NraXBfZG93bmxvYWRfc2VsaW51eCB8fCBbICEgLWQgL3Vzci9zaGFyZS9zZWxpbnV4IF07IHRoZW4KICAgICAgICBpbmZvICJTa2lwcGluZyBpbnN0YWxsYXRpb24gb2YgU0VMaW51eCBSUE0iCiAgICAgICAgcmV0dXJuCiAgICBmaQogICAgCiAgICBnZXRfazNzX3NlbGludXhfdmVyc2lvbgogICAgaW5zdGFsbF9zZWxpbnV4X3JwbSAke3JwbV9zaXRlfSAke3JwbV9jaGFubmVsfSAke3JwbV90YXJnZXR9ICR7cnBtX3NpdGVfaW5maXh9CgogICAgcG9saWN5X2Vycm9yPWZhdGFsCiAgICBpZiBbICIkSU5TVEFMTF9LM1NfU0VMSU5VWF9XQVJOIiA9IHRydWUgXSB8fCBbICIke0lEX0xJS0U6LX0iID0gY29yZW9zIF0gfHwgCiAgICAgICBbICIke1ZBUklBTlRfSUQ6LX0iID0gY29yZW9zIF0gfHwgWyAiJHtWQVJJQU5UX0lEOi19IiA9IGlvdCBdOyB0aGVuCiAgICAgICAgcG9saWN5X2Vycm9yPXdhcm4KICAgIGZpCgogICAgaWYgISAkU1VETyBjaGNvbiAtdSBzeXN0ZW1fdSAtciBvYmplY3RfciAtdCBjb250YWluZXJfcnVudGltZV9leGVjX3QgJHtCSU5fRElSfS9rM3MgPi9kZXYvbnVsbCAyPiYxOyB0aGVuCiAgICAgICAgaWYgJFNVRE8gZ3JlcCAnXlxzKlNFTElOVVg9ZW5mb3JjaW5nJyAvZXRjL3NlbGludXgvY29uZmlnID4vZGV2L251bGwgMj4mMTsgdGhlbgogICAgICAgICAgICAkcG9saWN5X2Vycm9yICJGYWlsZWQgdG8gYXBwbHkgY29udGFpbmVyX3J1bnRpbWVfZXhlY190IHRvICR7QklOX0RJUn0vazNzLCAke3BvbGljeV9oaW50fSIKICAgICAgICBmaQogICAgZWxpZiBbICEgLWYgL3Vzci9zaGFyZS9zZWxpbnV4L3BhY2thZ2VzL2szcy5wcCBdOyB0aGVuCiAgICAgICAgaWYgWyAteCAvdXNyL3NiaW4vdHJhbnNhY3Rpb25hbC11cGRhdGUgXSB8fCBbICIke0lEX0xJS0U6LX0iID0gY29yZW9zIF0gfHwgWyAiJHtWQVJJQU5UX0lEOi19IiA9IGNvcmVvcyBdIHx8IFsgIiR7VkFSSUFOVF9JRDotfSIgPSBpb3QgXTsgdGhlbgogICAgICAgICAgICB3YXJuICJQbGVhc2UgcmVib290IHlvdXIgbWFjaGluZSB0byBhY3RpdmF0ZSB0aGUgY2hhbmdlcyBhbmQgYXZvaWQgZGF0YSBsb3NzLiIKICAgICAgICBlbHNlCiAgICAgICAgICAgICRwb2xpY3lfZXJyb3IgIkZhaWxlZCB0byBmaW5kIHRoZSBrM3Mtc2VsaW51eCBwb2xpY3ksICR7cG9saWN5X2hpbnR9IgogICAgICAgIGZpCiAgICBmaQp9CgppbnN0YWxsX3NlbGludXhfcnBtKCkgewogICAgaWYgWyAtciAvZXRjL3JlZGhhdC1yZWxlYXNlIF0gfHwgWyAtciAvZXRjL2NlbnRvcy1yZWxlYXNlIF0gfHwgWyAtciAvZXRjL29yYWNsZS1yZWxlYXNlIF0gfHwgCiAgICAgICBbIC1yIC9ldGMvZmVkb3JhLXJlbGVhc2UgXSB8fCBbIC1yIC9ldGMvc3lzdGVtLXJlbGVhc2UgXSB8fCBbICIke0lEX0xJS0UlJVsgXSp9IiA9ICJzdXNlIiBdOyB0aGVuCiAgICAgICAgcmVwb2Rpcj0vZXRjL3l1bS5yZXBvcy5kCiAgICAgICAgaWYgWyAtZCAvZXRjL3p5cHAvcmVwb3MuZCBdOyB0aGVuCiAgICAgICAgICAgIHJlcG9kaXI9L2V0Yy96eXBwL3JlcG9zLmQKICAgICAgICBmaQogICAgICAgIHNldCArbyBub2dsb2IKICAgICAgICAkU1VETyBybSAtZiAke3JlcG9kaXJ9L3JhbmNoZXItazNzLWNvbW1vbioucmVwbwogICAgICAgIHNldCAtbyBub2dsb2IKICAgICAgICBpZiBbIC1yIC9ldGMvcmVkaGF0LXJlbGVhc2UgXSAmJiBbICIkezN9IiA9ICJlbDciIF07IHRoZW4KICAgICAgICAgICAgJFNVRE8geXVtIGluc3RhbGwgLXkgeXVtLXV0aWxzCiAgICAgICAgICAgICRTVURPIHl1bS1jb25maWctbWFuYWdlciAtLWVuYWJsZSByaGVsLTctc2VydmVyLWV4dHJhcy1ycG1zCiAgICAgICAgZmkKICAgICAgICAkU1VETyB0ZWUgJHtyZXBvZGlyfS9yYW5jaGVyLWszcy1jb21tb24ucmVwbyA+L2Rldi9udWxsIDw8IEVPRgpbcmFuY2hlci1rM3MtY29tbW9uLSR7Mn1dCm5hbWU9UmFuY2hlciBLM3MgQ29tbW9uICgkezJ9KQpiYXNldXJsPWh0dHBzOi8vJHsxfS9rM3MvJHsyfS9jb21tb24vJHs0fS9ub2FyY2gKZW5hYmxlZD0xCmdwZ2NoZWNrPTEKcmVwb19ncGdjaGVjaz0wCmdwZ2tleT1odHRwczovLyR7MX0vcHVibGljLmtleQpFT0YKICAgICAgICBjYXNlICR7M30gaW4KICAgICAgICBzbGUpCiAgICAgICAgICAgIHJwbV9pbnN0YWxsZXI9Inp5cHBlciAtLWdwZy1hdXRvLWltcG9ydC1rZXlzIgogICAgICAgICAgICBpZiBbICIke1RSQU5TQUNUSU9OQUxfVVBEQVRFPWZhbHNlfSIgIT0gInRydWUiIF0gJiYgWyAteCAvdXNyL3NiaW4vdHJhbnNhY3Rpb25hbC11cGRhdGUgXTsgdGhlbgogICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25hbF91cGRhdGVfcnVuPSJ0cmFuc2FjdGlvbmFsLXVwZGF0ZSAtLW5vLXNlbGZ1cGRhdGUgLWQgcnVuIgogICAgICAgICAgICAgICAgcnBtX2luc3RhbGxlcj0idHJhbnNhY3Rpb25hbC11cGRhdGUgLS1uby1zZWxmdXBkYXRlIC1kIHJ1biAke3JwbV9pbnN0YWxsZXJ9IgogICAgICAgICAgICAgICAgOiAiJHtJTlNUQUxMX0szU19TS0lQX1NUQVJUOj10cnVlfSIKICAgICAgICAgICAgZmkKICAgICAgICAgICAgIyBjcmVhdGUgdGhlIC92YXIvbGliL3JwbS1zdGF0ZSBpbiBTTEUgc3lzdGVtcyB0byBmaXggdGhlIHByZWluIHNlbGludXggbWFjcm8KICAgICAgICAgICAgJFNVRE8gJHt0cmFuc2FjdGlvbmFsX3VwZGF0ZV9ydW59IG1rZGlyIC1wIC92YXIvbGliL3JwbS1zdGF0ZQogICAgICAgICAgICA7OwogICAgICAgIGNvcmVvcykKICAgICAgICAgICAgcnBtX2luc3RhbGxlcj0icnBtLW9zdHJlZSAtLWlkZW1wb3RlbnQiCiAgICAgICAgICAgICMgcnBtX2luc3RhbGxfZXh0cmFfYXJncz0iLS1hcHBseS1saXZlIgogICAgICAgICAgICA6ICIke0lOU1RBTExfSzNTX1NLSVBfU1RBUlQ6PXRydWV9IgogICAgICAgICAgICA7OwogICAgICAgICopCiAgICAgICAgICAgIHJwbV9pbnN0YWxsZXI9Inl1bSIKICAgICAgICAgICAgOzsKICAgICAgICBlc2FjCiAgICAgICAgaWYgWyAiJHtycG1faW5zdGFsbGVyfSIgPSAieXVtIiBdICYmIFsgLXggL3Vzci9iaW4vZG5mIF07IHRoZW4KICAgICAgICAgICAgcnBtX2luc3RhbGxlcj1kbmYKICAgICAgICBmaQoJICAgIGlmIHJwbSAtcSAtLXF1aWV0IGszcy1zZWxpbnV4OyB0aGVuIAogICAgICAgICAgICAjIHJlbW92ZSBrM3Mtc2VsaW51eCBtb2R1bGUgYmVmb3JlIHVwZ3JhZGUgdG8gYWxsb3cgY29udGFpbmVyLXNlbGludXggdG8gdXBncmFkZSBzYWZlbHkKICAgICAgICAgICAgaWYgY2hlY2tfYXZhaWxhYmxlX3VwZ3JhZGVzIGNvbnRhaW5lci1zZWxpbnV4ICR7M30gJiYgY2hlY2tfYXZhaWxhYmxlX3VwZ3JhZGVzIGszcy1zZWxpbnV4ICR7M307IHRoZW4KICAgICAgICAgICAgICAgIE1PRFVMRV9QUklPUklUWT0kKCRTVURPIHNlbW9kdWxlIC0tbGlzdD1mdWxsIHwgZ3JlcCBrM3MgfCBjdXQgLWYxIC1kIiAiKQogICAgICAgICAgICAgICAgaWYgWyAtbiAiJHtNT0RVTEVfUFJJT1JJVFl9IiBdOyB0aGVuCiAgICAgICAgICAgICAgICAgICAgJFNVRE8gc2Vtb2R1bGUgLVggJE1PRFVMRV9QUklPUklUWSAtciBrM3MgfHwgdHJ1ZQogICAgICAgICAgICAgICAgZmkKICAgICAgICAgICAgZmkKICAgICAgICBmaQogICAgICAgICMgc2hlbGxjaGVjayBkaXNhYmxlPVNDMjA4NgogICAgICAgICRTVURPICR7cnBtX2luc3RhbGxlcn0gaW5zdGFsbCAteSAiazNzLXNlbGludXgiCiAgICBmaQogICAgcmV0dXJuCn0KCmNoZWNrX2F2YWlsYWJsZV91cGdyYWRlcygpIHsKICAgIHNldCArZQogICAgY2FzZSAkezJ9IGluCiAgICAgICAgc2xlKQogICAgICAgICAgICBhdmFpbGFibGVfdXBncmFkZXM9JCgkU1VETyB6eXBwZXIgLXEgLXQgLXMgMTEgc2UgLXMgLXUgLS10eXBlIHBhY2thZ2UgJDEgfCB0YWlsIC1uIDEgfCBncmVwIC12ICJObyBtYXRjaGluZyIgfCBhd2sgJ3twcmludCAkM30nKQogICAgICAgICAgICA7OwogICAgICAgIGNvcmVvcykKICAgICAgICAgICAgIyBjdXJyZW50bHkgcnBtLW9zdHJlZSBkb2VzIG5vdCBzdXBwb3J0IHNlYXJjaCBmdW5jdGlvbmFsaXR5IGh0dHBzOi8vZ2l0aHViLmNvbS9jb3Jlb3MvcnBtLW9zdHJlZS9pc3N1ZXMvMTg3NwogICAgICAgICAgICA7OwogICAgICAgICopCiAgICAgICAgICAgIGF2YWlsYWJsZV91cGdyYWRlcz0kKCRTVURPIHl1bSAtcSAtLXJlZnJlc2ggbGlzdCAkMSAtLXVwZ3JhZGVzIHwgdGFpbCAtbiAxIHwgYXdrICd7cHJpbnQgJDJ9JykKICAgICAgICAgICAgOzsKICAgIGVzYWMKICAgIHNldCAtZQogICAgaWYgWyAtbiAiJHthdmFpbGFibGVfdXBncmFkZXN9IiBdOyB0aGVuCiAgICAgICAgcmV0dXJuIDAKICAgIGZpCiAgICByZXR1cm4gMQp9CiMgLS0tIGRvd25sb2FkIGFuZCB2ZXJpZnkgazNzIC0tLQpkb3dubG9hZF9hbmRfdmVyaWZ5KCkgewogICAgaWYgY2FuX3NraXBfZG93bmxvYWRfYmluYXJ5OyB0aGVuCiAgICAgICBpbmZvICdTa2lwcGluZyBrM3MgZG93bmxvYWQgYW5kIHZlcmlmeScKICAgICAgIHZlcmlmeV9rM3NfaXNfZXhlY3V0YWJsZQogICAgICAgcmV0dXJuCiAgICBmaQoKICAgIHNldHVwX3ZlcmlmeV9hcmNoCiAgICB2ZXJpZnlfZG93bmxvYWRlciBjdXJsIHx8IHZlcmlmeV9kb3dubG9hZGVyIHdnZXQgfHwgZmF0YWwgJ0NhbiBub3QgZmluZCBjdXJsIG9yIHdnZXQgZm9yIGRvd25sb2FkaW5nIGZpbGVzJwogICAgc2V0dXBfdG1wCiAgICBnZXRfcmVsZWFzZV92ZXJzaW9uCiAgICBkb3dubG9hZF9oYXNoCgogICAgaWYgaW5zdGFsbGVkX2hhc2hfbWF0Y2hlczsgdGhlbgogICAgICAgIGluZm8gJ1NraXBwaW5nIGJpbmFyeSBkb3dubG9hZGVkLCBpbnN0YWxsZWQgazNzIG1hdGNoZXMgaGFzaCcKICAgICAgICByZXR1cm4KICAgIGZpCgogICAgZG93bmxvYWRfYmluYXJ5CiAgICB2ZXJpZnlfYmluYXJ5CiAgICBzZXR1cF9iaW5hcnkKfQoKIyAtLS0gYWRkIGFkZGl0aW9uYWwgdXRpbGl0eSBsaW5rcyAtLS0KY3JlYXRlX3N5bWxpbmtzKCkgewogICAgWyAiJHtJTlNUQUxMX0szU19CSU5fRElSX1JFQURfT05MWX0iID0gdHJ1ZSBdICYmIHJldHVybgogICAgWyAiJHtJTlNUQUxMX0szU19TWU1MSU5LfSIgPSBza2lwIF0gJiYgcmV0dXJuCgogICAgZm9yIGNtZCBpbiBrdWJlY3RsIGNyaWN0bCBjdHI7IGRvCiAgICAgICAgaWYgWyAhIC1lICR7QklOX0RJUn0vJHtjbWR9IF0gfHwgWyAiJHtJTlNUQUxMX0szU19TWU1MSU5LfSIgPSBmb3JjZSBdOyB0aGVuCiAgICAgICAgICAgIHdoaWNoX2NtZD0kKGNvbW1hbmQgLXYgJHtjbWR9IDI+L2Rldi9udWxsIHx8IHRydWUpCiAgICAgICAgICAgIGlmIFsgLXogIiR7d2hpY2hfY21kfSIgXSB8fCBbICIke0lOU1RBTExfSzNTX1NZTUxJTkt9IiA9IGZvcmNlIF07IHRoZW4KICAgICAgICAgICAgICAgIGluZm8gIkNyZWF0aW5nICR7QklOX0RJUn0vJHtjbWR9IHN5bWxpbmsgdG8gazNzIgogICAgICAgICAgICAgICAgJFNVRE8gbG4gLXNmIGszcyAke0JJTl9ESVJ9LyR7Y21kfQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBpbmZvICJTa2lwcGluZyAke0JJTl9ESVJ9LyR7Y21kfSBzeW1saW5rIHRvIGszcywgY29tbWFuZCBleGlzdHMgaW4gUEFUSCBhdCAke3doaWNoX2NtZH0iCiAgICAgICAgICAgIGZpCiAgICAgICAgZWxzZQogICAgICAgICAgICBpbmZvICJTa2lwcGluZyAke0JJTl9ESVJ9LyR7Y21kfSBzeW1saW5rIHRvIGszcywgYWxyZWFkeSBleGlzdHMiCiAgICAgICAgZmkKICAgIGRvbmUKfQoKIyAtLS0gY3JlYXRlIGtpbGxhbGwgc2NyaXB0IC0tLQpjcmVhdGVfa2lsbGFsbCgpIHsKICAgIFsgIiR7SU5TVEFMTF9LM1NfQklOX0RJUl9SRUFEX09OTFl9IiA9IHRydWUgXSAmJiByZXR1cm4KICAgIGluZm8gIkNyZWF0aW5nIGtpbGxhbGwgc2NyaXB0ICR7S0lMTEFMTF9LM1NfU0h9IgogICAgJFNVRE8gdGVlICR7S0lMTEFMTF9LM1NfU0h9ID4vZGV2L251bGwgPDwgXEVPRgojIS9iaW4vc2gKWyAkKGlkIC11KSAtZXEgMCBdIHx8IGV4ZWMgc3VkbyAkMCAkQAoKSzNTX0RBVEFfRElSPSR7SzNTX0RBVEFfRElSOi0vdmFyL2xpYi9yYW5jaGVyL2szc30KCmZvciBiaW4gaW4gJHtLM1NfREFUQV9ESVJ9L2RhdGEvKiovYmluLzsgZG8KICAgIFsgLWQgJGJpbiBdICYmIGV4cG9ydCBQQVRIPSRQQVRIOiRiaW46JGJpbi9hdXgKZG9uZQoKc2V0IC14Cgpmb3Igc2VydmljZSBpbiAvZXRjL3N5c3RlbWQvc3lzdGVtL2szcyouc2VydmljZTsgZG8KICAgIFsgLXMgJHNlcnZpY2UgXSAmJiBzeXN0ZW1jdGwgc3RvcCAkKGJhc2VuYW1lICRzZXJ2aWNlKQpkb25lCgpmb3Igc2VydmljZSBpbiAvZXRjL2luaXQuZC9rM3MqOyBkbwogICAgWyAteCAkc2VydmljZSBdICYmICRzZXJ2aWNlIHN0b3AKZG9uZQoKcHNjaGlsZHJlbigpIHsKICAgIHBzIC1lIC1vIHBwaWQ9IC1vIHBpZD0gfCBcCiAgICBzZWQgLWUgJ3MvXlxzKi8vZzsgcy9cc1xzKi9cdC9nOycgfCBcCiAgICBncmVwIC13ICJeJDEiIHwgXAogICAgY3V0IC1mMgp9Cgpwc3RyZWUoKSB7CiAgICBmb3IgcGlkIGluICRAOyBkbwogICAgICAgIGVjaG8gJHBpZAogICAgICAgIGZvciBjaGlsZCBpbiAkKHBzY2hpbGRyZW4gJHBpZCk7IGRvCiAgICAgICAgICAgIHBzdHJlZSAkY2hpbGQKICAgICAgICBkb25lCiAgICBkb25lCn0KCmtpbGx0cmVlKCkgewogICAga2lsbCAtOSAkKAogICAgICAgIHsgc2V0ICt4OyB9IDI+L2Rldi9udWxsOwogICAgICAgIHBzdHJlZSAkQDsKICAgICAgICBzZXQgLXg7CiAgICApIDI+L2Rldi9udWxsCn0KCnJlbW92ZV9pbnRlcmZhY2VzKCkgewogICAgIyBEZWxldGUgbmV0d29yayBpbnRlcmZhY2UocykgdGhhdCBtYXRjaCAnbWFzdGVyIGNuaTAnCiAgICBpcCBsaW5rIHNob3cgMj4vZGV2L251bGwgfCBncmVwICdtYXN0ZXIgY25pMCcgfCB3aGlsZSByZWFkIGlnbm9yZSBpZmFjZSBpZ25vcmU7IGRvCiAgICAgICAgaWZhY2U9JHtpZmFjZSUlQCp9CiAgICAgICAgWyAteiAiJGlmYWNlIiBdIHx8IGlwIGxpbmsgZGVsZXRlICRpZmFjZQogICAgZG9uZQoKICAgICMgRGVsZXRlIGNuaSByZWxhdGVkIGludGVyZmFjZXMKICAgIGlwIGxpbmsgZGVsZXRlIGNuaTAKICAgIGlwIGxpbmsgZGVsZXRlIGZsYW5uZWwuMQogICAgaXAgbGluayBkZWxldGUgZmxhbm5lbC12Ni4xCiAgICBpcCBsaW5rIGRlbGV0ZSBrdWJlLWlwdnMwCiAgICBpcCBsaW5rIGRlbGV0ZSBmbGFubmVsLXdnCiAgICBpcCBsaW5rIGRlbGV0ZSBmbGFubmVsLXdnLXY2CgogICAgIyBSZXN0YXJ0IHRhaWxzY2FsZQogICAgaWYgWyAtbiAiJChjb21tYW5kIC12IHRhaWxzY2FsZSkiIF07IHRoZW4KICAgICAgICB0YWlsc2NhbGUgc2V0IC0tYWR2ZXJ0aXNlLXJvdXRlcz0KICAgIGZpCn0KCmdldHNoaW1zKCkgewogICAgcHMgLWUgLW8gcGlkPSAtbyBhcmdzPSB8IHNlZCAtZSAncy9eICovLzsgcy9cc1xzKi9cdC87JyB8IGdyZXAgLXcgIiR7SzNTX0RBVEFfRElSfSInL2RhdGEvW14vXSovYmluL2NvbnRhaW5lcmQtc2hpbScgfCBjdXQgLWYxCn0KCmtpbGx0cmVlICQoeyBzZXQgK3g7IH0gMj4vZGV2L251bGw7IGdldHNoaW1zOyBzZXQgLXgpCgpkb191bm1vdW50X2FuZF9yZW1vdmUoKSB7CiAgICBzZXQgK3gKICAgIHdoaWxlIHJlYWQgLXIgXyBwYXRoIF87IGRvCiAgICAgICAgY2FzZSAiJHBhdGgiIGluICQxKikgZWNobyAiJHBhdGgiIDs7IGVzYWMKICAgIGRvbmUgPCAvcHJvYy9zZWxmL21vdW50cyB8IHNvcnQgLXIgfCB4YXJncyAtciAtdCAtbiAxIHNoIC1jICd1bW91bnQgLWYgIiQwIiAmJiBybSAtcmYgIiQwIicKICAgIHNldCAteAp9Cgpkb191bm1vdW50X2FuZF9yZW1vdmUgJy9ydW4vazNzJwpkb191bm1vdW50X2FuZF9yZW1vdmUgJy92YXIvbGliL2t1YmVsZXQvcG9kcycKZG9fdW5tb3VudF9hbmRfcmVtb3ZlICcvdmFyL2xpYi9rdWJlbGV0L3BsdWdpbnMnCmRvX3VubW91bnRfYW5kX3JlbW92ZSAnL3J1bi9uZXRucy9jbmktJwoKIyBSZW1vdmUgQ05JIG5hbWVzcGFjZXMKaXAgbmV0bnMgc2hvdyAyPi9kZXYvbnVsbCB8IGdyZXAgY25pLSB8IHhhcmdzIC1yIC10IC1uIDEgaXAgbmV0bnMgZGVsZXRlCgpyZW1vdmVfaW50ZXJmYWNlcwoKcm0gLXJmIC92YXIvbGliL2NuaS8KaXB0YWJsZXMtc2F2ZSB8IGdyZXAgLXYgS1VCRS0gfCBncmVwIC12IENOSS0gfCBncmVwIC1pdiBmbGFubmVsIHwgaXB0YWJsZXMtcmVzdG9yZQppcDZ0YWJsZXMtc2F2ZSB8IGdyZXAgLXYgS1VCRS0gfCBncmVwIC12IENOSS0gfCBncmVwIC1pdiBmbGFubmVsIHwgaXA2dGFibGVzLXJlc3RvcmUKRU9GCiAgICAkU1VETyBjaG1vZCA3NTUgJHtLSUxMQUxMX0szU19TSH0KICAgICRTVURPIGNob3duIHJvb3Q6cm9vdCAke0tJTExBTExfSzNTX1NIfQp9CgojIC0tLSBjcmVhdGUgdW5pbnN0YWxsIHNjcmlwdCAtLS0KY3JlYXRlX3VuaW5zdGFsbCgpIHsKICAgIFsgIiR7SU5TVEFMTF9LM1NfQklOX0RJUl9SRUFEX09OTFl9IiA9IHRydWUgXSAmJiByZXR1cm4KICAgIGluZm8gIkNyZWF0aW5nIHVuaW5zdGFsbCBzY3JpcHQgJHtVTklOU1RBTExfSzNTX1NIfSIKICAgICRTVURPIHRlZSAke1VOSU5TVEFMTF9LM1NfU0h9ID4vZGV2L251bGwgPDwgRU9GCiMhL2Jpbi9zaApzZXQgLXgKWyBcJChpZCAtdSkgLWVxIDAgXSB8fCBleGVjIHN1ZG8gXCQwIFwkQAoKSzNTX0RBVEFfRElSPVwke0szU19EQVRBX0RJUjotL3Zhci9saWIvcmFuY2hlci9rM3N9Cgoke0tJTExBTExfSzNTX1NIfQoKaWYgY29tbWFuZCAtdiBzeXN0ZW1jdGw7IHRoZW4KICAgIHN5c3RlbWN0bCBkaXNhYmxlICR7U1lTVEVNX05BTUV9CiAgICBzeXN0ZW1jdGwgcmVzZXQtZmFpbGVkICR7U1lTVEVNX05BTUV9CiAgICBzeXN0ZW1jdGwgZGFlbW9uLXJlbG9hZApmaQppZiBjb21tYW5kIC12IHJjLXVwZGF0ZTsgdGhlbgogICAgcmMtdXBkYXRlIGRlbGV0ZSAke1NZU1RFTV9OQU1FfSBkZWZhdWx0CmZpCgpybSAtZiAke0ZJTEVfSzNTX1NFUlZJQ0V9CnJtIC1mICR7RklMRV9LM1NfRU5WfQoKcmVtb3ZlX3VuaW5zdGFsbCgpIHsKICAgIHJtIC1mICR7VU5JTlNUQUxMX0szU19TSH0KfQp0cmFwIHJlbW92ZV91bmluc3RhbGwgRVhJVAoKaWYgKGxzICR7U1lTVEVNRF9ESVJ9L2szcyouc2VydmljZSB8fCBscyAvZXRjL2luaXQuZC9rM3MqKSA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICAgIHNldCAreDsgZWNobyAnQWRkaXRpb25hbCBrM3Mgc2VydmljZXMgaW5zdGFsbGVkLCBza2lwcGluZyB1bmluc3RhbGwgb2YgazNzJzsgc2V0IC14CiAgICBleGl0CmZpCgpmb3IgY21kIGluIGt1YmVjdGwgY3JpY3RsIGN0cjsgZG8KICAgIGlmIFsgLUwgJHtCSU5fRElSfS9cJGNtZCBdOyB0aGVuCiAgICAgICAgcm0gLWYgJHtCSU5fRElSfS9cJGNtZAogICAgZmkKZG9uZQoKY2xlYW5fbW91bnRlZF9kaXJlY3RvcnkoKSB7CiAgICBpZiAhIGdyZXAgLXEgIiBcJDEiIC9wcm9jL21vdW50czsgdGhlbgogICAgICAgIHJtIC1yZiAiXCQxIgoJcmV0dXJuIDAKICAgIGZpCgogICAgZm9yIHBhdGggaW4gIlwkMSIvKjsgZG8KICAgICAgICBpZiBbIC1kICJcJHBhdGgiIF07IHRoZW4KICAgICAgICAgICAgaWYgZ3JlcCAtcSAiIFwkcGF0aCIgL3Byb2MvbW91bnRzOyB0aGVuCiAgICAgICAgICAgICAgICBjbGVhbl9tb3VudGVkX2RpcmVjdG9yeSAiXCRwYXRoIgogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBybSAtcmYgIlwkcGF0aCIKICAgICAgICAgICAgZmkKICAgICAgICBlbHNlCiAgICAgICAgICAgIHJtICJcJHBhdGgiCiAgICAgICAgZmkKICAgICBkb25lCn0KCnJtIC1yZiAvZXRjL3JhbmNoZXIvazNzCnJtIC1yZiAvcnVuL2szcwpybSAtcmYgL3J1bi9mbGFubmVsCmNsZWFuX21vdW50ZWRfZGlyZWN0b3J5IFwke0szU19EQVRBX0RJUn0Kcm0gLXJmIC92YXIvbGliL2t1YmVsZXQKcm0gLWYgJHtCSU5fRElSfS9rM3MKcm0gLWYgJHtLSUxMQUxMX0szU19TSH0KCmlmIHR5cGUgeXVtID4vZGV2L251bGwgMj4mMTsgdGhlbgogICAgeXVtIHJlbW92ZSAteSBrM3Mtc2VsaW51eAogICAgcm0gLWYgL2V0Yy95dW0ucmVwb3MuZC9yYW5jaGVyLWszcy1jb21tb24qLnJlcG8KZWxpZiB0eXBlIHJwbS1vc3RyZWUgPi9kZXYvbnVsbCAyPiYxOyB0aGVuCiAgICBycG0tb3N0cmVlIHVuaW5zdGFsbCBrM3Mtc2VsaW51eAogICAgcm0gLWYgL2V0Yy95dW0ucmVwb3MuZC9yYW5jaGVyLWszcy1jb21tb24qLnJlcG8KZWxpZiB0eXBlIHp5cHBlciA+L2Rldi9udWxsIDI+JjE7IHRoZW4KICAgIHVuaW5zdGFsbF9jbWQ9Inp5cHBlciByZW1vdmUgLXkgazNzLXNlbGludXgiCiAgICBpZiBbICJcJHtUUkFOU0FDVElPTkFMX1VQREFURT1mYWxzZX0iICE9ICJ0cnVlIiBdICYmIFsgLXggL3Vzci9zYmluL3RyYW5zYWN0aW9uYWwtdXBkYXRlIF07IHRoZW4KICAgICAgICB1bmluc3RhbGxfY21kPSJ0cmFuc2FjdGlvbmFsLXVwZGF0ZSAtLW5vLXNlbGZ1cGRhdGUgLWQgcnVuIFwkdW5pbnN0YWxsX2NtZCIKICAgIGZpCiAgICAkU1VETyBcJHVuaW5zdGFsbF9jbWQKICAgIHJtIC1mIC9ldGMvenlwcC9yZXBvcy5kL3JhbmNoZXItazNzLWNvbW1vbioucmVwbwpmaQpFT0YKICAgICRTVURPIGNobW9kIDc1NSAke1VOSU5TVEFMTF9LM1NfU0h9CiAgICAkU1VETyBjaG93biByb290OnJvb3QgJHtVTklOU1RBTExfSzNTX1NIfQp9CgojIC0tLSBkaXNhYmxlIGN1cnJlbnQgc2VydmljZSBpZiBsb2FkZWQgLS0Kc3lzdGVtZF9kaXNhYmxlKCkgewogICAgJFNVRE8gc3lzdGVtY3RsIGRpc2FibGUgJHtTWVNURU1fTkFNRX0gPi9kZXYvbnVsbCAyPiYxIHx8IHRydWUKICAgICRTVURPIHJtIC1mIC9ldGMvc3lzdGVtZC9zeXN0ZW0vJHtTRVJWSUNFX0szU30gfHwgdHJ1ZQogICAgJFNVRE8gcm0gLWYgL2V0Yy9zeXN0ZW1kL3N5c3RlbS8ke1NFUlZJQ0VfSzNTfS5lbnYgfHwgdHJ1ZQp9CgojIC0tLSBjYXB0dXJlIGN1cnJlbnQgZW52IGFuZCBjcmVhdGUgZmlsZSBjb250YWluaW5nIGszc18gdmFyaWFibGVzIC0tLQpjcmVhdGVfZW52X2ZpbGUoKSB7CiAgICBpbmZvICJlbnY6IENyZWF0aW5nIGVudmlyb25tZW50IGZpbGUgJHtGSUxFX0szU19FTlZ9IgogICAgJFNVRE8gdG91Y2ggJHtGSUxFX0szU19FTlZ9CiAgICAkU1VETyBjaG1vZCAwNjAwICR7RklMRV9LM1NfRU5WfQogICAgc2ggLWMgZXhwb3J0IHwgd2hpbGUgcmVhZCB4IHY7IGRvIGVjaG8gJHY7IGRvbmUgfCBncmVwIC1FICdeKEszU3xDT05UQUlORVJEKV8nIHwgJFNVRE8gdGVlICR7RklMRV9LM1NfRU5WfSA+L2Rldi9udWxsCiAgICBzaCAtYyBleHBvcnQgfCB3aGlsZSByZWFkIHggdjsgZG8gZWNobyAkdjsgZG9uZSB8IGdyZXAgLUVpICdeKE5PfEhUVFB8SFRUUFMpX1BST1hZJyB8ICRTVURPIHRlZSAtYSAke0ZJTEVfSzNTX0VOVn0gPi9kZXYvbnVsbAp9CgojIC0tLSB3cml0ZSBzeXN0ZW1kIHNlcnZpY2UgZmlsZSAtLS0KY3JlYXRlX3N5c3RlbWRfc2VydmljZV9maWxlKCkgewogICAgaW5mbyAic3lzdGVtZDogQ3JlYXRpbmcgc2VydmljZSBmaWxlICR7RklMRV9LM1NfU0VSVklDRX0iCiAgICAkU1VETyB0ZWUgJHtGSUxFX0szU19TRVJWSUNFfSA+L2Rldi9udWxsIDw8IEVPRgpbVW5pdF0KRGVzY3JpcHRpb249TGlnaHR3ZWlnaHQgS3ViZXJuZXRlcwpEb2N1bWVudGF0aW9uPWh0dHBzOi8vazNzLmlvCldhbnRzPW5ldHdvcmstb25saW5lLnRhcmdldApBZnRlcj1uZXR3b3JrLW9ubGluZS50YXJnZXQKCltJbnN0YWxsXQpXYW50ZWRCeT1tdWx0aS11c2VyLnRhcmdldAoKW1NlcnZpY2VdClR5cGU9JHtTWVNURU1EX1RZUEV9CkVudmlyb25tZW50RmlsZT0tL2V0Yy9kZWZhdWx0LyVOCkVudmlyb25tZW50RmlsZT0tL2V0Yy9zeXNjb25maWcvJU4KRW52aXJvbm1lbnRGaWxlPS0ke0ZJTEVfSzNTX0VOVn0KS2lsbE1vZGU9cHJvY2VzcwpEZWxlZ2F0ZT15ZXMKIyBIYXZpbmcgbm9uLXplcm8gTGltaXQqcyBjYXVzZXMgcGVyZm9ybWFuY2UgcHJvYmxlbXMgZHVlIHRvIGFjY291bnRpbmcgb3ZlcmhlYWQKIyBpbiB0aGUga2VybmVsLiBXZSByZWNvbW1lbmQgdXNpbmcgY2dyb3VwcyB0byBkbyBjb250YWluZXItbG9jYWwgYWNjb3VudGluZy4KTGltaXROT0ZJTEU9MTA0ODU3NgpMaW1pdE5QUk9DPWluZmluaXR5CkxpbWl0Q09SRT1pbmZpbml0eQpUYXNrc01heD1pbmZpbml0eQpUaW1lb3V0U3RhcnRTZWM9MApSZXN0YXJ0PWFsd2F5cwpSZXN0YXJ0U2VjPTVzCkV4ZWNTdGFydFByZT0vYmluL3NoIC14YyAnISAvdXNyL2Jpbi9zeXN0ZW1jdGwgaXMtZW5hYmxlZCAtLXF1aWV0IG5tLWNsb3VkLXNldHVwLnNlcnZpY2UgMj4vZGV2L251bGwnCkV4ZWNTdGFydFByZT0tL3NiaW4vbW9kcHJvYmUgYnJfbmV0ZmlsdGVyCkV4ZWNTdGFydFByZT0tL3NiaW4vbW9kcHJvYmUgb3ZlcmxheQpFeGVjU3RhcnQ9JHtCSU5fRElSfS9rM3MgXFwKICAgICR7Q01EX0szU19FWEVDfQoKRU9GCn0KCiMgLS0tIHdyaXRlIG9wZW5yYyBzZXJ2aWNlIGZpbGUgLS0tCmNyZWF0ZV9vcGVucmNfc2VydmljZV9maWxlKCkgewogICAgTE9HX0ZJTEU9L3Zhci9sb2cvJHtTWVNURU1fTkFNRX0ubG9nCgogICAgaW5mbyAib3BlbnJjOiBDcmVhdGluZyBzZXJ2aWNlIGZpbGUgJHtGSUxFX0szU19TRVJWSUNFfSIKICAgICRTVURPIHRlZSAke0ZJTEVfSzNTX1NFUlZJQ0V9ID4vZGV2L251bGwgPDwgRU9GCiMhL3NiaW4vb3BlbnJjLXJ1bgoKZGVwZW5kKCkgewogICAgYWZ0ZXIgbmV0d29yay1vbmxpbmUKICAgIHdhbnQgY2dyb3Vwcwp9CgpzdGFydF9wcmUoKSB7CiAgICBybSAtZiAvdG1wL2szcy4qCn0KCnN1cGVydmlzb3I9c3VwZXJ2aXNlLWRhZW1vbgpuYW1lPSR7U1lTVEVNX05BTUV9CmNvbW1hbmQ9IiR7QklOX0RJUn0vazNzIgpjb21tYW5kX2FyZ3M9IiQoZXNjYXBlX2RxICIke0NNRF9LM1NfRVhFQ30iKQogICAgPj4ke0xPR19GSUxFfSAyPiYxIgoKb3V0cHV0X2xvZz0ke0xPR19GSUxFfQplcnJvcl9sb2c9JHtMT0dfRklMRX0KCnBpZGZpbGU9Ii92YXIvcnVuLyR7U1lTVEVNX05BTUV9LnBpZCIKcmVzcGF3bl9kZWxheT01CnJlc3Bhd25fbWF4PTAKCnNldCAtbyBhbGxleHBvcnQKaWYgWyAtZiAvZXRjL2Vudmlyb25tZW50IF07IHRoZW4gLiAvZXRjL2Vudmlyb25tZW50OyBmaQppZiBbIC1mICR7RklMRV9LM1NfRU5WfSBdOyB0aGVuIC4gJHtGSUxFX0szU19FTlZ9OyBmaQpzZXQgK28gYWxsZXhwb3J0CkVPRgogICAgJFNVRE8gY2htb2QgMDc1NSAke0ZJTEVfSzNTX1NFUlZJQ0V9CgogICAgJFNVRE8gdGVlIC9ldGMvbG9ncm90YXRlLmQvJHtTWVNURU1fTkFNRX0gPi9kZXYvbnVsbCA8PCBFT0YKJHtMT0dfRklMRX0gewoJbWlzc2luZ29rCglub3RpZmVtcHR5Cgljb3B5dHJ1bmNhdGUKfQpFT0YKfQoKIyAtLS0gd3JpdGUgc3lzdGVtZCBvciBvcGVucmMgc2VydmljZSBmaWxlIC0tLQpjcmVhdGVfc2VydmljZV9maWxlKCkgewogICAgWyAiJHtIQVNfU1lTVEVNRH0iID0gdHJ1ZSBdICYmIGNyZWF0ZV9zeXN0ZW1kX3NlcnZpY2VfZmlsZSAmJiByZXN0b3JlX3N5c3RlbWRfc2VydmljZV9maWxlX2NvbnRleHQKICAgIFsgIiR7SEFTX09QRU5SQ30iID0gdHJ1ZSBdICYmIGNyZWF0ZV9vcGVucmNfc2VydmljZV9maWxlCiAgICByZXR1cm4gMAp9CgpyZXN0b3JlX3N5c3RlbWRfc2VydmljZV9maWxlX2NvbnRleHQoKSB7CiAgICAkU1VETyByZXN0b3JlY29uIC1SIC1pICR7RklMRV9LM1NfU0VSVklDRX0gMj4vZGV2L251bGwgfHwgdHJ1ZQogICAgJFNVRE8gcmVzdG9yZWNvbiAtUiAtaSAke0ZJTEVfSzNTX0VOVn0gMj4vZGV2L251bGwgfHwgdHJ1ZQp9CgojIC0tLSBnZXQgaGFzaGVzIG9mIHRoZSBjdXJyZW50IGszcyBiaW4gYW5kIHNlcnZpY2UgZmlsZXMKZ2V0X2luc3RhbGxlZF9oYXNoZXMoKSB7CiAgICAkU1VETyBzaGEyNTZzdW0gJHtCSU5fRElSfS9rM3MgJHtGSUxFX0szU19TRVJWSUNFfSAke0ZJTEVfSzNTX0VOVn0gMj4mMSB8fCB0cnVlCn0KCiMgLS0tIGVuYWJsZSBhbmQgc3RhcnQgc3lzdGVtZCBzZXJ2aWNlIC0tLQpzeXN0ZW1kX2VuYWJsZSgpIHsKICAgIGluZm8gInN5c3RlbWQ6IEVuYWJsaW5nICR7U1lTVEVNX05BTUV9IHVuaXQiCiAgICAkU1VETyBzeXN0ZW1jdGwgZW5hYmxlICR7RklMRV9LM1NfU0VSVklDRX0gPi9kZXYvbnVsbAogICAgJFNVRE8gc3lzdGVtY3RsIGRhZW1vbi1yZWxvYWQgPi9kZXYvbnVsbAp9CgpzeXN0ZW1kX3N0YXJ0KCkgewogICAgaW5mbyAic3lzdGVtZDogU3RhcnRpbmcgJHtTWVNURU1fTkFNRX0iCiAgICAkU1VETyBzeXN0ZW1jdGwgcmVzdGFydCAke1NZU1RFTV9OQU1FfQp9CgojIC0tLSBlbmFibGUgYW5kIHN0YXJ0IG9wZW5yYyBzZXJ2aWNlIC0tLQpvcGVucmNfZW5hYmxlKCkgewogICAgaW5mbyAib3BlbnJjOiBFbmFibGluZyAke1NZU1RFTV9OQU1FfSBzZXJ2aWNlIGZvciBkZWZhdWx0IHJ1bmxldmVsIgogICAgJFNVRE8gcmMtdXBkYXRlIGFkZCAke1NZU1RFTV9OQU1FfSBkZWZhdWx0ID4vZGV2L251bGwKfQoKb3BlbnJjX3N0YXJ0KCkgewogICAgaW5mbyAib3BlbnJjOiBTdGFydGluZyAke1NZU1RFTV9OQU1FfSIKICAgICRTVURPICR7RklMRV9LM1NfU0VSVklDRX0gcmVzdGFydAp9CgpoYXNfd29ya2luZ194dGFibGVzKCkgewogICAgaWYgJFNVRE8gc2ggLWMgImNvbW1hbmQgLXYgXCIkMS1zYXZlXCIiIDE+IC9kZXYvbnVsbCAmJiAkU1VETyBzaCAtYyAiY29tbWFuZCAtdiBcIiQxLXJlc3RvcmVcIiIgMT4gL2Rldi9udWxsOyB0aGVuCiAgICAgICAgaWYgJFNVRE8gJDEtc2F2ZSAyPi9kZXYvbnVsbCB8IGdyZXAgLXEgJ14tQSBDTkktSE9TVFBPUlQtTUFTUSAtaiBNQVNRVUVSQURFJCc7IHRoZW4KICAgICAgICAgICAgd2FybiAiSG9zdCAkMS1zYXZlLyQxLXJlc3RvcmUgdG9vbHMgYXJlIGluY29tcGF0aWJsZSB3aXRoIGV4aXN0aW5nIHJ1bGVzIgogICAgICAgIGVsc2UKICAgICAgICAgICAgcmV0dXJuIDAKICAgICAgICBmaQogICAgZWxzZQogICAgICAgIGluZm8gIkhvc3QgJDEtc2F2ZS8kMS1yZXN0b3JlIHRvb2xzIG5vdCBmb3VuZCIKICAgIGZpCiAgICByZXR1cm4gMQp9CgojIC0tLSBzdGFydHVwIHN5c3RlbWQgb3Igb3BlbnJjIHNlcnZpY2UgLS0tCnNlcnZpY2VfZW5hYmxlX2FuZF9zdGFydCgpIHsKICAgIGlmIFsgLWYgIi9wcm9jL2Nncm91cHMiIF0gJiYgWyAiJChncmVwIG1lbW9yeSAvcHJvYy9jZ3JvdXBzIHwgd2hpbGUgcmVhZCAtciBuIG4gbiBlbmFibGVkOyBkbyBlY2hvICRlbmFibGVkOyBkb25lKSIgLWVxIDAgXTsKICAgIHRoZW4KICAgICAgICBpbmZvICdGYWlsZWQgdG8gZmluZCBtZW1vcnkgY2dyb3VwLCB5b3UgbWF5IG5lZWQgdG8gYWRkICJjZ3JvdXBfbWVtb3J5PTEgY2dyb3VwX2VuYWJsZT1tZW1vcnkiIHRvIHlvdXIgbGludXggY21kbGluZSAoL2Jvb3QvY21kbGluZS50eHQgb24gYSBSYXNwYmVycnkgUGkpJwogICAgZmkKCiAgICBbICIke0lOU1RBTExfSzNTX1NLSVBfRU5BQkxFfSIgPSB0cnVlIF0gJiYgcmV0dXJuCgogICAgWyAiJHtIQVNfU1lTVEVNRH0iID0gdHJ1ZSBdICYmIHN5c3RlbWRfZW5hYmxlCiAgICBbICIke0hBU19PUEVOUkN9IiA9IHRydWUgXSAmJiBvcGVucmNfZW5hYmxlCgogICAgWyAiJHtJTlNUQUxMX0szU19TS0lQX1NUQVJUfSIgPSB0cnVlIF0gJiYgcmV0dXJuCgogICAgUE9TVF9JTlNUQUxMX0hBU0hFUz0kKGdldF9pbnN0YWxsZWRfaGFzaGVzKQogICAgaWYgWyAiJHtQUkVfSU5TVEFMTF9IQVNIRVN9IiA9ICIke1BPU1RfSU5TVEFMTF9IQVNIRVN9IiBdICYmIFsgIiR7SU5TVEFMTF9LM1NfRk9SQ0VfUkVTVEFSVH0iICE9IHRydWUgXTsgdGhlbgogICAgICAgIGluZm8gJ05vIGNoYW5nZSBkZXRlY3RlZCBzbyBza2lwcGluZyBzZXJ2aWNlIHN0YXJ0JwogICAgICAgIHJldHVybgogICAgZmkKCiAgICBmb3IgWFRBQkxFUyBpbiBpcHRhYmxlcyBpcDZ0YWJsZXM7IGRvCiAgICAgICAgaWYgaGFzX3dvcmtpbmdfeHRhYmxlcyAke1hUQUJMRVN9OyB0aGVuCiAgICAgICAgICAgICRTVURPICR7WFRBQkxFU30tc2F2ZSAyPi9kZXYvbnVsbCB8IGdyZXAgLXYgS1VCRS0gfCBncmVwIC1pdiBmbGFubmVsIHwgJFNVRE8gJHtYVEFCTEVTfS1yZXN0b3JlCiAgICAgICAgZmkKICAgIGRvbmUKCiAgICBbICIke0hBU19TWVNURU1EfSIgPSB0cnVlIF0gJiYgc3lzdGVtZF9zdGFydAogICAgWyAiJHtIQVNfT1BFTlJDfSIgPSB0cnVlIF0gJiYgb3BlbnJjX3N0YXJ0CiAgICByZXR1cm4gMAp9CgojIC0tLSByZS1ldmFsdWF0ZSBhcmdzIHRvIGluY2x1ZGUgZW52IGNvbW1hbmQgLS0tCmV2YWwgc2V0IC0tICQoZXNjYXBlICIke0lOU1RBTExfSzNTX0VYRUN9IikgJChxdW90ZSAiJEAiKQoKIyAtLS0gcnVuIHRoZSBpbnN0YWxsIHByb2Nlc3MgLS0KewogICAgdmVyaWZ5X3N5c3RlbQogICAgc2V0dXBfZW52ICIkQCIKICAgIGRvd25sb2FkX2FuZF92ZXJpZnkKICAgIHNldHVwX3NlbGludXgKICAgIGNyZWF0ZV9zeW1saW5rcwogICAgY3JlYXRlX2tpbGxhbGwKICAgIGNyZWF0ZV91bmluc3RhbGwKICAgIHN5c3RlbWRfZGlzYWJsZQogICAgY3JlYXRlX2Vudl9maWxlCiAgICBjcmVhdGVfc2VydmljZV9maWxlCiAgICBzZXJ2aWNlX2VuYWJsZV9hbmRfc3RhcnQKfQoK",
            "response_headers": {
              "Accept-Ranges": "bytes",
              "Access-Control-Allow-Origin": "*",
              "Cache-Control": "max-age=300",
              "Content-Security-Policy": "default-src 'none'; style-src 'unsafe-inline'; sandbox",
              "Content-Type": "text/plain; charset=utf-8",
              "Cross-Origin-Resource-Policy": "cross-origin",
              "Date": "Sat, 07 Dec 2024 00:29:53 GMT",
              "Etag": "W/\"f4f948b7beaa53125eb5e09834080762a4a691dd7d71adb96bc8b035239fb100\"",
              "Expires": "Sat, 07 Dec 2024 00:34:53 GMT",
              "Source-Age": "23",
              "Strict-Transport-Security": "max-age=31536000",
              "Vary": "Authorization,Accept-Encoding,Origin",
              "Via": "1.1 varnish",
              "X-Cache": "HIT",
              "X-Cache-Hits": "1",
              "X-Content-Type-Options": "nosniff",
              "X-Fastly-Request-Id": "8e550c0139fa6e46e10c4527ba4379a0b1dfb643",
              "X-Frame-Options": "deny",
              "X-Github-Request-Id": "B936:10EB97:6015A:7C45A:675396E9",
              "X-Served-By": "cache-nrt-rjtf7700105-NRT",
              "X-Timer": "S1733531393.170647,VS0,VE1",
              "X-Xss-Protection": "1; mode=block"
            },
            "retry": null,
            "status_code": 200,
            "url": "https://raw.githubusercontent.com/rancher/k3s/v1.31.2+k3s1/install.sh"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.k3s2.module.k3s",
      "mode": "data",
      "type": "http",
      "name": "k3s_version",
      "provider": "provider[\"registry.terraform.io/hashicorp/http\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "body": "{\"type\":\"collection\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels\"},\"actions\":{},\"resourceType\":\"channel\",\"data\":[{\"id\":\"stable\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/stable\"},\"name\":\"stable\",\"latest\":\"v1.30.6+k3s1\"},{\"id\":\"latest\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/latest\"},\"name\":\"latest\",\"latest\":\"v1.31.2+k3s1\",\"latestRegexp\":\".*\",\"excludeRegexp\":\"(^[^+]+-|v1\\\\.25\\\\.5\\\\+k3s1|v1\\\\.26\\\\.0\\\\+k3s1)\"},{\"id\":\"testing\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/testing\"},\"name\":\"testing\",\"latest\":\"v1.18.2-rc3+k3s1\",\"latestRegexp\":\"-(alpha|beta|rc)\"},{\"id\":\"v1.16\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.16\"},\"name\":\"v1.16\",\"latest\":\"v1.16.15+k3s1\",\"latestRegexp\":\"v1\\\\.16\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.16-testing\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.16-testing\"},\"name\":\"v1.16-testing\",\"latestRegexp\":\"v1\\\\.16\\\\.[0-9]*-(alpha|beta|rc)\"},{\"id\":\"v1.17\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.17\"},\"name\":\"v1.17\",\"latest\":\"v1.17.17+k3s1\",\"latestRegexp\":\"v1\\\\.17\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.17-testing\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.17-testing\"},\"name\":\"v1.17-testing\",\"latestRegexp\":\"v1\\\\.17\\\\.[0-9]*-(alpha|beta|rc)\"},{\"id\":\"v1.18\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.18\"},\"name\":\"v1.18\",\"latest\":\"v1.18.20+k3s1\",\"latestRegexp\":\"v1\\\\.18\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.18-testing\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.18-testing\"},\"name\":\"v1.18-testing\",\"latest\":\"v1.18.2-rc3+k3s1\",\"latestRegexp\":\"v1\\\\.18\\\\.[0-9]*-(alpha|beta|rc)\"},{\"id\":\"v1.19\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.19\"},\"name\":\"v1.19\",\"latest\":\"v1.19.16+k3s1\",\"latestRegexp\":\"v1\\\\.19\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.20\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.20\"},\"name\":\"v1.20\",\"latest\":\"v1.20.15+k3s1\",\"latestRegexp\":\"v1\\\\.20\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.21\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.21\"},\"name\":\"v1.21\",\"latest\":\"v1.21.14+k3s1\",\"latestRegexp\":\"v1\\\\.21\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.22\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.22\"},\"name\":\"v1.22\",\"latest\":\"v1.22.17+k3s1\",\"latestRegexp\":\"v1\\\\.22\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.23\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.23\"},\"name\":\"v1.23\",\"latest\":\"v1.23.17+k3s1\",\"latestRegexp\":\"v1\\\\.23\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.24\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.24\"},\"name\":\"v1.24\",\"latest\":\"v1.24.17+k3s1\",\"latestRegexp\":\"v1\\\\.24\\\\..*\",\"excludeRegexp\":\"(^[^+]+-|v1\\\\.24\\\\.9\\\\+k3s1)\"},{\"id\":\"v1.25\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.25\"},\"name\":\"v1.25\",\"latest\":\"v1.25.16+k3s4\",\"latestRegexp\":\"v1\\\\.25\\\\..*\",\"excludeRegexp\":\"(^[^+]+-|v1\\\\.25\\\\.5\\\\+k3s1)\"},{\"id\":\"v1.26\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.26\"},\"name\":\"v1.26\",\"latest\":\"v1.26.15+k3s1\",\"latestRegexp\":\"v1\\\\.26\\\\..*\",\"excludeRegexp\":\"(^[^+]+-|v1\\\\.26\\\\.0\\\\+k3s1)\"},{\"id\":\"v1.27\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.27\"},\"name\":\"v1.27\",\"latest\":\"v1.27.16+k3s1\",\"latestRegexp\":\"v1\\\\.27\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.28\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.28\"},\"name\":\"v1.28\",\"latest\":\"v1.28.15+k3s1\",\"latestRegexp\":\"v1\\\\.28\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.29\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.29\"},\"name\":\"v1.29\",\"latest\":\"v1.29.10+k3s1\",\"latestRegexp\":\"v1\\\\.29\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.30\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.30\"},\"name\":\"v1.30\",\"latest\":\"v1.30.6+k3s1\",\"latestRegexp\":\"v1\\\\.30\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.31\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.31\"},\"name\":\"v1.31\",\"latest\":\"v1.31.2+k3s1\",\"latestRegexp\":\"v1\\\\.31\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"}]}\n",
            "ca_cert_pem": null,
            "id": "https://update.k3s.io/v1-release/channels",
            "insecure": null,
            "method": null,
            "request_body": null,
            "request_headers": null,
            "request_timeout_ms": null,
            "response_body": "{\"type\":\"collection\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels\"},\"actions\":{},\"resourceType\":\"channel\",\"data\":[{\"id\":\"stable\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/stable\"},\"name\":\"stable\",\"latest\":\"v1.30.6+k3s1\"},{\"id\":\"latest\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/latest\"},\"name\":\"latest\",\"latest\":\"v1.31.2+k3s1\",\"latestRegexp\":\".*\",\"excludeRegexp\":\"(^[^+]+-|v1\\\\.25\\\\.5\\\\+k3s1|v1\\\\.26\\\\.0\\\\+k3s1)\"},{\"id\":\"testing\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/testing\"},\"name\":\"testing\",\"latest\":\"v1.18.2-rc3+k3s1\",\"latestRegexp\":\"-(alpha|beta|rc)\"},{\"id\":\"v1.16\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.16\"},\"name\":\"v1.16\",\"latest\":\"v1.16.15+k3s1\",\"latestRegexp\":\"v1\\\\.16\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.16-testing\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.16-testing\"},\"name\":\"v1.16-testing\",\"latestRegexp\":\"v1\\\\.16\\\\.[0-9]*-(alpha|beta|rc)\"},{\"id\":\"v1.17\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.17\"},\"name\":\"v1.17\",\"latest\":\"v1.17.17+k3s1\",\"latestRegexp\":\"v1\\\\.17\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.17-testing\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.17-testing\"},\"name\":\"v1.17-testing\",\"latestRegexp\":\"v1\\\\.17\\\\.[0-9]*-(alpha|beta|rc)\"},{\"id\":\"v1.18\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.18\"},\"name\":\"v1.18\",\"latest\":\"v1.18.20+k3s1\",\"latestRegexp\":\"v1\\\\.18\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.18-testing\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.18-testing\"},\"name\":\"v1.18-testing\",\"latest\":\"v1.18.2-rc3+k3s1\",\"latestRegexp\":\"v1\\\\.18\\\\.[0-9]*-(alpha|beta|rc)\"},{\"id\":\"v1.19\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.19\"},\"name\":\"v1.19\",\"latest\":\"v1.19.16+k3s1\",\"latestRegexp\":\"v1\\\\.19\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.20\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.20\"},\"name\":\"v1.20\",\"latest\":\"v1.20.15+k3s1\",\"latestRegexp\":\"v1\\\\.20\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.21\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.21\"},\"name\":\"v1.21\",\"latest\":\"v1.21.14+k3s1\",\"latestRegexp\":\"v1\\\\.21\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.22\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.22\"},\"name\":\"v1.22\",\"latest\":\"v1.22.17+k3s1\",\"latestRegexp\":\"v1\\\\.22\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.23\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.23\"},\"name\":\"v1.23\",\"latest\":\"v1.23.17+k3s1\",\"latestRegexp\":\"v1\\\\.23\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.24\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.24\"},\"name\":\"v1.24\",\"latest\":\"v1.24.17+k3s1\",\"latestRegexp\":\"v1\\\\.24\\\\..*\",\"excludeRegexp\":\"(^[^+]+-|v1\\\\.24\\\\.9\\\\+k3s1)\"},{\"id\":\"v1.25\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.25\"},\"name\":\"v1.25\",\"latest\":\"v1.25.16+k3s4\",\"latestRegexp\":\"v1\\\\.25\\\\..*\",\"excludeRegexp\":\"(^[^+]+-|v1\\\\.25\\\\.5\\\\+k3s1)\"},{\"id\":\"v1.26\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.26\"},\"name\":\"v1.26\",\"latest\":\"v1.26.15+k3s1\",\"latestRegexp\":\"v1\\\\.26\\\\..*\",\"excludeRegexp\":\"(^[^+]+-|v1\\\\.26\\\\.0\\\\+k3s1)\"},{\"id\":\"v1.27\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.27\"},\"name\":\"v1.27\",\"latest\":\"v1.27.16+k3s1\",\"latestRegexp\":\"v1\\\\.27\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.28\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.28\"},\"name\":\"v1.28\",\"latest\":\"v1.28.15+k3s1\",\"latestRegexp\":\"v1\\\\.28\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.29\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.29\"},\"name\":\"v1.29\",\"latest\":\"v1.29.10+k3s1\",\"latestRegexp\":\"v1\\\\.29\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.30\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.30\"},\"name\":\"v1.30\",\"latest\":\"v1.30.6+k3s1\",\"latestRegexp\":\"v1\\\\.30\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"},{\"id\":\"v1.31\",\"type\":\"channel\",\"links\":{\"self\":\"https://update.k3s.io/v1-release/channels/v1.31\"},\"name\":\"v1.31\",\"latest\":\"v1.31.2+k3s1\",\"latestRegexp\":\"v1\\\\.31\\\\..*\",\"excludeRegexp\":\"^[^+]+-\"}]}\n",
            "response_body_base64": "eyJ0eXBlIjoiY29sbGVjdGlvbiIsImxpbmtzIjp7InNlbGYiOiJodHRwczovL3VwZGF0ZS5rM3MuaW8vdjEtcmVsZWFzZS9jaGFubmVscyJ9LCJhY3Rpb25zIjp7fSwicmVzb3VyY2VUeXBlIjoiY2hhbm5lbCIsImRhdGEiOlt7ImlkIjoic3RhYmxlIiwidHlwZSI6ImNoYW5uZWwiLCJsaW5rcyI6eyJzZWxmIjoiaHR0cHM6Ly91cGRhdGUuazNzLmlvL3YxLXJlbGVhc2UvY2hhbm5lbHMvc3RhYmxlIn0sIm5hbWUiOiJzdGFibGUiLCJsYXRlc3QiOiJ2MS4zMC42K2szczEifSx7ImlkIjoibGF0ZXN0IiwidHlwZSI6ImNoYW5uZWwiLCJsaW5rcyI6eyJzZWxmIjoiaHR0cHM6Ly91cGRhdGUuazNzLmlvL3YxLXJlbGVhc2UvY2hhbm5lbHMvbGF0ZXN0In0sIm5hbWUiOiJsYXRlc3QiLCJsYXRlc3QiOiJ2MS4zMS4yK2szczEiLCJsYXRlc3RSZWdleHAiOiIuKiIsImV4Y2x1ZGVSZWdleHAiOiIoXlteK10rLXx2MVxcLjI1XFwuNVxcK2szczF8djFcXC4yNlxcLjBcXCtrM3MxKSJ9LHsiaWQiOiJ0ZXN0aW5nIiwidHlwZSI6ImNoYW5uZWwiLCJsaW5rcyI6eyJzZWxmIjoiaHR0cHM6Ly91cGRhdGUuazNzLmlvL3YxLXJlbGVhc2UvY2hhbm5lbHMvdGVzdGluZyJ9LCJuYW1lIjoidGVzdGluZyIsImxhdGVzdCI6InYxLjE4LjItcmMzK2szczEiLCJsYXRlc3RSZWdleHAiOiItKGFscGhhfGJldGF8cmMpIn0seyJpZCI6InYxLjE2IiwidHlwZSI6ImNoYW5uZWwiLCJsaW5rcyI6eyJzZWxmIjoiaHR0cHM6Ly91cGRhdGUuazNzLmlvL3YxLXJlbGVhc2UvY2hhbm5lbHMvdjEuMTYifSwibmFtZSI6InYxLjE2IiwibGF0ZXN0IjoidjEuMTYuMTUrazNzMSIsImxhdGVzdFJlZ2V4cCI6InYxXFwuMTZcXC4uKiIsImV4Y2x1ZGVSZWdleHAiOiJeW14rXSstIn0seyJpZCI6InYxLjE2LXRlc3RpbmciLCJ0eXBlIjoiY2hhbm5lbCIsImxpbmtzIjp7InNlbGYiOiJodHRwczovL3VwZGF0ZS5rM3MuaW8vdjEtcmVsZWFzZS9jaGFubmVscy92MS4xNi10ZXN0aW5nIn0sIm5hbWUiOiJ2MS4xNi10ZXN0aW5nIiwibGF0ZXN0UmVnZXhwIjoidjFcXC4xNlxcLlswLTldKi0oYWxwaGF8YmV0YXxyYykifSx7ImlkIjoidjEuMTciLCJ0eXBlIjoiY2hhbm5lbCIsImxpbmtzIjp7InNlbGYiOiJodHRwczovL3VwZGF0ZS5rM3MuaW8vdjEtcmVsZWFzZS9jaGFubmVscy92MS4xNyJ9LCJuYW1lIjoidjEuMTciLCJsYXRlc3QiOiJ2MS4xNy4xNytrM3MxIiwibGF0ZXN0UmVnZXhwIjoidjFcXC4xN1xcLi4qIiwiZXhjbHVkZVJlZ2V4cCI6Il5bXitdKy0ifSx7ImlkIjoidjEuMTctdGVzdGluZyIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjE3LXRlc3RpbmcifSwibmFtZSI6InYxLjE3LXRlc3RpbmciLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjE3XFwuWzAtOV0qLShhbHBoYXxiZXRhfHJjKSJ9LHsiaWQiOiJ2MS4xOCIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjE4In0sIm5hbWUiOiJ2MS4xOCIsImxhdGVzdCI6InYxLjE4LjIwK2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjE4XFwuLioiLCJleGNsdWRlUmVnZXhwIjoiXlteK10rLSJ9LHsiaWQiOiJ2MS4xOC10ZXN0aW5nIiwidHlwZSI6ImNoYW5uZWwiLCJsaW5rcyI6eyJzZWxmIjoiaHR0cHM6Ly91cGRhdGUuazNzLmlvL3YxLXJlbGVhc2UvY2hhbm5lbHMvdjEuMTgtdGVzdGluZyJ9LCJuYW1lIjoidjEuMTgtdGVzdGluZyIsImxhdGVzdCI6InYxLjE4LjItcmMzK2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjE4XFwuWzAtOV0qLShhbHBoYXxiZXRhfHJjKSJ9LHsiaWQiOiJ2MS4xOSIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjE5In0sIm5hbWUiOiJ2MS4xOSIsImxhdGVzdCI6InYxLjE5LjE2K2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjE5XFwuLioiLCJleGNsdWRlUmVnZXhwIjoiXlteK10rLSJ9LHsiaWQiOiJ2MS4yMCIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjIwIn0sIm5hbWUiOiJ2MS4yMCIsImxhdGVzdCI6InYxLjIwLjE1K2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjIwXFwuLioiLCJleGNsdWRlUmVnZXhwIjoiXlteK10rLSJ9LHsiaWQiOiJ2MS4yMSIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjIxIn0sIm5hbWUiOiJ2MS4yMSIsImxhdGVzdCI6InYxLjIxLjE0K2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjIxXFwuLioiLCJleGNsdWRlUmVnZXhwIjoiXlteK10rLSJ9LHsiaWQiOiJ2MS4yMiIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjIyIn0sIm5hbWUiOiJ2MS4yMiIsImxhdGVzdCI6InYxLjIyLjE3K2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjIyXFwuLioiLCJleGNsdWRlUmVnZXhwIjoiXlteK10rLSJ9LHsiaWQiOiJ2MS4yMyIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjIzIn0sIm5hbWUiOiJ2MS4yMyIsImxhdGVzdCI6InYxLjIzLjE3K2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjIzXFwuLioiLCJleGNsdWRlUmVnZXhwIjoiXlteK10rLSJ9LHsiaWQiOiJ2MS4yNCIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjI0In0sIm5hbWUiOiJ2MS4yNCIsImxhdGVzdCI6InYxLjI0LjE3K2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjI0XFwuLioiLCJleGNsdWRlUmVnZXhwIjoiKF5bXitdKy18djFcXC4yNFxcLjlcXCtrM3MxKSJ9LHsiaWQiOiJ2MS4yNSIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjI1In0sIm5hbWUiOiJ2MS4yNSIsImxhdGVzdCI6InYxLjI1LjE2K2szczQiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjI1XFwuLioiLCJleGNsdWRlUmVnZXhwIjoiKF5bXitdKy18djFcXC4yNVxcLjVcXCtrM3MxKSJ9LHsiaWQiOiJ2MS4yNiIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjI2In0sIm5hbWUiOiJ2MS4yNiIsImxhdGVzdCI6InYxLjI2LjE1K2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjI2XFwuLioiLCJleGNsdWRlUmVnZXhwIjoiKF5bXitdKy18djFcXC4yNlxcLjBcXCtrM3MxKSJ9LHsiaWQiOiJ2MS4yNyIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjI3In0sIm5hbWUiOiJ2MS4yNyIsImxhdGVzdCI6InYxLjI3LjE2K2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjI3XFwuLioiLCJleGNsdWRlUmVnZXhwIjoiXlteK10rLSJ9LHsiaWQiOiJ2MS4yOCIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjI4In0sIm5hbWUiOiJ2MS4yOCIsImxhdGVzdCI6InYxLjI4LjE1K2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjI4XFwuLioiLCJleGNsdWRlUmVnZXhwIjoiXlteK10rLSJ9LHsiaWQiOiJ2MS4yOSIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjI5In0sIm5hbWUiOiJ2MS4yOSIsImxhdGVzdCI6InYxLjI5LjEwK2szczEiLCJsYXRlc3RSZWdleHAiOiJ2MVxcLjI5XFwuLioiLCJleGNsdWRlUmVnZXhwIjoiXlteK10rLSJ9LHsiaWQiOiJ2MS4zMCIsInR5cGUiOiJjaGFubmVsIiwibGlua3MiOnsic2VsZiI6Imh0dHBzOi8vdXBkYXRlLmszcy5pby92MS1yZWxlYXNlL2NoYW5uZWxzL3YxLjMwIn0sIm5hbWUiOiJ2MS4zMCIsImxhdGVzdCI6InYxLjMwLjYrazNzMSIsImxhdGVzdFJlZ2V4cCI6InYxXFwuMzBcXC4uKiIsImV4Y2x1ZGVSZWdleHAiOiJeW14rXSstIn0seyJpZCI6InYxLjMxIiwidHlwZSI6ImNoYW5uZWwiLCJsaW5rcyI6eyJzZWxmIjoiaHR0cHM6Ly91cGRhdGUuazNzLmlvL3YxLXJlbGVhc2UvY2hhbm5lbHMvdjEuMzEifSwibmFtZSI6InYxLjMxIiwibGF0ZXN0IjoidjEuMzEuMitrM3MxIiwibGF0ZXN0UmVnZXhwIjoidjFcXC4zMVxcLi4qIiwiZXhjbHVkZVJlZ2V4cCI6Il5bXitdKy0ifV19Cg==",
            "response_headers": {
              "Accept-Ranges": "bytes",
              "Alt-Svc": "h3=\":443\"; ma=86400",
              "Cache-Control": "max-age=14400",
              "Cf-Cache-Status": "HIT",
              "Cf-Ray": "8ee06752aef20976-HKG",
              "Content-Type": "application/json",
              "Date": "Sat, 07 Dec 2024 00:29:50 GMT",
              "Expires": "Wed 24 Feb 1982 18:42:00 GMT",
              "Last-Modified": "Fri, 06 Dec 2024 22:44:18 GMT",
              "Nel": "{\"success_fraction\":0,\"report_to\":\"cf-nel\",\"max_age\":604800}",
              "Report-To": "{\"endpoints\":[{\"url\":\"https:\\/\\/a.nel.cloudflare.com\\/report\\/v4?s=w8fWrlEOIm4R7EPl2mdARA9TjRQMMkZavNW%2F3dQo1d75DiEqb7IvSzFUrOYnbPNCM%2BC0tC%2BCZeTMWO5ODZCAVp9EkjWWXpWzjhpYrDTO9hjhkN91dRgJp9HTcWtlFD%2FX\"}],\"group\":\"cf-nel\",\"max_age\":604800}",
              "Server": "cloudflare",
              "Server-Timing": "cfL4;desc=\"?proto=TCP\u0026rtt=1368\u0026min_rtt=1245\u0026rtt_var=439\u0026sent=7\u0026recv=8\u0026lost=0\u0026retrans=0\u0026sent_bytes=3161\u0026recv_bytes=535\u0026delivery_rate=3271084\u0026cwnd=253\u0026unsent_bytes=0\u0026cid=c767651f36886faf\u0026ts=236\u0026x=0\"",
              "Strict-Transport-Security": "max-age=15552000; includeSubDomains; preload",
              "Vary": "Accept-Encoding",
              "X-Api-Schemas": "https://update.k3s.io/v1-release/schemas",
              "X-Content-Type-Options": "nosniff"
            },
            "retry": null,
            "status_code": 200,
            "url": "https://update.k3s.io/v1-release/channels"
          },
          "sensitive_attributes": []
        }
      ]
    },
    {
      "module": "module.k3s2.module.k3s",
      "mode": "managed",
      "type": "null_resource",
      "name": "k8s_ca_certificates_install",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "id": "1500185530701532093",
            "triggers": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.cvm2.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm2.data.tencentcloud_images.default",
            "module.cvm2.data.tencentcloud_instance_types.default",
            "module.cvm2.tencentcloud_instance.ubuntu",
            "module.k3s2.module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s2.module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 0,
          "attributes": {
            "id": "3144805056888319100",
            "triggers": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.cvm2.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm2.data.tencentcloud_images.default",
            "module.cvm2.data.tencentcloud_instance_types.default",
            "module.cvm2.tencentcloud_instance.ubuntu",
            "module.k3s2.module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s2.module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 0,
          "attributes": {
            "id": "4607854415359829027",
            "triggers": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.cvm2.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm2.data.tencentcloud_images.default",
            "module.cvm2.data.tencentcloud_instance_types.default",
            "module.cvm2.tencentcloud_instance.ubuntu",
            "module.k3s2.module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s2.module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        },
        {
          "index_key": 3,
          "schema_version": 0,
          "attributes": {
            "id": "3304029897052645814",
            "triggers": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.cvm2.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm2.data.tencentcloud_images.default",
            "module.cvm2.data.tencentcloud_instance_types.default",
            "module.cvm2.tencentcloud_instance.ubuntu",
            "module.k3s2.module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s2.module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        },
        {
          "index_key": 4,
          "schema_version": 0,
          "attributes": {
            "id": "1031859913187252525",
            "triggers": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.cvm2.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm2.data.tencentcloud_images.default",
            "module.cvm2.data.tencentcloud_instance_types.default",
            "module.cvm2.tencentcloud_instance.ubuntu",
            "module.k3s2.module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s2.module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        },
        {
          "index_key": 5,
          "schema_version": 0,
          "attributes": {
            "id": "6443355869508094287",
            "triggers": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.cvm2.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm2.data.tencentcloud_images.default",
            "module.cvm2.data.tencentcloud_instance_types.default",
            "module.cvm2.tencentcloud_instance.ubuntu",
            "module.k3s2.module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s2.module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "module": "module.k3s2.module.k3s",
      "mode": "managed",
      "type": "null_resource",
      "name": "kubernetes_ready",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "id": "5114840097493076985",
            "triggers": null
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.cvm2.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm2.data.tencentcloud_images.default",
            "module.cvm2.data.tencentcloud_instance_types.default",
            "module.cvm2.tencentcloud_instance.ubuntu",
            "module.k3s2.module.k3s.data.http.k3s_installer",
            "module.k3s2.module.k3s.data.http.k3s_version",
            "module.k3s2.module.k3s.null_resource.agents_annotation",
            "module.k3s2.module.k3s.null_resource.agents_drain",
            "module.k3s2.module.k3s.null_resource.agents_install",
            "module.k3s2.module.k3s.null_resource.agents_label",
            "module.k3s2.module.k3s.null_resource.agents_taint",
            "module.k3s2.module.k3s.null_resource.k8s_ca_certificates_install",
            "module.k3s2.module.k3s.null_resource.servers_annotation",
            "module.k3s2.module.k3s.null_resource.servers_drain",
            "module.k3s2.module.k3s.null_resource.servers_install",
            "module.k3s2.module.k3s.null_resource.servers_label",
            "module.k3s2.module.k3s.null_resource.servers_taint",
            "module.k3s2.module.k3s.random_password.k3s_cluster_secret",
            "module.k3s2.module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s2.module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "module": "module.k3s2.module.k3s",
      "mode": "managed",
      "type": "null_resource",
      "name": "servers_drain",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "index_key": "cluster-2",
          "schema_version": 0,
          "attributes": {
            "id": "3112305768048550117",
            "triggers": {
              "connection_json": "eyJhZ2VudCI6bnVsbCwiYWdlbnRfaWRlbnRpdHkiOm51bGwsImJhc3Rpb25fY2VydGlmaWNhdGUiOm51bGwsImJhc3Rpb25faG9zdCI6bnVsbCwiYmFzdGlvbl9ob3N0X2tleSI6bnVsbCwiYmFzdGlvbl9wYXNzd29yZCI6bnVsbCwiYmFzdGlvbl9wb3J0IjpudWxsLCJiYXN0aW9uX3ByaXZhdGVfa2V5IjpudWxsLCJiYXN0aW9uX3VzZXIiOm51bGwsImNhY2VydCI6bnVsbCwiY2VydGlmaWNhdGUiOm51bGwsImhvc3QiOiI0My4xMzUuOTIuMjI5IiwiaG9zdF9rZXkiOm51bGwsImh0dHBzIjpudWxsLCJpbnNlY3VyZSI6bnVsbCwicGFzc3dvcmQiOiJxd2UxMjNld3EiLCJwb3J0IjpudWxsLCJwcml2YXRlX2tleSI6bnVsbCwic2NyaXB0X3BhdGgiOm51bGwsInRpbWVvdXQiOiIzMHMiLCJ0eXBlIjoic3NoIiwidXNlX250bG0iOm51bGwsInVzZXIiOiJ1YnVudHUifQ==",
              "drain_timeout": "0s",
              "kubectl_cmd": "kubectl",
              "server_name": "cluster-2"
            }
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.cvm2.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm2.data.tencentcloud_images.default",
            "module.cvm2.data.tencentcloud_instance_types.default",
            "module.cvm2.tencentcloud_instance.ubuntu",
            "module.k3s2.module.k3s.data.http.k3s_installer",
            "module.k3s2.module.k3s.data.http.k3s_version",
            "module.k3s2.module.k3s.null_resource.k8s_ca_certificates_install",
            "module.k3s2.module.k3s.null_resource.servers_install",
            "module.k3s2.module.k3s.random_password.k3s_cluster_secret",
            "module.k3s2.module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s2.module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "module": "module.k3s2.module.k3s",
      "mode": "managed",
      "type": "null_resource",
      "name": "servers_install",
      "provider": "provider[\"registry.terraform.io/hashicorp/null\"]",
      "instances": [
        {
          "index_key": "cluster-2",
          "schema_version": 0,
          "attributes": {
            "id": "6966488945399931179",
            "triggers": {
              "on_immutable_changes": "7953f487fd0fde5b1f382ca70d7f0aeaab66b41f",
              "on_new_version": "v1.31.2+k3s1"
            }
          },
          "sensitive_attributes": [],
          "dependencies": [
            "module.cvm2.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm2.data.tencentcloud_images.default",
            "module.cvm2.data.tencentcloud_instance_types.default",
            "module.cvm2.tencentcloud_instance.ubuntu",
            "module.k3s2.module.k3s.data.http.k3s_installer",
            "module.k3s2.module.k3s.data.http.k3s_version",
            "module.k3s2.module.k3s.null_resource.k8s_ca_certificates_install",
            "module.k3s2.module.k3s.random_password.k3s_cluster_secret",
            "module.k3s2.module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s2.module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "module": "module.k3s2.module.k3s",
      "mode": "managed",
      "type": "random_password",
      "name": "k3s_cluster_secret",
      "provider": "provider[\"registry.terraform.io/hashicorp/random\"]",
      "instances": [
        {
          "schema_version": 3,
          "attributes": {
            "bcrypt_hash": "$2a$10$SfyByRIQK146j/vOX393XOOlBE3HUNKtCO.Ctlc6AxXpmZxcLMCAy",
            "id": "none",
            "keepers": null,
            "length": 48,
            "lower": true,
            "min_lower": 0,
            "min_numeric": 0,
            "min_special": 0,
            "min_upper": 0,
            "number": true,
            "numeric": true,
            "override_special": null,
            "result": "9iwJAIFaFWueiOWWyhx9ISCyPs3pefzsxslPRcQbBVrAQxma",
            "special": false,
            "upper": true
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "result"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "bcrypt_hash"
              }
            ]
          ],
          "dependencies": [
            "module.cvm2.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm2.data.tencentcloud_images.default",
            "module.cvm2.data.tencentcloud_instance_types.default",
            "module.cvm2.tencentcloud_instance.ubuntu",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "module": "module.k3s2.module.k3s",
      "mode": "managed",
      "type": "tls_cert_request",
      "name": "master_user",
      "provider": "provider[\"registry.terraform.io/hashicorp/tls\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "cert_request_pem": "-----BEGIN CERTIFICATE REQUEST-----\nMIIBJzCBrgIBADAvMRcwFQYDVQQKEw5zeXN0ZW06bWFzdGVyczEUMBIGA1UEAxML\nbWFzdGVyLXVzZXIwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAAT/MpVJxKw4AaCQ4cRT\n0G4e+1a2dKyo6t7vXMw4wfU3COYzROvsyeiqUsOBR2g+9EJ5bN/aUdsSAhtO+DLM\nZG0/tpfm4NxxlHBAkyM2ty/FvA1i8uUsNPUcq4vnyw0bQ+qgADAKBggqhkjOPQQD\nAwNoADBlAjEAxMelQQ2vlBwswIY4MNQY6Dxjltt4petrPVpCmnbyiIsPrrZ8clhh\nKcjjLm4gmmmdAjBnAdbCm/xGBWpahJ3nxfxpnMc22r6YGAaslScqbtLcJfTJt3vI\nNisgLlVj77uLrZg=\n-----END CERTIFICATE REQUEST-----\n",
            "dns_names": null,
            "id": "d2ee400f30fd7438013410332e66b773ba9743c3",
            "ip_addresses": null,
            "key_algorithm": "ECDSA",
            "private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDBQJB/z6Ukml9Vl6+B3SNzR+4g/XSogsnv0pDZhRfpAO6N3ReXqyfU3\nD4G6jUi89xigBwYFK4EEACKhZANiAAT/MpVJxKw4AaCQ4cRT0G4e+1a2dKyo6t7v\nXMw4wfU3COYzROvsyeiqUsOBR2g+9EJ5bN/aUdsSAhtO+DLMZG0/tpfm4NxxlHBA\nkyM2ty/FvA1i8uUsNPUcq4vnyw0bQ+o=\n-----END EC PRIVATE KEY-----\n",
            "subject": [
              {
                "common_name": "master-user",
                "country": null,
                "locality": null,
                "organization": "system:masters",
                "organizational_unit": null,
                "postal_code": null,
                "province": null,
                "serial_number": null,
                "street_address": null
              }
            ],
            "uris": null
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "private_key_pem"
              }
            ]
          ],
          "dependencies": [
            "module.cvm2.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm2.data.tencentcloud_images.default",
            "module.cvm2.data.tencentcloud_instance_types.default",
            "module.cvm2.tencentcloud_instance.ubuntu",
            "module.k3s2.module.k3s.tls_private_key.master_user",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "module": "module.k3s2.module.k3s",
      "mode": "managed",
      "type": "tls_locally_signed_cert",
      "name": "master_user",
      "provider": "provider[\"registry.terraform.io/hashicorp/tls\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 0,
          "attributes": {
            "allowed_uses": [
              "key_encipherment",
              "digital_signature",
              "client_auth"
            ],
            "ca_cert_pem": "-----BEGIN CERTIFICATE-----\nMIIBvjCCAUOgAwIBAgIQU5fJLyMWshAKn0H00gX5vTAKBggqhkjOPQQDAzAfMR0w\nGwYDVQQDExRrdWJlcm5ldGVzLWNsaWVudC1jYTAgFw0yNDEyMDcwMDI5NTBaGA8y\nMTI0MTIwODAwMjk1MFowHzEdMBsGA1UEAxMUa3ViZXJuZXRlcy1jbGllbnQtY2Ew\ndjAQBgcqhkjOPQIBBgUrgQQAIgNiAAT2gA3x19IkRZNvw3DwP5OfjqhQMuMO1UTh\nWnATPzwDrnzBvca/oAa9rzzW3K1M9yQ0Sb2+E4nfkHHGIeSTaU7yYrlo7ZzScf/V\ngY5TpoyStzAxiORsu1GiC3nsqfkfBZyjQjBAMA4GA1UdDwEB/wQEAwICpDAPBgNV\nHRMBAf8EBTADAQH/MB0GA1UdDgQWBBQYYGLbIQKZO0sIEEdAe43+1ZOhLjAKBggq\nhkjOPQQDAwNpADBmAjEAmNiBmXT+FtGWhYXqJ3VtlNf46c9x4MkKVojoBTeHVsWF\nOGnp1OhJOAj+oY0itx6bAjEA3UH/mn+IdmGcAAlXwFKz+CLhNWrH9b+ZyoAZoXPI\nlXNxWKeWrdpm0zqixlQjTWJh\n-----END CERTIFICATE-----\n",
            "ca_key_algorithm": "ECDSA",
            "ca_private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDAJP2DzrpeNGR3sbNAHGxtUcnSLxxYB24ybAOKp9IYKp84Oj3iFdTQG\nuU3q7VwLxOagBwYFK4EEACKhZANiAAT2gA3x19IkRZNvw3DwP5OfjqhQMuMO1UTh\nWnATPzwDrnzBvca/oAa9rzzW3K1M9yQ0Sb2+E4nfkHHGIeSTaU7yYrlo7ZzScf/V\ngY5TpoyStzAxiORsu1GiC3nsqfkfBZw=\n-----END EC PRIVATE KEY-----\n",
            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIB4jCCAWigAwIBAgIRAPC95eum/1k7PxkAC/II8hUwCgYIKoZIzj0EAwMwHzEd\nMBsGA1UEAxMUa3ViZXJuZXRlcy1jbGllbnQtY2EwIBcNMjQxMjA3MDAyOTUwWhgP\nMjEyNDEyMDgwMDI5NTBaMC8xFzAVBgNVBAoTDnN5c3RlbTptYXN0ZXJzMRQwEgYD\nVQQDEwttYXN0ZXItdXNlcjB2MBAGByqGSM49AgEGBSuBBAAiA2IABP8ylUnErDgB\noJDhxFPQbh77VrZ0rKjq3u9czDjB9TcI5jNE6+zJ6KpSw4FHaD70Qnls39pR2xIC\nG074MsxkbT+2l+bg3HGUcECTIza3L8W8DWLy5Sw09Ryri+fLDRtD6qNWMFQwDgYD\nVR0PAQH/BAQDAgWgMBMGA1UdJQQMMAoGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAw\nHwYDVR0jBBgwFoAUGGBi2yECmTtLCBBHQHuN/tWToS4wCgYIKoZIzj0EAwMDaAAw\nZQIxAOm78IPt/BkuhH/63GeBS1OJBBcP2T2jL+OsEHlv4rtRm/Rtfa8+mpl2X24L\nWz48rgIwNjeS7fBguc0vSdkkbTPdB0evwtkIUBkmDQdhbnmziDc8H7XldpG0IKCR\nYC8Aux9A\n-----END CERTIFICATE-----\n",
            "cert_request_pem": "-----BEGIN CERTIFICATE REQUEST-----\nMIIBJzCBrgIBADAvMRcwFQYDVQQKEw5zeXN0ZW06bWFzdGVyczEUMBIGA1UEAxML\nbWFzdGVyLXVzZXIwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAAT/MpVJxKw4AaCQ4cRT\n0G4e+1a2dKyo6t7vXMw4wfU3COYzROvsyeiqUsOBR2g+9EJ5bN/aUdsSAhtO+DLM\nZG0/tpfm4NxxlHBAkyM2ty/FvA1i8uUsNPUcq4vnyw0bQ+qgADAKBggqhkjOPQQD\nAwNoADBlAjEAxMelQQ2vlBwswIY4MNQY6Dxjltt4petrPVpCmnbyiIsPrrZ8clhh\nKcjjLm4gmmmdAjBnAdbCm/xGBWpahJ3nxfxpnMc22r6YGAaslScqbtLcJfTJt3vI\nNisgLlVj77uLrZg=\n-----END CERTIFICATE REQUEST-----\n",
            "early_renewal_hours": 0,
            "id": "320000726436743528101218929622141956629",
            "is_ca_certificate": false,
            "ready_for_renewal": false,
            "set_subject_key_id": false,
            "validity_end_time": "2124-12-08T08:29:50.519905392+08:00",
            "validity_period_hours": 876600,
            "validity_start_time": "2024-12-07T08:29:50.519905392+08:00"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "ca_private_key_pem"
              }
            ]
          ],
          "dependencies": [
            "module.cvm2.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm2.data.tencentcloud_images.default",
            "module.cvm2.data.tencentcloud_instance_types.default",
            "module.cvm2.tencentcloud_instance.ubuntu",
            "module.k3s2.module.k3s.tls_cert_request.master_user",
            "module.k3s2.module.k3s.tls_private_key.kubernetes_ca",
            "module.k3s2.module.k3s.tls_private_key.master_user",
            "module.k3s2.module.k3s.tls_self_signed_cert.kubernetes_ca_certs",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "module": "module.k3s2.module.k3s",
      "mode": "managed",
      "type": "tls_private_key",
      "name": "kubernetes_ca",
      "provider": "provider[\"registry.terraform.io/hashicorp/tls\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "algorithm": "ECDSA",
            "ecdsa_curve": "P384",
            "id": "8796582bb2cf5221543f7619fee90dd92435a37a",
            "private_key_openssh": "-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAiAAAABNl\nY2RzYS1zaGEyLW5pc3RwMzg0AAAACG5pc3RwMzg0AAAAYQT2gA3x19IkRZNvw3Dw\nP5OfjqhQMuMO1UThWnATPzwDrnzBvca/oAa9rzzW3K1M9yQ0Sb2+E4nfkHHGIeST\naU7yYrlo7ZzScf/VgY5TpoyStzAxiORsu1GiC3nsqfkfBZwAAADIFqdfdBanX3QA\nAAATZWNkc2Etc2hhMi1uaXN0cDM4NAAAAAhuaXN0cDM4NAAAAGEE9oAN8dfSJEWT\nb8Nw8D+Tn46oUDLjDtVE4VpwEz88A658wb3Gv6AGva881tytTPckNEm9vhOJ35Bx\nxiHkk2lO8mK5aO2c0nH/1YGOU6aMkrcwMYjkbLtRogt57Kn5HwWcAAAAMAk/YPOu\nl40ZHexs0AcbG1RydIvHFgHbjJsA4qn0hgqnzg6PeIV1NAa5TertXAvE5gAAAAA=\n-----END OPENSSH PRIVATE KEY-----\n",
            "private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDAJP2DzrpeNGR3sbNAHGxtUcnSLxxYB24ybAOKp9IYKp84Oj3iFdTQG\nuU3q7VwLxOagBwYFK4EEACKhZANiAAT2gA3x19IkRZNvw3DwP5OfjqhQMuMO1UTh\nWnATPzwDrnzBvca/oAa9rzzW3K1M9yQ0Sb2+E4nfkHHGIeSTaU7yYrlo7ZzScf/V\ngY5TpoyStzAxiORsu1GiC3nsqfkfBZw=\n-----END EC PRIVATE KEY-----\n",
            "private_key_pem_pkcs8": "-----BEGIN PRIVATE KEY-----\nMIG2AgEAMBAGByqGSM49AgEGBSuBBAAiBIGeMIGbAgEBBDAJP2DzrpeNGR3sbNAH\nGxtUcnSLxxYB24ybAOKp9IYKp84Oj3iFdTQGuU3q7VwLxOahZANiAAT2gA3x19Ik\nRZNvw3DwP5OfjqhQMuMO1UThWnATPzwDrnzBvca/oAa9rzzW3K1M9yQ0Sb2+E4nf\nkHHGIeSTaU7yYrlo7ZzScf/VgY5TpoyStzAxiORsu1GiC3nsqfkfBZw=\n-----END PRIVATE KEY-----\n",
            "public_key_fingerprint_md5": "84:2d:26:bc:7b:4f:4b:f6:af:55:d5:c5:23:51:55:b3",
            "public_key_fingerprint_sha256": "SHA256:jqZyCnY56aID88VgR49ODizlRvYR6/0jEK0NIkh/KyI",
            "public_key_openssh": "ecdsa-sha2-nistp384 AAAAE2VjZHNhLXNoYTItbmlzdHAzODQAAAAIbmlzdHAzODQAAABhBPaADfHX0iRFk2/DcPA/k5+OqFAy4w7VROFacBM/PAOufMG9xr+gBr2vPNbcrUz3JDRJvb4Tid+QccYh5JNpTvJiuWjtnNJx/9WBjlOmjJK3MDGI5Gy7UaILeeyp+R8FnA==\n",
            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAE9oAN8dfSJEWTb8Nw8D+Tn46oUDLjDtVE\n4VpwEz88A658wb3Gv6AGva881tytTPckNEm9vhOJ35BxxiHkk2lO8mK5aO2c0nH/\n1YGOU6aMkrcwMYjkbLtRogt57Kn5HwWc\n-----END PUBLIC KEY-----\n",
            "rsa_bits": 2048
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "private_key_pem"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "private_key_pem_pkcs8"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "private_key_openssh"
              }
            ]
          ],
          "dependencies": [
            "module.cvm2.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm2.data.tencentcloud_images.default",
            "module.cvm2.data.tencentcloud_instance_types.default",
            "module.cvm2.tencentcloud_instance.ubuntu",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        },
        {
          "index_key": 1,
          "schema_version": 1,
          "attributes": {
            "algorithm": "ECDSA",
            "ecdsa_curve": "P384",
            "id": "11c26b024007db479e336597ae531decb4beeeb6",
            "private_key_openssh": "-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAiAAAABNl\nY2RzYS1zaGEyLW5pc3RwMzg0AAAACG5pc3RwMzg0AAAAYQQ1V2TT4NhgLUCUVoSi\nFfzrrubvHzE3FgUlFYGDUmKFu6cuSsL/8fShTI2YC9wfUU3N+rO2oTKbr93HkNUo\norVjnchr3RGPhjj84flYDSXXj39IEwrmWsrC3WOWrIHjMa0AAADItnAVQrZwFUIA\nAAATZWNkc2Etc2hhMi1uaXN0cDM4NAAAAAhuaXN0cDM4NAAAAGEENVdk0+DYYC1A\nlFaEohX8667m7x8xNxYFJRWBg1JihbunLkrC//H0oUyNmAvcH1FNzfqztqEym6/d\nx5DVKKK1Y53Ia90Rj4Y4/OH5WA0l149/SBMK5lrKwt1jlqyB4zGtAAAAMCM31cca\n81uC56gGLXr816n7G9lEVvANGz9ifBvQK1hpFv9twQM4aOHXu+NeeXurVAAAAAA=\n-----END OPENSSH PRIVATE KEY-----\n",
            "private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDAjN9XHGvNbgueoBi16/Nep+xvZRFbwDRs/Ynwb0CtYaRb/bcEDOGjh\n17vjXnl7q1SgBwYFK4EEACKhZANiAAQ1V2TT4NhgLUCUVoSiFfzrrubvHzE3FgUl\nFYGDUmKFu6cuSsL/8fShTI2YC9wfUU3N+rO2oTKbr93HkNUoorVjnchr3RGPhjj8\n4flYDSXXj39IEwrmWsrC3WOWrIHjMa0=\n-----END EC PRIVATE KEY-----\n",
            "private_key_pem_pkcs8": "-----BEGIN PRIVATE KEY-----\nMIG2AgEAMBAGByqGSM49AgEGBSuBBAAiBIGeMIGbAgEBBDAjN9XHGvNbgueoBi16\n/Nep+xvZRFbwDRs/Ynwb0CtYaRb/bcEDOGjh17vjXnl7q1ShZANiAAQ1V2TT4Nhg\nLUCUVoSiFfzrrubvHzE3FgUlFYGDUmKFu6cuSsL/8fShTI2YC9wfUU3N+rO2oTKb\nr93HkNUoorVjnchr3RGPhjj84flYDSXXj39IEwrmWsrC3WOWrIHjMa0=\n-----END PRIVATE KEY-----\n",
            "public_key_fingerprint_md5": "55:e4:e2:67:7e:a4:86:de:a8:60:ab:9c:c8:b1:05:28",
            "public_key_fingerprint_sha256": "SHA256:3r0NcgC0oWaVPnfDMA9vhmOlJhxRK39dnDZbELiHEaM",
            "public_key_openssh": "ecdsa-sha2-nistp384 AAAAE2VjZHNhLXNoYTItbmlzdHAzODQAAAAIbmlzdHAzODQAAABhBDVXZNPg2GAtQJRWhKIV/Ouu5u8fMTcWBSUVgYNSYoW7py5Kwv/x9KFMjZgL3B9RTc36s7ahMpuv3ceQ1SiitWOdyGvdEY+GOPzh+VgNJdePf0gTCuZaysLdY5asgeMxrQ==\n",
            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAENVdk0+DYYC1AlFaEohX8667m7x8xNxYF\nJRWBg1JihbunLkrC//H0oUyNmAvcH1FNzfqztqEym6/dx5DVKKK1Y53Ia90Rj4Y4\n/OH5WA0l149/SBMK5lrKwt1jlqyB4zGt\n-----END PUBLIC KEY-----\n",
            "rsa_bits": 2048
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "private_key_pem"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "private_key_pem_pkcs8"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "private_key_openssh"
              }
            ]
          ],
          "dependencies": [
            "module.cvm2.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm2.data.tencentcloud_images.default",
            "module.cvm2.data.tencentcloud_instance_types.default",
            "module.cvm2.tencentcloud_instance.ubuntu",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        },
        {
          "index_key": 2,
          "schema_version": 1,
          "attributes": {
            "algorithm": "ECDSA",
            "ecdsa_curve": "P384",
            "id": "be2592263c93818685a5e7b8153ab9e246dcb3fe",
            "private_key_openssh": "-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAiAAAABNl\nY2RzYS1zaGEyLW5pc3RwMzg0AAAACG5pc3RwMzg0AAAAYQReFjGiwBLPhRJZhAvk\n8KIex8vUUn8xv8w/roNUrJ8qYTX0uX5BDduf0hQ3nVPFahluuEHM1tJnDhYDcOAG\n9yl0Hefafk7RpqFb9GO6LeViUTzOy8LwyUDdFfs/cbTZb7EAAADIMEw7/DBMO/wA\nAAATZWNkc2Etc2hhMi1uaXN0cDM4NAAAAAhuaXN0cDM4NAAAAGEEXhYxosASz4US\nWYQL5PCiHsfL1FJ/Mb/MP66DVKyfKmE19Ll+QQ3bn9IUN51TxWoZbrhBzNbSZw4W\nA3DgBvcpdB3n2n5O0aahW/Rjui3lYlE8zsvC8MlA3RX7P3G02W+xAAAAMGWC7px3\nvzFf5JmY/vUKi1QK9IvOvBXh/D07SenksRtqKQjFVVJKe8hoxNN4ksylOQAAAAA=\n-----END OPENSSH PRIVATE KEY-----\n",
            "private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDBlgu6cd78xX+SZmP71CotUCvSLzrwV4fw9O0np5LEbaikIxVVSSnvI\naMTTeJLMpTmgBwYFK4EEACKhZANiAAReFjGiwBLPhRJZhAvk8KIex8vUUn8xv8w/\nroNUrJ8qYTX0uX5BDduf0hQ3nVPFahluuEHM1tJnDhYDcOAG9yl0Hefafk7RpqFb\n9GO6LeViUTzOy8LwyUDdFfs/cbTZb7E=\n-----END EC PRIVATE KEY-----\n",
            "private_key_pem_pkcs8": "-----BEGIN PRIVATE KEY-----\nMIG2AgEAMBAGByqGSM49AgEGBSuBBAAiBIGeMIGbAgEBBDBlgu6cd78xX+SZmP71\nCotUCvSLzrwV4fw9O0np5LEbaikIxVVSSnvIaMTTeJLMpTmhZANiAAReFjGiwBLP\nhRJZhAvk8KIex8vUUn8xv8w/roNUrJ8qYTX0uX5BDduf0hQ3nVPFahluuEHM1tJn\nDhYDcOAG9yl0Hefafk7RpqFb9GO6LeViUTzOy8LwyUDdFfs/cbTZb7E=\n-----END PRIVATE KEY-----\n",
            "public_key_fingerprint_md5": "18:73:25:c9:be:40:bf:61:1c:2b:13:af:aa:92:2f:c4",
            "public_key_fingerprint_sha256": "SHA256:uxwB8cb9RaQbHJ4px7xTJ6sAMwhf9Zv/6mmZ7FSPSUE",
            "public_key_openssh": "ecdsa-sha2-nistp384 AAAAE2VjZHNhLXNoYTItbmlzdHAzODQAAAAIbmlzdHAzODQAAABhBF4WMaLAEs+FElmEC+Twoh7Hy9RSfzG/zD+ug1SsnyphNfS5fkEN25/SFDedU8VqGW64QczW0mcOFgNw4Ab3KXQd59p+TtGmoVv0Y7ot5WJRPM7LwvDJQN0V+z9xtNlvsQ==\n",
            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAEXhYxosASz4USWYQL5PCiHsfL1FJ/Mb/M\nP66DVKyfKmE19Ll+QQ3bn9IUN51TxWoZbrhBzNbSZw4WA3DgBvcpdB3n2n5O0aah\nW/Rjui3lYlE8zsvC8MlA3RX7P3G02W+x\n-----END PUBLIC KEY-----\n",
            "rsa_bits": 2048
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "private_key_pem_pkcs8"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "private_key_pem"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "private_key_openssh"
              }
            ]
          ],
          "dependencies": [
            "module.cvm2.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm2.data.tencentcloud_images.default",
            "module.cvm2.data.tencentcloud_instance_types.default",
            "module.cvm2.tencentcloud_instance.ubuntu",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "module": "module.k3s2.module.k3s",
      "mode": "managed",
      "type": "tls_private_key",
      "name": "master_user",
      "provider": "provider[\"registry.terraform.io/hashicorp/tls\"]",
      "instances": [
        {
          "index_key": 0,
          "schema_version": 1,
          "attributes": {
            "algorithm": "ECDSA",
            "ecdsa_curve": "P384",
            "id": "89e904a0b3f99b0aff774b759f2b6ab3a57921ac",
            "private_key_openssh": "-----BEGIN OPENSSH PRIVATE KEY-----\nb3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAiAAAABNl\nY2RzYS1zaGEyLW5pc3RwMzg0AAAACG5pc3RwMzg0AAAAYQT/MpVJxKw4AaCQ4cRT\n0G4e+1a2dKyo6t7vXMw4wfU3COYzROvsyeiqUsOBR2g+9EJ5bN/aUdsSAhtO+DLM\nZG0/tpfm4NxxlHBAkyM2ty/FvA1i8uUsNPUcq4vnyw0bQ+oAAADItWjOurVozroA\nAAATZWNkc2Etc2hhMi1uaXN0cDM4NAAAAAhuaXN0cDM4NAAAAGEE/zKVScSsOAGg\nkOHEU9BuHvtWtnSsqOre71zMOMH1NwjmM0Tr7MnoqlLDgUdoPvRCeWzf2lHbEgIb\nTvgyzGRtP7aX5uDccZRwQJMjNrcvxbwNYvLlLDT1HKuL58sNG0PqAAAAMFAkH/Pp\nSSaX1WXr4HdI3NH7iD9dKiCye/SkNmFF+kA7o3dF5erJ9TcPgbqNSLz3GAAAAAA=\n-----END OPENSSH PRIVATE KEY-----\n",
            "private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDBQJB/z6Ukml9Vl6+B3SNzR+4g/XSogsnv0pDZhRfpAO6N3ReXqyfU3\nD4G6jUi89xigBwYFK4EEACKhZANiAAT/MpVJxKw4AaCQ4cRT0G4e+1a2dKyo6t7v\nXMw4wfU3COYzROvsyeiqUsOBR2g+9EJ5bN/aUdsSAhtO+DLMZG0/tpfm4NxxlHBA\nkyM2ty/FvA1i8uUsNPUcq4vnyw0bQ+o=\n-----END EC PRIVATE KEY-----\n",
            "private_key_pem_pkcs8": "-----BEGIN PRIVATE KEY-----\nMIG2AgEAMBAGByqGSM49AgEGBSuBBAAiBIGeMIGbAgEBBDBQJB/z6Ukml9Vl6+B3\nSNzR+4g/XSogsnv0pDZhRfpAO6N3ReXqyfU3D4G6jUi89xihZANiAAT/MpVJxKw4\nAaCQ4cRT0G4e+1a2dKyo6t7vXMw4wfU3COYzROvsyeiqUsOBR2g+9EJ5bN/aUdsS\nAhtO+DLMZG0/tpfm4NxxlHBAkyM2ty/FvA1i8uUsNPUcq4vnyw0bQ+o=\n-----END PRIVATE KEY-----\n",
            "public_key_fingerprint_md5": "77:e0:cd:e6:56:a1:85:17:ba:8a:94:2f:bb:0b:23:7a",
            "public_key_fingerprint_sha256": "SHA256:aRtG8MG+DkhlG1VyrCgk3H5Do2fjeF3OewfcNcuv1DM",
            "public_key_openssh": "ecdsa-sha2-nistp384 AAAAE2VjZHNhLXNoYTItbmlzdHAzODQAAAAIbmlzdHAzODQAAABhBP8ylUnErDgBoJDhxFPQbh77VrZ0rKjq3u9czDjB9TcI5jNE6+zJ6KpSw4FHaD70Qnls39pR2xICG074MsxkbT+2l+bg3HGUcECTIza3L8W8DWLy5Sw09Ryri+fLDRtD6g==\n",
            "public_key_pem": "-----BEGIN PUBLIC KEY-----\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAE/zKVScSsOAGgkOHEU9BuHvtWtnSsqOre\n71zMOMH1NwjmM0Tr7MnoqlLDgUdoPvRCeWzf2lHbEgIbTvgyzGRtP7aX5uDccZRw\nQJMjNrcvxbwNYvLlLDT1HKuL58sNG0Pq\n-----END PUBLIC KEY-----\n",
            "rsa_bits": 2048
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "private_key_pem_pkcs8"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "private_key_openssh"
              }
            ],
            [
              {
                "type": "get_attr",
                "value": "private_key_pem"
              }
            ]
          ],
          "dependencies": [
            "module.cvm2.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm2.data.tencentcloud_images.default",
            "module.cvm2.data.tencentcloud_instance_types.default",
            "module.cvm2.tencentcloud_instance.ubuntu",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "module": "module.k3s2.module.k3s",
      "mode": "managed",
      "type": "tls_self_signed_cert",
      "name": "kubernetes_ca_certs",
      "provider": "provider[\"registry.terraform.io/hashicorp/tls\"]",
      "instances": [
        {
          "index_key": "0",
          "schema_version": 0,
          "attributes": {
            "allowed_uses": [
              "digital_signature",
              "key_encipherment",
              "cert_signing"
            ],
            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIBvjCCAUOgAwIBAgIQU5fJLyMWshAKn0H00gX5vTAKBggqhkjOPQQDAzAfMR0w\nGwYDVQQDExRrdWJlcm5ldGVzLWNsaWVudC1jYTAgFw0yNDEyMDcwMDI5NTBaGA8y\nMTI0MTIwODAwMjk1MFowHzEdMBsGA1UEAxMUa3ViZXJuZXRlcy1jbGllbnQtY2Ew\ndjAQBgcqhkjOPQIBBgUrgQQAIgNiAAT2gA3x19IkRZNvw3DwP5OfjqhQMuMO1UTh\nWnATPzwDrnzBvca/oAa9rzzW3K1M9yQ0Sb2+E4nfkHHGIeSTaU7yYrlo7ZzScf/V\ngY5TpoyStzAxiORsu1GiC3nsqfkfBZyjQjBAMA4GA1UdDwEB/wQEAwICpDAPBgNV\nHRMBAf8EBTADAQH/MB0GA1UdDgQWBBQYYGLbIQKZO0sIEEdAe43+1ZOhLjAKBggq\nhkjOPQQDAwNpADBmAjEAmNiBmXT+FtGWhYXqJ3VtlNf46c9x4MkKVojoBTeHVsWF\nOGnp1OhJOAj+oY0itx6bAjEA3UH/mn+IdmGcAAlXwFKz+CLhNWrH9b+ZyoAZoXPI\nlXNxWKeWrdpm0zqixlQjTWJh\n-----END CERTIFICATE-----\n",
            "dns_names": null,
            "early_renewal_hours": 0,
            "id": "111114040974700161168029029447894432189",
            "ip_addresses": null,
            "is_ca_certificate": true,
            "key_algorithm": "ECDSA",
            "private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDAJP2DzrpeNGR3sbNAHGxtUcnSLxxYB24ybAOKp9IYKp84Oj3iFdTQG\nuU3q7VwLxOagBwYFK4EEACKhZANiAAT2gA3x19IkRZNvw3DwP5OfjqhQMuMO1UTh\nWnATPzwDrnzBvca/oAa9rzzW3K1M9yQ0Sb2+E4nfkHHGIeSTaU7yYrlo7ZzScf/V\ngY5TpoyStzAxiORsu1GiC3nsqfkfBZw=\n-----END EC PRIVATE KEY-----\n",
            "ready_for_renewal": false,
            "set_authority_key_id": false,
            "set_subject_key_id": false,
            "subject": [
              {
                "common_name": "kubernetes-client-ca",
                "country": null,
                "locality": null,
                "organization": null,
                "organizational_unit": null,
                "postal_code": null,
                "province": null,
                "serial_number": null,
                "street_address": null
              }
            ],
            "uris": null,
            "validity_end_time": "2124-12-08T08:29:50.488357017+08:00",
            "validity_period_hours": 876600,
            "validity_start_time": "2024-12-07T08:29:50.488357017+08:00"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "private_key_pem"
              }
            ]
          ],
          "dependencies": [
            "module.cvm2.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm2.data.tencentcloud_images.default",
            "module.cvm2.data.tencentcloud_instance_types.default",
            "module.cvm2.tencentcloud_instance.ubuntu",
            "module.k3s2.module.k3s.tls_private_key.kubernetes_ca",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        },
        {
          "index_key": "1",
          "schema_version": 0,
          "attributes": {
            "allowed_uses": [
              "digital_signature",
              "key_encipherment",
              "cert_signing"
            ],
            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIBvTCCAUSgAwIBAgIRALnUSt9le/attkL029p8fhgwCgYIKoZIzj0EAwMwHzEd\nMBsGA1UEAxMUa3ViZXJuZXRlcy1zZXJ2ZXItY2EwIBcNMjQxMjA3MDAyOTUwWhgP\nMjEyNDEyMDgwMDI5NTBaMB8xHTAbBgNVBAMTFGt1YmVybmV0ZXMtc2VydmVyLWNh\nMHYwEAYHKoZIzj0CAQYFK4EEACIDYgAENVdk0+DYYC1AlFaEohX8667m7x8xNxYF\nJRWBg1JihbunLkrC//H0oUyNmAvcH1FNzfqztqEym6/dx5DVKKK1Y53Ia90Rj4Y4\n/OH5WA0l149/SBMK5lrKwt1jlqyB4zGto0IwQDAOBgNVHQ8BAf8EBAMCAqQwDwYD\nVR0TAQH/BAUwAwEB/zAdBgNVHQ4EFgQUKdr8d91GrkOj1gaSTuYmNXIL5RQwCgYI\nKoZIzj0EAwMDZwAwZAIwDnlVk6n3zufuleIYSFVmGd11/yH9zURRgf+lE3y29N7H\nB57Upq3BtCykySDUeM3uAjA2R385VgJML9VQ2BU+xzfVUKI2ASyV6PL7EX/gKXH+\nr1VmGgqqjPzXFS7W6PMOYEk=\n-----END CERTIFICATE-----\n",
            "dns_names": null,
            "early_renewal_hours": 0,
            "id": "247009464751817579623354717533187636760",
            "ip_addresses": null,
            "is_ca_certificate": true,
            "key_algorithm": "ECDSA",
            "private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDAjN9XHGvNbgueoBi16/Nep+xvZRFbwDRs/Ynwb0CtYaRb/bcEDOGjh\n17vjXnl7q1SgBwYFK4EEACKhZANiAAQ1V2TT4NhgLUCUVoSiFfzrrubvHzE3FgUl\nFYGDUmKFu6cuSsL/8fShTI2YC9wfUU3N+rO2oTKbr93HkNUoorVjnchr3RGPhjj8\n4flYDSXXj39IEwrmWsrC3WOWrIHjMa0=\n-----END EC PRIVATE KEY-----\n",
            "ready_for_renewal": false,
            "set_authority_key_id": false,
            "set_subject_key_id": false,
            "subject": [
              {
                "common_name": "kubernetes-server-ca",
                "country": null,
                "locality": null,
                "organization": null,
                "organizational_unit": null,
                "postal_code": null,
                "province": null,
                "serial_number": null,
                "street_address": null
              }
            ],
            "uris": null,
            "validity_end_time": "2124-12-08T08:29:50.474493869+08:00",
            "validity_period_hours": 876600,
            "validity_start_time": "2024-12-07T08:29:50.474493869+08:00"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "private_key_pem"
              }
            ]
          ],
          "dependencies": [
            "module.cvm2.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm2.data.tencentcloud_images.default",
            "module.cvm2.data.tencentcloud_instance_types.default",
            "module.cvm2.tencentcloud_instance.ubuntu",
            "module.k3s2.module.k3s.tls_private_key.kubernetes_ca",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        },
        {
          "index_key": "2",
          "schema_version": 0,
          "attributes": {
            "allowed_uses": [
              "digital_signature",
              "key_encipherment",
              "cert_signing"
            ],
            "cert_pem": "-----BEGIN CERTIFICATE-----\nMIIB1DCCAVugAwIBAgIQPf4GpqnvbfE6U4aCsluPRzAKBggqhkjOPQQDAzArMSkw\nJwYDVQQDEyBrdWJlcm5ldGVzLXJlcXVlc3QtaGVhZGVyLWtleS1jYTAgFw0yNDEy\nMDcwMDI5NTBaGA8yMTI0MTIwODAwMjk1MFowKzEpMCcGA1UEAxMga3ViZXJuZXRl\ncy1yZXF1ZXN0LWhlYWRlci1rZXktY2EwdjAQBgcqhkjOPQIBBgUrgQQAIgNiAARe\nFjGiwBLPhRJZhAvk8KIex8vUUn8xv8w/roNUrJ8qYTX0uX5BDduf0hQ3nVPFahlu\nuEHM1tJnDhYDcOAG9yl0Hefafk7RpqFb9GO6LeViUTzOy8LwyUDdFfs/cbTZb7Gj\nQjBAMA4GA1UdDwEB/wQEAwICpDAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQWBBRm\ns1eGxrAcXHQFTWDBF/BciW4ZaTAKBggqhkjOPQQDAwNnADBkAjBdjyCQvA+PXhgC\navWOAMPt4NNR88MrwI282pHO2OOZ8QQptiugZnYnNvkYBRoAMYYCMBJyJH+I/hSB\nENoCBvsUzJQN4uCvzvm1iAV0FVwd6D7FYJdFMW7Ojv9JTYZNoX8Yzg==\n-----END CERTIFICATE-----\n",
            "dns_names": null,
            "early_renewal_hours": 0,
            "id": "82401886043872732861191579272262422343",
            "ip_addresses": null,
            "is_ca_certificate": true,
            "key_algorithm": "ECDSA",
            "private_key_pem": "-----BEGIN EC PRIVATE KEY-----\nMIGkAgEBBDBlgu6cd78xX+SZmP71CotUCvSLzrwV4fw9O0np5LEbaikIxVVSSnvI\naMTTeJLMpTmgBwYFK4EEACKhZANiAAReFjGiwBLPhRJZhAvk8KIex8vUUn8xv8w/\nroNUrJ8qYTX0uX5BDduf0hQ3nVPFahluuEHM1tJnDhYDcOAG9yl0Hefafk7RpqFb\n9GO6LeViUTzOy8LwyUDdFfs/cbTZb7E=\n-----END EC PRIVATE KEY-----\n",
            "ready_for_renewal": false,
            "set_authority_key_id": false,
            "set_subject_key_id": false,
            "subject": [
              {
                "common_name": "kubernetes-request-header-key-ca",
                "country": null,
                "locality": null,
                "organization": null,
                "organizational_unit": null,
                "postal_code": null,
                "province": null,
                "serial_number": null,
                "street_address": null
              }
            ],
            "uris": null,
            "validity_end_time": "2124-12-08T08:29:50.502811548+08:00",
            "validity_period_hours": 876600,
            "validity_start_time": "2024-12-07T08:29:50.502811548+08:00"
          },
          "sensitive_attributes": [
            [
              {
                "type": "get_attr",
                "value": "private_key_pem"
              }
            ]
          ],
          "dependencies": [
            "module.cvm2.data.tencentcloud_availability_zones_by_product.default",
            "module.cvm2.data.tencentcloud_images.default",
            "module.cvm2.data.tencentcloud_instance_types.default",
            "module.cvm2.tencentcloud_instance.ubuntu",
            "module.k3s2.module.k3s.tls_private_key.kubernetes_ca",
            "module.vpc.tencentcloud_security_group.sg",
            "module.vpc.tencentcloud_subnet.subnet",
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "tencentcloud_route_table",
      "name": "route_table",
      "provider": "module.vpc.provider[\"registry.terraform.io/tencentcloudstack/tencentcloud\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "create_time": "2024-12-07 08:29:05",
            "id": "rtb-agpts2hf",
            "is_default": false,
            "name": "tf-default-rt",
            "route_entry_ids": [],
            "subnet_ids": [],
            "tags": null,
            "vpc_id": "vpc-494cddo8"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "tencentcloud_security_group",
      "name": "sg",
      "provider": "module.vpc.provider[\"registry.terraform.io/tencentcloudstack/tencentcloud\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "description": "",
            "id": "sg-nh79fhzv",
            "name": "sg",
            "project_id": 0,
            "tags": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "tencentcloud_security_group_lite_rule",
      "name": "all",
      "provider": "module.vpc.provider[\"registry.terraform.io/tencentcloudstack/tencentcloud\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "egress": [
              "ACCEPT#0.0.0.0/0#ALL#TCP"
            ],
            "id": "sg-nh79fhzv",
            "ingress": [
              "ACCEPT#0.0.0.0/0#ALL#TCP"
            ],
            "security_group_id": "sg-nh79fhzv"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.vpc.tencentcloud_security_group.sg"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "tencentcloud_subnet",
      "name": "subnet",
      "provider": "module.vpc.provider[\"registry.terraform.io/tencentcloudstack/tencentcloud\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "availability_zone": "ap-hongkong-2",
            "available_ip_count": 253,
            "cdc_id": "",
            "cidr_block": "10.96.1.0/24",
            "create_time": "2024-12-07 08:29:05",
            "id": "subnet-fk50haw9",
            "is_default": false,
            "is_multicast": true,
            "name": "tf_subnet_default",
            "route_table_id": "rtb-o97jl7z1",
            "tags": null,
            "vpc_id": "vpc-494cddo8"
          },
          "sensitive_attributes": [],
          "private": "bnVsbA==",
          "dependencies": [
            "module.vpc.tencentcloud_vpc.vpc"
          ]
        }
      ]
    },
    {
      "module": "module.vpc",
      "mode": "managed",
      "type": "tencentcloud_vpc",
      "name": "vpc",
      "provider": "module.vpc.provider[\"registry.terraform.io/tencentcloudstack/tencentcloud\"]",
      "instances": [
        {
          "schema_version": 0,
          "attributes": {
            "assistant_cidrs": [],
            "cidr_block": "10.96.0.0/16",
            "create_time": "2024-12-07 08:28:59",
            "default_route_table_id": "rtb-o97jl7z1",
            "dns_servers": [
              "183.60.82.98",
              "183.60.83.19"
            ],
            "docker_assistant_cidrs": [],
            "id": "vpc-494cddo8",
            "is_default": false,
            "is_multicast": true,
            "name": "tf_vpc_default",
            "tags": null
          },
          "sensitive_attributes": [],
          "private": "bnVsbA=="
        }
      ]
    }
  ],
  "check_results": [
    {
      "object_kind": "var",
      "config_addr": "module.k3s1.module.k3s.var.servers",
      "status": "pass",
      "objects": [
        {
          "object_addr": "module.k3s1.module.k3s.var.servers",
          "status": "pass"
        }
      ]
    },
    {
      "object_kind": "var",
      "config_addr": "module.k3s2.module.k3s.var.k3s_install_env_vars",
      "status": "pass",
      "objects": [
        {
          "object_addr": "module.k3s2.module.k3s.var.k3s_install_env_vars",
          "status": "pass"
        }
      ]
    },
    {
      "object_kind": "var",
      "config_addr": "module.k3s.module.k3s.var.servers",
      "status": "pass",
      "objects": [
        {
          "object_addr": "module.k3s.module.k3s.var.servers",
          "status": "pass"
        }
      ]
    },
    {
      "object_kind": "var",
      "config_addr": "module.k3s.module.k3s.var.name",
      "status": "unknown",
      "objects": [
        {
          "object_addr": "module.k3s.module.k3s.var.name",
          "status": "unknown"
        }
      ]
    },
    {
      "object_kind": "var",
      "config_addr": "module.k3s1.module.k3s.var.k3s_install_env_vars",
      "status": "pass",
      "objects": [
        {
          "object_addr": "module.k3s1.module.k3s.var.k3s_install_env_vars",
          "status": "pass"
        }
      ]
    },
    {
      "object_kind": "var",
      "config_addr": "module.k3s.module.k3s.var.k3s_install_env_vars",
      "status": "pass",
      "objects": [
        {
          "object_addr": "module.k3s.module.k3s.var.k3s_install_env_vars",
          "status": "pass"
        }
      ]
    },
    {
      "object_kind": "var",
      "config_addr": "module.k3s1.module.k3s.var.agents",
      "status": "pass",
      "objects": [
        {
          "object_addr": "module.k3s1.module.k3s.var.agents",
          "status": "pass"
        }
      ]
    },
    {
      "object_kind": "var",
      "config_addr": "module.k3s2.module.k3s.var.agents",
      "status": "pass",
      "objects": [
        {
          "object_addr": "module.k3s2.module.k3s.var.agents",
          "status": "pass"
        }
      ]
    },
    {
      "object_kind": "var",
      "config_addr": "module.k3s1.module.k3s.var.name",
      "status": "unknown",
      "objects": [
        {
          "object_addr": "module.k3s1.module.k3s.var.name",
          "status": "unknown"
        }
      ]
    },
    {
      "object_kind": "var",
      "config_addr": "module.k3s.module.k3s.var.agents",
      "status": "pass",
      "objects": [
        {
          "object_addr": "module.k3s.module.k3s.var.agents",
          "status": "pass"
        }
      ]
    },
    {
      "object_kind": "var",
      "config_addr": "module.k3s2.module.k3s.var.name",
      "status": "unknown",
      "objects": [
        {
          "object_addr": "module.k3s2.module.k3s.var.name",
          "status": "unknown"
        }
      ]
    },
    {
      "object_kind": "var",
      "config_addr": "module.k3s2.module.k3s.var.servers",
      "status": "pass",
      "objects": [
        {
          "object_addr": "module.k3s2.module.k3s.var.servers",
          "status": "pass"
        }
      ]
    }
  ]
}
