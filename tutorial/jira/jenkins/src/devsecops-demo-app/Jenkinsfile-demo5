pipeline {
    parameters {
        string defaultValue: '', description: 'Please provide: Jira release id', name: 'RELEASE_ID', trim: true
        string defaultValue: '', description: 'Please provide: result image tag (optional)', name: 'FOO_IMAGE_TAG', trim: true
        string defaultValue: '', description: 'Please provide: vote image tag (optional)', name: 'BAR_IMAGE_TAG', trim: true
    }

    agent any
    stages {
        stage('Modify release image tag') {
            agent {
                kubernetes {
                    defaultContainer 'crane'
                    //workspaceVolume persistentVolumeClaimWorkspaceVolume(claimName: "jenkins-workspace-pvc", readOnly: false)
                    yaml """
kind: Pod
spec:
  containers:
  - name: crane
    image: gcr.io/go-containerregistry/crane/debug:latest
    imagePullPolicy: Always
    command:
    - sleep
    args:
    - 99d
    volumeMounts:
      - name: jenkins-docker-cfg
        mountPath: /root/.docker
  volumes:
  - name: jenkins-docker-cfg
    projected:
      sources:
      - secret:
          name: harbor-pullsecret
          items:
            - key: .dockerconfigjson
              path: config.json
"""
                }
            }
            
            environment {
                HARBOR_URL     = credentials('harbor-url')
                RELEASE_ID= "${params.RELEASE_ID}"
                FOO_IMAGE="${HARBOR_URL}/devsecops-demo-app/foo"
                BAR_IMAGE="${HARBOR_URL}/devsecops-demo-app/bar"
                FOO_IMAGE_TAG= "${params.FOO_IMAGE_TAG}"
                BAR_IMAGE_TAG= "${params.BAR_IMAGE_TAG}"
            }

            steps {
                container(name: 'crane', shell: '/busybox/sh') {
                    sh '''#!/busybox/sh
                        if [ -z "${RELEASE_ID}" ]; then
                            echo "release_id is empty"
                            exit 1
                        fi

                        if [ -n "${FOO_IMAGE_TAG}" ]; then
                            echo "Modify result image tag"
                            crane tag ${FOO_IMAGE}:${FOO_IMAGE_TAG} prod-${FOO_IMAGE_TAG}
                        fi

                        if [ -n "${BAR_IMAGE_TAG}" ]; then
                            echo "Modify vote image tag"
                            crane tag ${BAR_IMAGE}:${BAR_IMAGE_TAG} prod-${BAR_IMAGE_TAG}
                        fi

                        if [ -n "${WORKER_IMAGE_TAG}" ]; then
                            echo "Modify worker image tag"
                            crane tag ${WORKER_IMAGE}:${WORKER_IMAGE_TAG} prod-${WORKER_IMAGE_TAG}
                        fi
                    '''
                }
            }
        }

        stage('Trigger Jira release') {
            agent {
                kubernetes {
                    defaultContainer 'curl'
                    yaml """
kind: Pod
spec:
  securityContext:
    runAsUser: 1000
  containers:
    - name: curl
      image: curlimages/curl
      command:
      - sleep
      args:
      - 99d
"""
                }
            }

            environment {
              HARBOR_URL     = credentials('harbor-url')
              RELEASE_ID= "${params.RELEASE_ID}"
              JIRA_HOST_URL = "http://jira${HARBOR_URL.replaceAll('harbor','')}."
            }

            // update jira ticket status by curl API
            steps {
                container(name: 'curl') {
                    sh '''#!/bin/sh
                        if [ -z "${RELEASE_ID}" ]; then
                            echo "release_id is empty"
                            exit 1
                        fi
        
                        RELEASE_DATE=`date +%Y-%m-%d`
                        BODY_DATA='{"releaseDate":"'$RELEASE_DATE'","released":"true"}'
                        URL="${JIRA_HOST_URL}/rest/api/2/version/${RELEASE_ID}"
                        until curl -u admin:admin -X PUT -H "Content-Type: application/json" -d "$BODY_DATA" $URL
                        do
                            echo "Command failed, retrying in 2 seconds..."
                            sleep 2
                        done
                    '''
                }
            }
        }
    }  
}  
