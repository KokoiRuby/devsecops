pipeline {
    agent none
    stages {
        stage('Build foo') {
            when {
                changeset "**/foo/**"
            }
            agent {
                kubernetes {
                    defaultContainer 'kaniko'
                    yaml """
kind: Pod
spec:
  containers:
  - name: kaniko
    image: gcr.io/kaniko-project/executor:v1.23.2-debug
    imagePullPolicy: Always
    command:
    - sleep
    args:
    - 99d
    volumeMounts:
      - name: jenkins-docker-cfg
        mountPath: /kaniko/.docker
  volumes:
  - name: jenkins-docker-cfg
    projected:
      sources:
      - secret:
          name: harbor-pullsecret
          items:
            - key: .dockerconfigjson
              path: config.json
"""
                }
            }

            environment {
                HARBOR_URL     = credentials('harbor-url')
                IMAGE_PUSH_DESTINATION="${HARBOR_URL}/devsecops-demo-app/foo"
                GIT_COMMIT="${checkout (scm).GIT_COMMIT}"
                IMAGE_TAG = "${BRANCH_NAME}-${GIT_COMMIT}"
                BUILD_IMAGE="${IMAGE_PUSH_DESTINATION}:${IMAGE_TAG}"
                BUILD_IMAGE_LATEST="${IMAGE_PUSH_DESTINATION}:latest"
            }

            steps {
                container(name: 'kaniko', shell: '/busybox/sh') {
                    withEnv(['PATH+EXTRA=/busybox']) {
                        sh '''#!/busybox/sh
                            cd foo
                            /kaniko/executor --context `pwd` --destination $BUILD_IMAGE --insecure
                        '''
                    }
                }
            }
        }

        stage('Update dev environment') {
            agent {
                kubernetes {
                    defaultContainer 'kubectl'
                    yaml """
kind: Pod
spec:
  serviceAccountName: jenkins
  securityContext:
    runAsUser: 1000
  containers:
  - name: kubectl
    image: jitesoft/kubectl:v1.31
    imagePullPolicy: Always
    command:
    - sleep
    args:
    - 99d
"""
                }
            }

            environment {
                HARBOR_URL     = credentials('harbor-url')
                IMAGE_PUSH_DESTINATION="${HARBOR_URL}/devsecops-demo-app/foo"
                GIT_COMMIT="${checkout (scm).GIT_COMMIT}"
                IMAGE_TAG = "${BRANCH_NAME}-${GIT_COMMIT}"
                BUILD_IMAGE="${IMAGE_PUSH_DESTINATION}:${IMAGE_TAG}"
                BUILD_IMAGE_LATEST="${IMAGE_PUSH_DESTINATION}:latest"
            }

            steps {
                container(name: 'kubectl', shell: '/bin/sh') {
                    sh '''#!/bin/sh
                        kubectl set image deployment/devsecops-demo-app-foo devsecops-demo-app-foo=$BUILD_IMAGE -n dev
                    '''
                }
            }
        }

        stage("Confirm to update staging environment") {
            steps {
                input "Confirm to update staging environment?"
            }
        }

        stage('Update staging environment') {
            agent {
                kubernetes {
                    defaultContainer 'kubectl'
                    yaml """
kind: Pod
spec:
  serviceAccountName: jenkins
  securityContext:
    runAsUser: 1000
  containers:
  - name: kubectl
    image: jitesoft/kubectl:v1.31
    imagePullPolicy: Always
    command:
    - sleep
    args:
    - 99d
"""
                }
            }

            environment {
                HARBOR_URL     = credentials('harbor-url')
                IMAGE_PUSH_DESTINATION="${HARBOR_URL}/devsecops-demo-app/foo"
                GIT_COMMIT="${checkout (scm).GIT_COMMIT}"
                IMAGE_TAG = "${BRANCH_NAME}-${GIT_COMMIT}"
                BUILD_IMAGE="${IMAGE_PUSH_DESTINATION}:${IMAGE_TAG}"
                BUILD_IMAGE_LATEST="${IMAGE_PUSH_DESTINATION}:latest"
            }

            steps {
                container(name: 'kubectl', shell: '/bin/sh') {
                    sh '''#!/bin/sh
                        kubectl set image deployment/devsecops-demo-app-foo devsecops-demo-app-foo=$BUILD_IMAGE -n stage
                    '''
                }
            }
        }
    }
}
